
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00003636  000036ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000e8  008000e8  00003752  2**0
                  ALLOC
  3 .stab         0000300c  00000000  00000000  00003754  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011eb  00000000  00000000  00006760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000794b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3f       	cpi	r26, 0xF5	; 245
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ed       	ldi	r26, 0xDE	; 222
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ed       	ldi	r24, 0xDE	; 222
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 Check_Matching;
uint8 num = 0;


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7); //Global Interrupt Enable to request interrupt
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	UART_ConfigType Uart;
	Uart.baud_rate = 9600;
     b68:	80 e8       	ldi	r24, 0x80	; 128
     b6a:	95 e2       	ldi	r25, 0x25	; 37
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	8c 83       	std	Y+4, r24	; 0x04
     b72:	9d 83       	std	Y+5, r25	; 0x05
     b74:	ae 83       	std	Y+6, r26	; 0x06
     b76:	bf 83       	std	Y+7, r27	; 0x07
	Uart.bit_data = Data_8bit;
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	89 83       	std	Y+1, r24	; 0x01
	Uart.parity = Disable_Parity;
     b7c:	1a 82       	std	Y+2, r1	; 0x02
	Uart.stop_bit = Stop_1bit;
     b7e:	1b 82       	std	Y+3, r1	; 0x03
	UART_init(&Uart);
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <UART_init>

	LCD_init();
     b88:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_init>





	Enter_Password(Pass);
     b8c:	80 ef       	ldi	r24, 0xF0	; 240
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 ee 05 	call	0xbdc	; 0xbdc <Enter_Password>
	Check_Matching  = Check_Passwords_Matching();
     b94:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Check_Passwords_Matching>
     b98:	80 93 ef 00 	sts	0x00EF, r24

	while(1)
	{


		if(Check_Matching == MATCHED_PASS)
     b9c:	80 91 ef 00 	lds	r24, 0x00EF
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	19 f4       	brne	.+6      	; 0xbaa <main+0x64>
		{

			Main_Options();
     ba4:	0e 94 5f 08 	call	0x10be	; 0x10be <Main_Options>
     ba8:	f9 cf       	rjmp	.-14     	; 0xb9c <main+0x56>

		}
		else if(Check_Matching == UNMATCHED_PASS)
     baa:	80 91 ef 00 	lds	r24, 0x00EF
     bae:	88 23       	and	r24, r24
     bb0:	a9 f7       	brne	.-22     	; 0xb9c <main+0x56>
		{
			if(num > 0) //dont enter first time only
     bb2:	80 91 ec 00 	lds	r24, 0x00EC
     bb6:	88 23       	and	r24, r24
     bb8:	61 f0       	breq	.+24     	; 0xbd2 <main+0x8c>
			{
			while(UART_recieveByte() != MC2_READY){}
     bba:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
     bbe:	8f 3f       	cpi	r24, 0xFF	; 255
     bc0:	e1 f7       	brne	.-8      	; 0xbba <main+0x74>
			UART_sendByte(CHECK_PASSWORDS_MATCHING);
     bc2:	87 e0       	ldi	r24, 0x07	; 7
     bc4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
			num++;
     bc8:	80 91 ec 00 	lds	r24, 0x00EC
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 ec 00 	sts	0x00EC, r24
			}
			Check_Matching  = Check_Passwords_Matching();
     bd2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Check_Passwords_Matching>
     bd6:	80 93 ef 00 	sts	0x00EF, r24
     bda:	e0 cf       	rjmp	.-64     	; 0xb9c <main+0x56>

00000bdc <Enter_Password>:
}



void Enter_Password(uint8* pass)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	62 97       	sbiw	r28, 0x12	; 18
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	9a 8b       	std	Y+18, r25	; 0x12
     bf2:	89 8b       	std	Y+17, r24	; 0x11
	LCD_clearScreen();
     bf4:	0e 94 dd 18 	call	0x31ba	; 0x31ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLZ Enter Pass:");
     bf8:	20 e6       	ldi	r18, 0x60	; 96
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	a9 01       	movw	r20, r18
     c02:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	0e 94 5f 18 	call	0x30be	; 0x30be <LCD_moveCursor>
	uint8 i,keypad;
	for(i = 0; i < 5; i++)
     c0e:	18 8a       	std	Y+16, r1	; 0x10
     c10:	85 c0       	rjmp	.+266    	; 0xd1c <Enter_Password+0x140>
	{
		keypad = KEYPAD_getPressedKey();
     c12:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <KEYPAD_getPressedKey>
     c16:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_displayCharacter('*');
     c18:	8a e2       	ldi	r24, 0x2A	; 42
     c1a:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
		pass[i] = keypad;
     c1e:	88 89       	ldd	r24, Y+16	; 0x10
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	89 89       	ldd	r24, Y+17	; 0x11
     c26:	9a 89       	ldd	r25, Y+18	; 0x12
     c28:	fc 01       	movw	r30, r24
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c30:	80 83       	st	Z, r24
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	aa ef       	ldi	r26, 0xFA	; 250
     c38:	b3 e4       	ldi	r27, 0x43	; 67
     c3a:	8b 87       	std	Y+11, r24	; 0x0b
     c3c:	9c 87       	std	Y+12, r25	; 0x0c
     c3e:	ad 87       	std	Y+13, r26	; 0x0d
     c40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c42:	6b 85       	ldd	r22, Y+11	; 0x0b
     c44:	7c 85       	ldd	r23, Y+12	; 0x0c
     c46:	8d 85       	ldd	r24, Y+13	; 0x0d
     c48:	9e 85       	ldd	r25, Y+14	; 0x0e
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	4a ef       	ldi	r20, 0xFA	; 250
     c50:	54 e4       	ldi	r21, 0x44	; 68
     c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	8f 83       	std	Y+7, r24	; 0x07
     c5c:	98 87       	std	Y+8, r25	; 0x08
     c5e:	a9 87       	std	Y+9, r26	; 0x09
     c60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c62:	6f 81       	ldd	r22, Y+7	; 0x07
     c64:	78 85       	ldd	r23, Y+8	; 0x08
     c66:	89 85       	ldd	r24, Y+9	; 0x09
     c68:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e8       	ldi	r20, 0x80	; 128
     c70:	5f e3       	ldi	r21, 0x3F	; 63
     c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c76:	88 23       	and	r24, r24
     c78:	2c f4       	brge	.+10     	; 0xc84 <Enter_Password+0xa8>
		__ticks = 1;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	9e 83       	std	Y+6, r25	; 0x06
     c80:	8d 83       	std	Y+5, r24	; 0x05
     c82:	3f c0       	rjmp	.+126    	; 0xd02 <Enter_Password+0x126>
	else if (__tmp > 65535)
     c84:	6f 81       	ldd	r22, Y+7	; 0x07
     c86:	78 85       	ldd	r23, Y+8	; 0x08
     c88:	89 85       	ldd	r24, Y+9	; 0x09
     c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	3f ef       	ldi	r19, 0xFF	; 255
     c90:	4f e7       	ldi	r20, 0x7F	; 127
     c92:	57 e4       	ldi	r21, 0x47	; 71
     c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c98:	18 16       	cp	r1, r24
     c9a:	4c f5       	brge	.+82     	; 0xcee <Enter_Password+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e2       	ldi	r20, 0x20	; 32
     caa:	51 e4       	ldi	r21, 0x41	; 65
     cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	bc 01       	movw	r22, r24
     cb6:	cd 01       	movw	r24, r26
     cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	0f c0       	rjmp	.+30     	; 0xce4 <Enter_Password+0x108>
     cc6:	88 ec       	ldi	r24, 0xC8	; 200
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <Enter_Password+0xf6>
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	9e 83       	std	Y+6, r25	; 0x06
     ce2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	9e 81       	ldd	r25, Y+6	; 0x06
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	69 f7       	brne	.-38     	; 0xcc6 <Enter_Password+0xea>
     cec:	14 c0       	rjmp	.+40     	; 0xd16 <Enter_Password+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	9e 83       	std	Y+6, r25	; 0x06
     d00:	8d 83       	std	Y+5, r24	; 0x05
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <Enter_Password+0x132>
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
{
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"PLZ Enter Pass:");
	LCD_moveCursor(1,0);
	uint8 i,keypad;
	for(i = 0; i < 5; i++)
     d16:	88 89       	ldd	r24, Y+16	; 0x10
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	88 8b       	std	Y+16, r24	; 0x10
     d1c:	88 89       	ldd	r24, Y+16	; 0x10
     d1e:	85 30       	cpi	r24, 0x05	; 5
     d20:	08 f4       	brcc	.+2      	; 0xd24 <Enter_Password+0x148>
     d22:	77 cf       	rjmp	.-274    	; 0xc12 <Enter_Password+0x36>
		LCD_displayCharacter('*');
		pass[i] = keypad;
		_delay_ms(500); //time of pressing button
	}

	while(KEYPAD_getPressedKey() != 13); //wait until pressing enter
     d24:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <KEYPAD_getPressedKey>
     d28:	8d 30       	cpi	r24, 0x0D	; 13
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <Enter_Password+0x148>
}
     d2c:	62 96       	adiw	r28, 0x12	; 18
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <Check_Passwords_Matching>:




uint8 Check_Passwords_Matching(void)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	65 97       	sbiw	r28, 0x15	; 21
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[5];
	LCD_clearScreen();
     d52:	0e 94 dd 18 	call	0x31ba	; 0x31ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Please re-enter the");
     d56:	20 e7       	ldi	r18, 0x70	; 112
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	a9 01       	movw	r20, r18
     d60:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"same Pass:");
     d64:	24 e8       	ldi	r18, 0x84	; 132
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	a9 01       	movw	r20, r18
     d6e:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	uint8 i,keypad;
	for(i = 0; i < 5; i++)
     d72:	18 8a       	std	Y+16, r1	; 0x10
     d74:	85 c0       	rjmp	.+266    	; 0xe80 <Check_Passwords_Matching+0x142>
	{
		keypad = KEYPAD_getPressedKey();
     d76:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <KEYPAD_getPressedKey>
     d7a:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_displayCharacter('*');
     d7c:	8a e2       	ldi	r24, 0x2A	; 42
     d7e:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
		pass[i] = keypad;
     d82:	88 89       	ldd	r24, Y+16	; 0x10
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	ce 01       	movw	r24, r28
     d8a:	41 96       	adiw	r24, 0x11	; 17
     d8c:	fc 01       	movw	r30, r24
     d8e:	e2 0f       	add	r30, r18
     d90:	f3 1f       	adc	r31, r19
     d92:	8f 85       	ldd	r24, Y+15	; 0x0f
     d94:	80 83       	st	Z, r24
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	aa ef       	ldi	r26, 0xFA	; 250
     d9c:	b3 e4       	ldi	r27, 0x43	; 67
     d9e:	8b 87       	std	Y+11, r24	; 0x0b
     da0:	9c 87       	std	Y+12, r25	; 0x0c
     da2:	ad 87       	std	Y+13, r26	; 0x0d
     da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da6:	6b 85       	ldd	r22, Y+11	; 0x0b
     da8:	7c 85       	ldd	r23, Y+12	; 0x0c
     daa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dac:	9e 85       	ldd	r25, Y+14	; 0x0e
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	4a ef       	ldi	r20, 0xFA	; 250
     db4:	54 e4       	ldi	r21, 0x44	; 68
     db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8f 83       	std	Y+7, r24	; 0x07
     dc0:	98 87       	std	Y+8, r25	; 0x08
     dc2:	a9 87       	std	Y+9, r26	; 0x09
     dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dc6:	6f 81       	ldd	r22, Y+7	; 0x07
     dc8:	78 85       	ldd	r23, Y+8	; 0x08
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dda:	88 23       	and	r24, r24
     ddc:	2c f4       	brge	.+10     	; 0xde8 <Check_Passwords_Matching+0xaa>
		__ticks = 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	3f c0       	rjmp	.+126    	; 0xe66 <Check_Passwords_Matching+0x128>
	else if (__tmp > 65535)
     de8:	6f 81       	ldd	r22, Y+7	; 0x07
     dea:	78 85       	ldd	r23, Y+8	; 0x08
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	3f ef       	ldi	r19, 0xFF	; 255
     df4:	4f e7       	ldi	r20, 0x7F	; 127
     df6:	57 e4       	ldi	r21, 0x47	; 71
     df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	4c f5       	brge	.+82     	; 0xe52 <Check_Passwords_Matching+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e00:	6b 85       	ldd	r22, Y+11	; 0x0b
     e02:	7c 85       	ldd	r23, Y+12	; 0x0c
     e04:	8d 85       	ldd	r24, Y+13	; 0x0d
     e06:	9e 85       	ldd	r25, Y+14	; 0x0e
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e2       	ldi	r20, 0x20	; 32
     e0e:	51 e4       	ldi	r21, 0x41	; 65
     e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <Check_Passwords_Matching+0x10a>
     e2a:	88 ec       	ldi	r24, 0xC8	; 200
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	8b 83       	std	Y+3, r24	; 0x03
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <Check_Passwords_Matching+0xf8>
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	69 f7       	brne	.-38     	; 0xe2a <Check_Passwords_Matching+0xec>
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <Check_Passwords_Matching+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <Check_Passwords_Matching+0x134>
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01
	uint8 pass[5];
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Please re-enter the");
	LCD_displayStringRowColumn(1,0,"same Pass:");
	uint8 i,keypad;
	for(i = 0; i < 5; i++)
     e7a:	88 89       	ldd	r24, Y+16	; 0x10
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	88 8b       	std	Y+16, r24	; 0x10
     e80:	88 89       	ldd	r24, Y+16	; 0x10
     e82:	85 30       	cpi	r24, 0x05	; 5
     e84:	08 f4       	brcc	.+2      	; 0xe88 <Check_Passwords_Matching+0x14a>
     e86:	77 cf       	rjmp	.-274    	; 0xd76 <Check_Passwords_Matching+0x38>
		LCD_displayCharacter('*');
		pass[i] = keypad;
		_delay_ms(500); //time of pressing button
	}

	while(KEYPAD_getPressedKey() != 13); //wait until enter is pressed
     e88:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <KEYPAD_getPressedKey>
     e8c:	8d 30       	cpi	r24, 0x0D	; 13
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <Check_Passwords_Matching+0x14a>

	for(i = 0; i < 5; i++) //sending first password
     e90:	18 8a       	std	Y+16, r1	; 0x10
     e92:	10 c0       	rjmp	.+32     	; 0xeb4 <Check_Passwords_Matching+0x176>
	{
		while(UART_recieveByte() != MC2_READY){}
     e94:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
     e98:	8f 3f       	cpi	r24, 0xFF	; 255
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <Check_Passwords_Matching+0x156>
		UART_sendByte(Pass[i]);
     e9c:	88 89       	ldd	r24, Y+16	; 0x10
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	e0 51       	subi	r30, 0x10	; 16
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	80 81       	ld	r24, Z
     eaa:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
		_delay_ms(500); //time of pressing button
	}

	while(KEYPAD_getPressedKey() != 13); //wait until enter is pressed

	for(i = 0; i < 5; i++) //sending first password
     eae:	88 89       	ldd	r24, Y+16	; 0x10
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	88 8b       	std	Y+16, r24	; 0x10
     eb4:	88 89       	ldd	r24, Y+16	; 0x10
     eb6:	85 30       	cpi	r24, 0x05	; 5
     eb8:	68 f3       	brcs	.-38     	; 0xe94 <Check_Passwords_Matching+0x156>
	{
		while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(Pass[i]);
	}

	for(i = 0; i < 5; i++) //sending second password
     eba:	18 8a       	std	Y+16, r1	; 0x10
     ebc:	12 c0       	rjmp	.+36     	; 0xee2 <Check_Passwords_Matching+0x1a4>
	{
		while(UART_recieveByte() != MC2_READY){}
     ebe:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
     ec2:	8f 3f       	cpi	r24, 0xFF	; 255
     ec4:	e1 f7       	brne	.-8      	; 0xebe <Check_Passwords_Matching+0x180>
		UART_sendByte(pass[i]);
     ec6:	88 89       	ldd	r24, Y+16	; 0x10
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	ce 01       	movw	r24, r28
     ece:	41 96       	adiw	r24, 0x11	; 17
     ed0:	fc 01       	movw	r30, r24
     ed2:	e2 0f       	add	r30, r18
     ed4:	f3 1f       	adc	r31, r19
     ed6:	80 81       	ld	r24, Z
     ed8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
	{
		while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(Pass[i]);
	}

	for(i = 0; i < 5; i++) //sending second password
     edc:	88 89       	ldd	r24, Y+16	; 0x10
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	88 8b       	std	Y+16, r24	; 0x10
     ee2:	88 89       	ldd	r24, Y+16	; 0x10
     ee4:	85 30       	cpi	r24, 0x05	; 5
     ee6:	58 f3       	brcs	.-42     	; 0xebe <Check_Passwords_Matching+0x180>
	{
		while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(pass[i]);
	}

	UART_sendByte(MC1_READY);
     ee8:	80 ef       	ldi	r24, 0xF0	; 240
     eea:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
	return UART_recieveByte(); //return matched or not
     eee:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
}
     ef2:	65 96       	adiw	r28, 0x15	; 21
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <Check_Password>:




uint8 Check_Password(void)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	Enter_Password(Pass);
     f0e:	80 ef       	ldi	r24, 0xF0	; 240
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 ee 05 	call	0xbdc	; 0xbdc <Enter_Password>
	while(UART_recieveByte() != MC2_READY){}
     f16:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
     f1a:	8f 3f       	cpi	r24, 0xFF	; 255
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <Check_Password+0x12>
	UART_sendByte(CHECK_PASSWORD); //to notice MC2 to enter CHECK_PASSWORD() function
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>

	for(i = 0; i < 5; i++) //sending password
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	10 c0       	rjmp	.+32     	; 0xf48 <Check_Password+0x44>
	{
		while(UART_recieveByte() != MC2_READY){}
     f28:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
     f2c:	8f 3f       	cpi	r24, 0xFF	; 255
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <Check_Password+0x24>
		UART_sendByte(Pass[i]);
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	fc 01       	movw	r30, r24
     f38:	e0 51       	subi	r30, 0x10	; 16
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
	uint8 i;
	Enter_Password(Pass);
	while(UART_recieveByte() != MC2_READY){}
	UART_sendByte(CHECK_PASSWORD); //to notice MC2 to enter CHECK_PASSWORD() function

	for(i = 0; i < 5; i++) //sending password
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	85 30       	cpi	r24, 0x05	; 5
     f4c:	68 f3       	brcs	.-38     	; 0xf28 <Check_Password+0x24>
	{
		while(UART_recieveByte() != MC2_READY){}
		UART_sendByte(Pass[i]);
	}

	UART_sendByte(MC1_READY);
     f4e:	80 ef       	ldi	r24, 0xF0	; 240
     f50:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
	return UART_recieveByte(); //return matched or not
     f54:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
}
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <Alert>:


uint8 Alert(void)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	60 97       	sbiw	r28, 0x10	; 16
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for(i = 0; i < 2; i++) //two more trials, so overall trials before alert = 3
     f74:	1f 86       	std	Y+15, r1	; 0x0f
     f76:	0a c0       	rjmp	.+20     	; 0xf8c <Alert+0x2c>
	{
		if(Check_Password() == MATCHED_PASS)
     f78:	0e 94 82 07 	call	0xf04	; 0xf04 <Check_Password>
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	19 f4       	brne	.+6      	; 0xf86 <Alert+0x26>
		{
			return MATCHED_PASS; //end function and dont alert
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	88 8b       	std	Y+16, r24	; 0x10
     f84:	92 c0       	rjmp	.+292    	; 0x10aa <Alert+0x14a>


uint8 Alert(void)
{
	uint8 i;
	for(i = 0; i < 2; i++) //two more trials, so overall trials before alert = 3
     f86:	8f 85       	ldd	r24, Y+15	; 0x0f
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	8f 87       	std	Y+15, r24	; 0x0f
     f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	98 f3       	brcs	.-26     	; 0xf78 <Alert+0x18>
		{
			return MATCHED_PASS; //end function and dont alert
		}
	}

	while(UART_recieveByte() != MC2_READY){}
     f92:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
     f96:	8f 3f       	cpi	r24, 0xFF	; 255
     f98:	e1 f7       	brne	.-8      	; 0xf92 <Alert+0x32>
	UART_sendByte(ALERT); //send to MC2 to enter Alert() function
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>

	LCD_clearScreen();
     fa0:	0e 94 dd 18 	call	0x31ba	; 0x31ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"ERORR!!");
     fa4:	2f e8       	ldi	r18, 0x8F	; 143
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	a9 01       	movw	r20, r18
     fae:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	for(i = 0; i < 12; i++)//delay for one minute = 12*2sec.
     fb2:	1f 86       	std	Y+15, r1	; 0x0f
     fb4:	75 c0       	rjmp	.+234    	; 0x10a0 <Alert+0x140>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e4       	ldi	r25, 0x40	; 64
     fba:	ac e9       	ldi	r26, 0x9C	; 156
     fbc:	b5 e4       	ldi	r27, 0x45	; 69
     fbe:	8b 87       	std	Y+11, r24	; 0x0b
     fc0:	9c 87       	std	Y+12, r25	; 0x0c
     fc2:	ad 87       	std	Y+13, r26	; 0x0d
     fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fca:	8d 85       	ldd	r24, Y+13	; 0x0d
     fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a ef       	ldi	r20, 0xFA	; 250
     fd4:	54 e4       	ldi	r21, 0x44	; 68
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8f 83       	std	Y+7, r24	; 0x07
     fe0:	98 87       	std	Y+8, r25	; 0x08
     fe2:	a9 87       	std	Y+9, r26	; 0x09
     fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe6:	6f 81       	ldd	r22, Y+7	; 0x07
     fe8:	78 85       	ldd	r23, Y+8	; 0x08
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	2c f4       	brge	.+10     	; 0x1008 <Alert+0xa8>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <Alert+0x126>
	else if (__tmp > 65535)
    1008:	6f 81       	ldd	r22, Y+7	; 0x07
    100a:	78 85       	ldd	r23, Y+8	; 0x08
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	4c f5       	brge	.+82     	; 0x1072 <Alert+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	6b 85       	ldd	r22, Y+11	; 0x0b
    1022:	7c 85       	ldd	r23, Y+12	; 0x0c
    1024:	8d 85       	ldd	r24, Y+13	; 0x0d
    1026:	9e 85       	ldd	r25, Y+14	; 0x0e
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <Alert+0x108>
    104a:	88 ec       	ldi	r24, 0xC8	; 200
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <Alert+0xf6>
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <Alert+0xea>
    1070:	14 c0       	rjmp	.+40     	; 0x109a <Alert+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	6f 81       	ldd	r22, Y+7	; 0x07
    1074:	78 85       	ldd	r23, Y+8	; 0x08
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	9a 85       	ldd	r25, Y+10	; 0x0a
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <Alert+0x132>
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	8f 85       	ldd	r24, Y+15	; 0x0f
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	8f 87       	std	Y+15, r24	; 0x0f
    10a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a2:	8c 30       	cpi	r24, 0x0C	; 12
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <Alert+0x148>
    10a6:	87 cf       	rjmp	.-242    	; 0xfb6 <Alert+0x56>
	{
		_delay_ms(5000); //we want all devices of system to stop during alert, so we use delay not timer1
	}
	return UNMATCHED_PASS;
    10a8:	18 8a       	std	Y+16, r1	; 0x10
    10aa:	88 89       	ldd	r24, Y+16	; 0x10


}
    10ac:	60 96       	adiw	r28, 0x10	; 16
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <Main_Options>:


void Main_Options(void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <Main_Options+0x6>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
	num++;
    10c8:	80 91 ec 00 	lds	r24, 0x00EC
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	80 93 ec 00 	sts	0x00EC, r24
	uint8 check,keypad;
	LCD_clearScreen();
    10d2:	0e 94 dd 18 	call	0x31ba	; 0x31ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    10d6:	27 e9       	ldi	r18, 0x97	; 151
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    10e4:	25 ea       	ldi	r18, 0xA5	; 165
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	keypad = KEYPAD_getPressedKey();
    10f2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <KEYPAD_getPressedKey>
    10f6:	89 83       	std	Y+1, r24	; 0x01
	while(KEYPAD_getPressedKey() != 13); //wait until pressing enter
    10f8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <KEYPAD_getPressedKey>
    10fc:	8d 30       	cpi	r24, 0x0D	; 13
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <Main_Options+0x3a>

	if(keypad == '+')
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	8b 32       	cpi	r24, 0x2B	; 43
    1104:	c1 f4       	brne	.+48     	; 0x1136 <Main_Options+0x78>
	{
		check = Check_Password();
    1106:	0e 94 82 07 	call	0xf04	; 0xf04 <Check_Password>
    110a:	8a 83       	std	Y+2, r24	; 0x02

		if(check == MATCHED_PASS)
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	39 f4       	brne	.+14     	; 0x1120 <Main_Options+0x62>
		{
			Door_unlocking();
    1112:	0e 94 63 09 	call	0x12c6	; 0x12c6 <Door_unlocking>
			Door_Open();
    1116:	0e 94 a5 09 	call	0x134a	; 0x134a <Door_Open>
			Door_locking();
    111a:	0e 94 84 09 	call	0x1308	; 0x1308 <Door_locking>
    111e:	37 c0       	rjmp	.+110    	; 0x118e <Main_Options+0xd0>
		}
		else
		{
			if(Alert() == MATCHED_PASS) //if user enter the write password in second or third trial door unlock,else system alert then return to main options
    1120:	0e 94 b0 07 	call	0xf60	; 0xf60 <Alert>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	99 f5       	brne	.+102    	; 0x118e <Main_Options+0xd0>
			{
				Door_unlocking();
    1128:	0e 94 63 09 	call	0x12c6	; 0x12c6 <Door_unlocking>
				Door_Open();
    112c:	0e 94 a5 09 	call	0x134a	; 0x134a <Door_Open>
				Door_locking();
    1130:	0e 94 84 09 	call	0x1308	; 0x1308 <Door_locking>
    1134:	2c c0       	rjmp	.+88     	; 0x118e <Main_Options+0xd0>
			}
		}
	}
	else if(keypad == '-')
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	8d 32       	cpi	r24, 0x2D	; 45
    113a:	49 f5       	brne	.+82     	; 0x118e <Main_Options+0xd0>
	{
		check = Check_Password();
    113c:	0e 94 82 07 	call	0xf04	; 0xf04 <Check_Password>
    1140:	8a 83       	std	Y+2, r24	; 0x02

		if(check == MATCHED_PASS)
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	81 f4       	brne	.+32     	; 0x1168 <Main_Options+0xaa>
		{
			Enter_Password(Pass);
    1148:	80 ef       	ldi	r24, 0xF0	; 240
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <Enter_Password>
			while(UART_recieveByte() != MC2_READY){}
    1150:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
    1154:	8f 3f       	cpi	r24, 0xFF	; 255
    1156:	e1 f7       	brne	.-8      	; 0x1150 <Main_Options+0x92>
			UART_sendByte(CHECK_PASSWORDS_MATCHING);
    1158:	87 e0       	ldi	r24, 0x07	; 7
    115a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
			Check_Matching  = Check_Passwords_Matching();
    115e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Check_Passwords_Matching>
    1162:	80 93 ef 00 	sts	0x00EF, r24
    1166:	13 c0       	rjmp	.+38     	; 0x118e <Main_Options+0xd0>
		}
		else
		{
			if(Alert() == MATCHED_PASS) //if user enter the write password in second or third trial door unlock,else system alert then return to main options
    1168:	0e 94 b0 07 	call	0xf60	; 0xf60 <Alert>
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	79 f4       	brne	.+30     	; 0x118e <Main_Options+0xd0>
			{
				Enter_Password(Pass);
    1170:	80 ef       	ldi	r24, 0xF0	; 240
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 ee 05 	call	0xbdc	; 0xbdc <Enter_Password>
				while(UART_recieveByte() != MC2_READY){}
    1178:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
    117c:	8f 3f       	cpi	r24, 0xFF	; 255
    117e:	e1 f7       	brne	.-8      	; 0x1178 <Main_Options+0xba>
				UART_sendByte(CHECK_PASSWORDS_MATCHING);
    1180:	87 e0       	ldi	r24, 0x07	; 7
    1182:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
				Check_Matching  = Check_Passwords_Matching();
    1186:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Check_Passwords_Matching>
    118a:	80 93 ef 00 	sts	0x00EF, r24
			}
		}
	}
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <Timer_On>:




void Timer_On(void(*a_ptr)(void)) //send to timer needed call_back function
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	28 97       	sbiw	r28, 0x08	; 8
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	98 87       	std	Y+8, r25	; 0x08
    11ae:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_ConfigType Config_Timer;
	Config_Timer.prescaler = F_CPU_8;
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	8d 83       	std	Y+5, r24	; 0x05
	Config_Timer.mode = compare;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	8e 83       	std	Y+6, r24	; 0x06
	Config_Timer.initial_value = 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
	Config_Timer.compare_value = 10000; //which means interupt every 10ms
    11c0:	80 e1       	ldi	r24, 0x10	; 16
    11c2:	97 e2       	ldi	r25, 0x27	; 39
    11c4:	9c 83       	std	Y+4, r25	; 0x04
    11c6:	8b 83       	std	Y+3, r24	; 0x03
	Timer1_init(&Config_Timer);
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	0e 94 1a 19 	call	0x3234	; 0x3234 <Timer1_init>
	Timer1_setCallBack(a_ptr);
    11d0:	8f 81       	ldd	r24, Y+7	; 0x07
    11d2:	98 85       	ldd	r25, Y+8	; 0x08
    11d4:	0e 94 68 19 	call	0x32d0	; 0x32d0 <Timer1_setCallBack>
}
    11d8:	28 96       	adiw	r28, 0x08	; 8
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <Timer_Door_locking_unlocking>:




void Timer_Door_locking_unlocking(void)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    11f2:	80 91 e8 00 	lds	r24, 0x00E8
    11f6:	90 91 e9 00 	lds	r25, 0x00E9
    11fa:	a0 91 ea 00 	lds	r26, 0x00EA
    11fe:	b0 91 eb 00 	lds	r27, 0x00EB
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	a1 1d       	adc	r26, r1
    1206:	b1 1d       	adc	r27, r1
    1208:	80 93 e8 00 	sts	0x00E8, r24
    120c:	90 93 e9 00 	sts	0x00E9, r25
    1210:	a0 93 ea 00 	sts	0x00EA, r26
    1214:	b0 93 eb 00 	sts	0x00EB, r27
	if(g_tick == 1500)  //Enter if condition every 1500*10ms(interrupt time = 10ms) = 15seconds
    1218:	80 91 e8 00 	lds	r24, 0x00E8
    121c:	90 91 e9 00 	lds	r25, 0x00E9
    1220:	a0 91 ea 00 	lds	r26, 0x00EA
    1224:	b0 91 eb 00 	lds	r27, 0x00EB
    1228:	8c 3d       	cpi	r24, 0xDC	; 220
    122a:	25 e0       	ldi	r18, 0x05	; 5
    122c:	92 07       	cpc	r25, r18
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	a2 07       	cpc	r26, r18
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	b2 07       	cpc	r27, r18
    1236:	69 f4       	brne	.+26     	; 0x1252 <Timer_Door_locking_unlocking+0x68>
	{
		g_tick = 0;
    1238:	10 92 e8 00 	sts	0x00E8, r1
    123c:	10 92 e9 00 	sts	0x00E9, r1
    1240:	10 92 ea 00 	sts	0x00EA, r1
    1244:	10 92 eb 00 	sts	0x00EB, r1
		Timer1_deInit(); //Turn off timer after displaying on screen for 15seconds
    1248:	0e 94 54 19 	call	0x32a8	; 0x32a8 <Timer1_deInit>
		Flag_Of_locking = 1; //To exit while loop of Door_unlocking() function
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	80 93 e6 00 	sts	0x00E6, r24
	}
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <Timer_Door_Open>:




void Timer_Door_Open(void)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1260:	80 91 e8 00 	lds	r24, 0x00E8
    1264:	90 91 e9 00 	lds	r25, 0x00E9
    1268:	a0 91 ea 00 	lds	r26, 0x00EA
    126c:	b0 91 eb 00 	lds	r27, 0x00EB
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	a1 1d       	adc	r26, r1
    1274:	b1 1d       	adc	r27, r1
    1276:	80 93 e8 00 	sts	0x00E8, r24
    127a:	90 93 e9 00 	sts	0x00E9, r25
    127e:	a0 93 ea 00 	sts	0x00EA, r26
    1282:	b0 93 eb 00 	sts	0x00EB, r27
	if(g_tick == 300)  //Enter if condition every 300*10ms(interrupt time = 10ms) = 3seconds
    1286:	80 91 e8 00 	lds	r24, 0x00E8
    128a:	90 91 e9 00 	lds	r25, 0x00E9
    128e:	a0 91 ea 00 	lds	r26, 0x00EA
    1292:	b0 91 eb 00 	lds	r27, 0x00EB
    1296:	8c 32       	cpi	r24, 0x2C	; 44
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	92 07       	cpc	r25, r18
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	a2 07       	cpc	r26, r18
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	b2 07       	cpc	r27, r18
    12a4:	69 f4       	brne	.+26     	; 0x12c0 <Timer_Door_Open+0x68>
	{
		g_tick = 0;
    12a6:	10 92 e8 00 	sts	0x00E8, r1
    12aa:	10 92 e9 00 	sts	0x00E9, r1
    12ae:	10 92 ea 00 	sts	0x00EA, r1
    12b2:	10 92 eb 00 	sts	0x00EB, r1
		Timer1_deInit(); //Turn off timer after displaying on screen for 15seconds
    12b6:	0e 94 54 19 	call	0x32a8	; 0x32a8 <Timer1_deInit>
		Flag_Of_locking = 1; //To exit while loop of Door_unlocking() function
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 e6 00 	sts	0x00E6, r24
	}
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <Door_unlocking>:




void Door_unlocking(void)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	Timer_On(Timer_Door_locking_unlocking); //set Timer_Door_Unlocking() as call_back function
    12ce:	85 ef       	ldi	r24, 0xF5	; 245
    12d0:	98 e0       	ldi	r25, 0x08	; 8
    12d2:	0e 94 cc 08 	call	0x1198	; 0x1198 <Timer_On>
	LCD_clearScreen();
    12d6:	0e 94 dd 18 	call	0x31ba	; 0x31ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door Unlocking");
    12da:	25 eb       	ldi	r18, 0xB5	; 181
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	Flag_Of_locking = 0; //to not overwrite main options over "Door Unlocking" message on LCD
    12e8:	10 92 e6 00 	sts	0x00E6, r1
	while(UART_recieveByte() != MC2_READY){}
    12ec:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
    12f0:	8f 3f       	cpi	r24, 0xFF	; 255
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <Door_unlocking+0x26>
	UART_sendByte(MOTOR_UNLOCKING); //send to MC2 to unlock door by enter Motor_Unlock() function
    12f4:	84 e0       	ldi	r24, 0x04	; 4
    12f6:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
	while(Flag_Of_locking == 0){}
    12fa:	80 91 e6 00 	lds	r24, 0x00E6
    12fe:	88 23       	and	r24, r24
    1300:	e1 f3       	breq	.-8      	; 0x12fa <Door_unlocking+0x34>
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <Door_locking>:




void Door_locking(void)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	Timer_On(Timer_Door_locking_unlocking); //set Timer_Door_Unlocking() as call_back function
    1310:	85 ef       	ldi	r24, 0xF5	; 245
    1312:	98 e0       	ldi	r25, 0x08	; 8
    1314:	0e 94 cc 08 	call	0x1198	; 0x1198 <Timer_On>
	LCD_clearScreen();
    1318:	0e 94 dd 18 	call	0x31ba	; 0x31ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door locking");
    131c:	24 ec       	ldi	r18, 0xC4	; 196
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	Flag_Of_locking = 0; //to not overwrite main options over "Door Unlocking" message on LCD
    132a:	10 92 e6 00 	sts	0x00E6, r1
	while(UART_recieveByte() != MC2_READY){}
    132e:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
    1332:	8f 3f       	cpi	r24, 0xFF	; 255
    1334:	e1 f7       	brne	.-8      	; 0x132e <Door_locking+0x26>
	UART_sendByte(MOTOR_LOCKING); //send to MC2 to lock door by enter Motor_lock() function
    1336:	85 e0       	ldi	r24, 0x05	; 5
    1338:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
	while(Flag_Of_locking == 0){}
    133c:	80 91 e6 00 	lds	r24, 0x00E6
    1340:	88 23       	and	r24, r24
    1342:	e1 f3       	breq	.-8      	; 0x133c <Door_locking+0x34>
}
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <Door_Open>:




void Door_Open(void)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	Timer_On(Timer_Door_Open); //set Timer_Door_Unlocking() as call_back function
    1352:	8c e2       	ldi	r24, 0x2C	; 44
    1354:	99 e0       	ldi	r25, 0x09	; 9
    1356:	0e 94 cc 08 	call	0x1198	; 0x1198 <Timer_On>
	LCD_clearScreen();
    135a:	0e 94 dd 18 	call	0x31ba	; 0x31ba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door is Open");
    135e:	21 ed       	ldi	r18, 0xD1	; 209
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayStringRowColumn>
	Flag_Of_locking = 0; //to not overwrite main options over "Door Unlocking" message on LCD
    136c:	10 92 e6 00 	sts	0x00E6, r1
	while(UART_recieveByte() != MC2_READY){}
    1370:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
    1374:	8f 3f       	cpi	r24, 0xFF	; 255
    1376:	e1 f7       	brne	.-8      	; 0x1370 <Door_Open+0x26>
	UART_sendByte(MOTOR_STOP); //send to MC2 to open door by enter Motor_Stop() function
    1378:	86 e0       	ldi	r24, 0x06	; 6
    137a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
	while(Flag_Of_locking == 0){}
    137e:	80 91 e6 00 	lds	r24, 0x00E6
    1382:	88 23       	and	r24, r24
    1384:	e1 f3       	breq	.-8      	; 0x137e <Door_Open+0x34>
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_setupPinDirection+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <GPIO_setupPinDirection+0x8>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6a 83       	std	Y+2, r22	; 0x02
    139e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	88 30       	cpi	r24, 0x08	; 8
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <GPIO_setupPinDirection+0x1c>
    13a6:	d5 c0       	rjmp	.+426    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <GPIO_setupPinDirection+0x24>
    13ae:	d1 c0       	rjmp	.+418    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3d 83       	std	Y+5, r19	; 0x05
    13b8:	2c 83       	std	Y+4, r18	; 0x04
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <GPIO_setupPinDirection+0x3a>
    13c4:	43 c0       	rjmp	.+134    	; 0x144c <GPIO_setupPinDirection+0xc0>
    13c6:	2c 81       	ldd	r18, Y+4	; 0x04
    13c8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <GPIO_setupPinDirection+0x4e>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	71 f0       	breq	.+28     	; 0x13f4 <GPIO_setupPinDirection+0x68>
    13d8:	bc c0       	rjmp	.+376    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <GPIO_setupPinDirection+0x5a>
    13e4:	5f c0       	rjmp	.+190    	; 0x14a4 <GPIO_setupPinDirection+0x118>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <GPIO_setupPinDirection+0x66>
    13f0:	85 c0       	rjmp	.+266    	; 0x14fc <GPIO_setupPinDirection+0x170>
    13f2:	af c0       	rjmp	.+350    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13fa:	aa e3       	ldi	r26, 0x3A	; 58
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ea e3       	ldi	r30, 0x3A	; 58
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_setupPinDirection+0x8c>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_setupPinDirection+0x88>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	98 c0       	rjmp	.+304    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1422:	aa e3       	ldi	r26, 0x3A	; 58
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ea e3       	ldi	r30, 0x3A	; 58
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_setupPinDirection+0xb4>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_setupPinDirection+0xb0>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	83 c0       	rjmp	.+262    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	a1 f4       	brne	.+40     	; 0x147a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1452:	a7 e3       	ldi	r26, 0x37	; 55
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e7 e3       	ldi	r30, 0x37	; 55
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_setupPinDirection+0xe4>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_setupPinDirection+0xe0>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	6c c0       	rjmp	.+216    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    147a:	a7 e3       	ldi	r26, 0x37	; 55
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e3       	ldi	r30, 0x37	; 55
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_setupPinDirection+0x10c>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_setupPinDirection+0x108>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	57 c0       	rjmp	.+174    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	a1 f4       	brne	.+40     	; 0x14d2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14aa:	a4 e3       	ldi	r26, 0x34	; 52
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e4 e3       	ldi	r30, 0x34	; 52
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_setupPinDirection+0x13c>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_setupPinDirection+0x138>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	40 c0       	rjmp	.+128    	; 0x1552 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14d2:	a4 e3       	ldi	r26, 0x34	; 52
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e4 e3       	ldi	r30, 0x34	; 52
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_setupPinDirection+0x164>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_setupPinDirection+0x160>
    14f4:	80 95       	com	r24
    14f6:	84 23       	and	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	2b c0       	rjmp	.+86     	; 0x1552 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	a1 f4       	brne	.+40     	; 0x152a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1502:	a1 e3       	ldi	r26, 0x31	; 49
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e1 e3       	ldi	r30, 0x31	; 49
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <GPIO_setupPinDirection+0x194>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <GPIO_setupPinDirection+0x190>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    152a:	a1 e3       	ldi	r26, 0x31	; 49
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e1 e3       	ldi	r30, 0x31	; 49
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <GPIO_setupPinDirection+0x1bc>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <GPIO_setupPinDirection+0x1b8>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <GPIO_writePin+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <GPIO_writePin+0x8>
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	6a 83       	std	Y+2, r22	; 0x02
    1574:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	88 30       	cpi	r24, 0x08	; 8
    157a:	08 f0       	brcs	.+2      	; 0x157e <GPIO_writePin+0x1c>
    157c:	d5 c0       	rjmp	.+426    	; 0x1728 <GPIO_writePin+0x1c6>
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	08 f0       	brcs	.+2      	; 0x1586 <GPIO_writePin+0x24>
    1584:	d1 c0       	rjmp	.+418    	; 0x1728 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3d 83       	std	Y+5, r19	; 0x05
    158e:	2c 83       	std	Y+4, r18	; 0x04
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	9d 81       	ldd	r25, Y+5	; 0x05
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <GPIO_writePin+0x3a>
    159a:	43 c0       	rjmp	.+134    	; 0x1622 <GPIO_writePin+0xc0>
    159c:	2c 81       	ldd	r18, Y+4	; 0x04
    159e:	3d 81       	ldd	r19, Y+5	; 0x05
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <GPIO_writePin+0x4e>
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	9d 81       	ldd	r25, Y+5	; 0x05
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	71 f0       	breq	.+28     	; 0x15ca <GPIO_writePin+0x68>
    15ae:	bc c0       	rjmp	.+376    	; 0x1728 <GPIO_writePin+0x1c6>
    15b0:	2c 81       	ldd	r18, Y+4	; 0x04
    15b2:	3d 81       	ldd	r19, Y+5	; 0x05
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <GPIO_writePin+0x5a>
    15ba:	5f c0       	rjmp	.+190    	; 0x167a <GPIO_writePin+0x118>
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	91 05       	cpc	r25, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <GPIO_writePin+0x66>
    15c6:	85 c0       	rjmp	.+266    	; 0x16d2 <GPIO_writePin+0x170>
    15c8:	af c0       	rjmp	.+350    	; 0x1728 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	a1 f4       	brne	.+40     	; 0x15f8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15d0:	ab e3       	ldi	r26, 0x3B	; 59
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e3       	ldi	r30, 0x3B	; 59
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_writePin+0x8c>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_writePin+0x88>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	98 c0       	rjmp	.+304    	; 0x1728 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15f8:	ab e3       	ldi	r26, 0x3B	; 59
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	eb e3       	ldi	r30, 0x3B	; 59
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_writePin+0xb4>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_writePin+0xb0>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	83 c0       	rjmp	.+262    	; 0x1728 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	a1 f4       	brne	.+40     	; 0x1650 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1628:	a8 e3       	ldi	r26, 0x38	; 56
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e8 e3       	ldi	r30, 0x38	; 56
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <GPIO_writePin+0xe4>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <GPIO_writePin+0xe0>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	6c c0       	rjmp	.+216    	; 0x1728 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1650:	a8 e3       	ldi	r26, 0x38	; 56
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e8 e3       	ldi	r30, 0x38	; 56
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_writePin+0x10c>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_writePin+0x108>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	57 c0       	rjmp	.+174    	; 0x1728 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1680:	a5 e3       	ldi	r26, 0x35	; 53
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e5 e3       	ldi	r30, 0x35	; 53
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_writePin+0x13c>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_writePin+0x138>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	40 c0       	rjmp	.+128    	; 0x1728 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16a8:	a5 e3       	ldi	r26, 0x35	; 53
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e5 e3       	ldi	r30, 0x35	; 53
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_writePin+0x164>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_writePin+0x160>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	2b c0       	rjmp	.+86     	; 0x1728 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	a1 f4       	brne	.+40     	; 0x1700 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16d8:	a2 e3       	ldi	r26, 0x32	; 50
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e3       	ldi	r30, 0x32	; 50
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <GPIO_writePin+0x194>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <GPIO_writePin+0x190>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1700:	a2 e3       	ldi	r26, 0x32	; 50
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e2 e3       	ldi	r30, 0x32	; 50
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_writePin+0x1bc>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_writePin+0x1b8>
    1722:	80 95       	com	r24
    1724:	84 23       	and	r24, r20
    1726:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <GPIO_readPin+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <GPIO_readPin+0x8>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    174a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 30       	cpi	r24, 0x08	; 8
    1750:	08 f0       	brcs	.+2      	; 0x1754 <GPIO_readPin+0x1c>
    1752:	84 c0       	rjmp	.+264    	; 0x185c <GPIO_readPin+0x124>
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	84 30       	cpi	r24, 0x04	; 4
    1758:	08 f0       	brcs	.+2      	; 0x175c <GPIO_readPin+0x24>
    175a:	80 c0       	rjmp	.+256    	; 0x185c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	3d 83       	std	Y+5, r19	; 0x05
    1764:	2c 83       	std	Y+4, r18	; 0x04
    1766:	4c 81       	ldd	r20, Y+4	; 0x04
    1768:	5d 81       	ldd	r21, Y+5	; 0x05
    176a:	41 30       	cpi	r20, 0x01	; 1
    176c:	51 05       	cpc	r21, r1
    176e:	79 f1       	breq	.+94     	; 0x17ce <GPIO_readPin+0x96>
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	91 05       	cpc	r25, r1
    1778:	34 f4       	brge	.+12     	; 0x1786 <GPIO_readPin+0x4e>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	21 15       	cp	r18, r1
    1780:	31 05       	cpc	r19, r1
    1782:	69 f0       	breq	.+26     	; 0x179e <GPIO_readPin+0x66>
    1784:	6b c0       	rjmp	.+214    	; 0x185c <GPIO_readPin+0x124>
    1786:	4c 81       	ldd	r20, Y+4	; 0x04
    1788:	5d 81       	ldd	r21, Y+5	; 0x05
    178a:	42 30       	cpi	r20, 0x02	; 2
    178c:	51 05       	cpc	r21, r1
    178e:	b9 f1       	breq	.+110    	; 0x17fe <GPIO_readPin+0xc6>
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	91 05       	cpc	r25, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <GPIO_readPin+0x64>
    179a:	49 c0       	rjmp	.+146    	; 0x182e <GPIO_readPin+0xf6>
    179c:	5f c0       	rjmp	.+190    	; 0x185c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    179e:	e9 e3       	ldi	r30, 0x39	; 57
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a9 01       	movw	r20, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <GPIO_readPin+0x7e>
    17b2:	55 95       	asr	r21
    17b4:	47 95       	ror	r20
    17b6:	8a 95       	dec	r24
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <GPIO_readPin+0x7a>
    17ba:	ca 01       	movw	r24, r20
    17bc:	81 70       	andi	r24, 0x01	; 1
    17be:	90 70       	andi	r25, 0x00	; 0
    17c0:	88 23       	and	r24, r24
    17c2:	19 f0       	breq	.+6      	; 0x17ca <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	49 c0       	rjmp	.+146    	; 0x185c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17ca:	19 82       	std	Y+1, r1	; 0x01
    17cc:	47 c0       	rjmp	.+142    	; 0x185c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17ce:	e6 e3       	ldi	r30, 0x36	; 54
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a9 01       	movw	r20, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <GPIO_readPin+0xae>
    17e2:	55 95       	asr	r21
    17e4:	47 95       	ror	r20
    17e6:	8a 95       	dec	r24
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <GPIO_readPin+0xaa>
    17ea:	ca 01       	movw	r24, r20
    17ec:	81 70       	andi	r24, 0x01	; 1
    17ee:	90 70       	andi	r25, 0x00	; 0
    17f0:	88 23       	and	r24, r24
    17f2:	19 f0       	breq	.+6      	; 0x17fa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	31 c0       	rjmp	.+98     	; 0x185c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17fa:	19 82       	std	Y+1, r1	; 0x01
    17fc:	2f c0       	rjmp	.+94     	; 0x185c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17fe:	e3 e3       	ldi	r30, 0x33	; 51
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a9 01       	movw	r20, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <GPIO_readPin+0xde>
    1812:	55 95       	asr	r21
    1814:	47 95       	ror	r20
    1816:	8a 95       	dec	r24
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <GPIO_readPin+0xda>
    181a:	ca 01       	movw	r24, r20
    181c:	81 70       	andi	r24, 0x01	; 1
    181e:	90 70       	andi	r25, 0x00	; 0
    1820:	88 23       	and	r24, r24
    1822:	19 f0       	breq	.+6      	; 0x182a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	19 c0       	rjmp	.+50     	; 0x185c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    182a:	19 82       	std	Y+1, r1	; 0x01
    182c:	17 c0       	rjmp	.+46     	; 0x185c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    182e:	e0 e3       	ldi	r30, 0x30	; 48
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a9 01       	movw	r20, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_readPin+0x10e>
    1842:	55 95       	asr	r21
    1844:	47 95       	ror	r20
    1846:	8a 95       	dec	r24
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_readPin+0x10a>
    184a:	ca 01       	movw	r24, r20
    184c:	81 70       	andi	r24, 0x01	; 1
    184e:	90 70       	andi	r25, 0x00	; 0
    1850:	88 23       	and	r24, r24
    1852:	19 f0       	breq	.+6      	; 0x185a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	01 c0       	rjmp	.+2      	; 0x185c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    185a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <GPIO_setupPortDirection+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <GPIO_setupPortDirection+0x8>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	90 f5       	brcc	.+100    	; 0x18e8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3c 83       	std	Y+4, r19	; 0x04
    188c:	2b 83       	std	Y+3, r18	; 0x03
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 05       	cpc	r25, r1
    1896:	d1 f0       	breq	.+52     	; 0x18cc <GPIO_setupPortDirection+0x5e>
    1898:	2b 81       	ldd	r18, Y+3	; 0x03
    189a:	3c 81       	ldd	r19, Y+4	; 0x04
    189c:	22 30       	cpi	r18, 0x02	; 2
    189e:	31 05       	cpc	r19, r1
    18a0:	2c f4       	brge	.+10     	; 0x18ac <GPIO_setupPortDirection+0x3e>
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	61 f0       	breq	.+24     	; 0x18c2 <GPIO_setupPortDirection+0x54>
    18aa:	1e c0       	rjmp	.+60     	; 0x18e8 <GPIO_setupPortDirection+0x7a>
    18ac:	2b 81       	ldd	r18, Y+3	; 0x03
    18ae:	3c 81       	ldd	r19, Y+4	; 0x04
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	31 05       	cpc	r19, r1
    18b4:	81 f0       	breq	.+32     	; 0x18d6 <GPIO_setupPortDirection+0x68>
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	91 05       	cpc	r25, r1
    18be:	81 f0       	breq	.+32     	; 0x18e0 <GPIO_setupPortDirection+0x72>
    18c0:	13 c0       	rjmp	.+38     	; 0x18e8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18c2:	ea e3       	ldi	r30, 0x3A	; 58
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	80 83       	st	Z, r24
    18ca:	0e c0       	rjmp	.+28     	; 0x18e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18cc:	e7 e3       	ldi	r30, 0x37	; 55
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	80 83       	st	Z, r24
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18d6:	e4 e3       	ldi	r30, 0x34	; 52
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	80 83       	st	Z, r24
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18e0:	e1 e3       	ldi	r30, 0x31	; 49
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	80 83       	st	Z, r24
			break;
		}
	}
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <GPIO_writePort+0x6>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <GPIO_writePort+0x8>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	90 f5       	brcc	.+100    	; 0x1970 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	3c 83       	std	Y+4, r19	; 0x04
    1914:	2b 83       	std	Y+3, r18	; 0x03
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	91 05       	cpc	r25, r1
    191e:	d1 f0       	breq	.+52     	; 0x1954 <GPIO_writePort+0x5e>
    1920:	2b 81       	ldd	r18, Y+3	; 0x03
    1922:	3c 81       	ldd	r19, Y+4	; 0x04
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	2c f4       	brge	.+10     	; 0x1934 <GPIO_writePort+0x3e>
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	61 f0       	breq	.+24     	; 0x194a <GPIO_writePort+0x54>
    1932:	1e c0       	rjmp	.+60     	; 0x1970 <GPIO_writePort+0x7a>
    1934:	2b 81       	ldd	r18, Y+3	; 0x03
    1936:	3c 81       	ldd	r19, Y+4	; 0x04
    1938:	22 30       	cpi	r18, 0x02	; 2
    193a:	31 05       	cpc	r19, r1
    193c:	81 f0       	breq	.+32     	; 0x195e <GPIO_writePort+0x68>
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	83 30       	cpi	r24, 0x03	; 3
    1944:	91 05       	cpc	r25, r1
    1946:	81 f0       	breq	.+32     	; 0x1968 <GPIO_writePort+0x72>
    1948:	13 c0       	rjmp	.+38     	; 0x1970 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    194a:	eb e3       	ldi	r30, 0x3B	; 59
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	80 83       	st	Z, r24
    1952:	0e c0       	rjmp	.+28     	; 0x1970 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1954:	e8 e3       	ldi	r30, 0x38	; 56
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	80 83       	st	Z, r24
    195c:	09 c0       	rjmp	.+18     	; 0x1970 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    195e:	e5 e3       	ldi	r30, 0x35	; 53
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	80 83       	st	Z, r24
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1968:	e2 e3       	ldi	r30, 0x32	; 50
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <GPIO_readPort+0x6>
    1984:	00 d0       	rcall	.+0      	; 0x1986 <GPIO_readPort+0x8>
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    198c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	90 f5       	brcc	.+100    	; 0x19f8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3c 83       	std	Y+4, r19	; 0x04
    199c:	2b 83       	std	Y+3, r18	; 0x03
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	91 05       	cpc	r25, r1
    19a6:	d1 f0       	breq	.+52     	; 0x19dc <GPIO_readPort+0x5e>
    19a8:	2b 81       	ldd	r18, Y+3	; 0x03
    19aa:	3c 81       	ldd	r19, Y+4	; 0x04
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	2c f4       	brge	.+10     	; 0x19bc <GPIO_readPort+0x3e>
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	61 f0       	breq	.+24     	; 0x19d2 <GPIO_readPort+0x54>
    19ba:	1e c0       	rjmp	.+60     	; 0x19f8 <GPIO_readPort+0x7a>
    19bc:	2b 81       	ldd	r18, Y+3	; 0x03
    19be:	3c 81       	ldd	r19, Y+4	; 0x04
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	81 f0       	breq	.+32     	; 0x19e6 <GPIO_readPort+0x68>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	83 30       	cpi	r24, 0x03	; 3
    19cc:	91 05       	cpc	r25, r1
    19ce:	81 f0       	breq	.+32     	; 0x19f0 <GPIO_readPort+0x72>
    19d0:	13 c0       	rjmp	.+38     	; 0x19f8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19d2:	e9 e3       	ldi	r30, 0x39	; 57
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	0e c0       	rjmp	.+28     	; 0x19f8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    19dc:	e6 e3       	ldi	r30, 0x36	; 54
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	09 c0       	rjmp	.+18     	; 0x19f8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    19e6:	e3 e3       	ldi	r30, 0x33	; 51
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19f0:	e0 e3       	ldi	r30, 0x30	; 48
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	60 97       	sbiw	r28, 0x10	; 16
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	62 e0       	ldi	r22, 0x02	; 2
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	63 e0       	ldi	r22, 0x03	; 3
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	64 e0       	ldi	r22, 0x04	; 4
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	65 e0       	ldi	r22, 0x05	; 5
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	66 e0       	ldi	r22, 0x06	; 6
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	67 e0       	ldi	r22, 0x07	; 7
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a6c:	1f 86       	std	Y+15, r1	; 0x0f
    1a6e:	39 c0       	rjmp	.+114    	; 0x1ae2 <KEYPAD_getPressedKey+0xda>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a84:	18 8a       	std	Y+16, r1	; 0x10
    1a86:	22 c0       	rjmp	.+68     	; 0x1acc <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1a88:	88 89       	ldd	r24, Y+16	; 0x10
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	9c 5f       	subi	r25, 0xFC	; 252
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	69 2f       	mov	r22, r25
    1a92:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_readPin>
    1a96:	88 23       	and	r24, r24
    1a98:	b1 f4       	brne	.+44     	; 0x1ac6 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	88 89       	ldd	r24, Y+16	; 0x10
    1aac:	89 0f       	add	r24, r25
    1aae:	8f 5f       	subi	r24, 0xFF	; 255
    1ab0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
		_delay_ms(50);
	}
}
    1ab4:	60 96       	adiw	r28, 0x10	; 16
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ac6:	88 89       	ldd	r24, Y+16	; 0x10
    1ac8:	8f 5f       	subi	r24, 0xFF	; 255
    1aca:	88 8b       	std	Y+16, r24	; 0x10
    1acc:	88 89       	ldd	r24, Y+16	; 0x10
    1ace:	84 30       	cpi	r24, 0x04	; 4
    1ad0:	d8 f2       	brcs	.-74     	; 0x1a88 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ade:	8f 5f       	subi	r24, 0xFF	; 255
    1ae0:	8f 87       	std	Y+15, r24	; 0x0f
    1ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	20 f2       	brcs	.-120    	; 0x1a70 <KEYPAD_getPressedKey+0x68>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a8 e4       	ldi	r26, 0x48	; 72
    1aee:	b2 e4       	ldi	r27, 0x42	; 66
    1af0:	8b 87       	std	Y+11, r24	; 0x0b
    1af2:	9c 87       	std	Y+12, r25	; 0x0c
    1af4:	ad 87       	std	Y+13, r26	; 0x0d
    1af6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a ef       	ldi	r20, 0xFA	; 250
    1b06:	54 e4       	ldi	r21, 0x44	; 68
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8f 83       	std	Y+7, r24	; 0x07
    1b12:	98 87       	std	Y+8, r25	; 0x08
    1b14:	a9 87       	std	Y+9, r26	; 0x09
    1b16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <KEYPAD_getPressedKey+0x192>
    1b7c:	88 ec       	ldi	r24, 0xC8	; 200
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <KEYPAD_getPressedKey+0x180>
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <KEYPAD_getPressedKey+0x174>
    1ba2:	64 cf       	rjmp	.-312    	; 0x1a6c <KEYPAD_getPressedKey+0x64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <KEYPAD_getPressedKey+0x1bc>
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	4f cf       	rjmp	.-354    	; 0x1a6c <KEYPAD_getPressedKey+0x64>

00001bce <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1bdc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	3c 83       	std	Y+4, r19	; 0x04
    1be6:	2b 83       	std	Y+3, r18	; 0x03
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	88 30       	cpi	r24, 0x08	; 8
    1bee:	91 05       	cpc	r25, r1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1bf2:	70 c0       	rjmp	.+224    	; 0x1cd4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	29 30       	cpi	r18, 0x09	; 9
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	5c f5       	brge	.+86     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	84 30       	cpi	r24, 0x04	; 4
    1c04:	91 05       	cpc	r25, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c08:	59 c0       	rjmp	.+178    	; 0x1cbc <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0e:	25 30       	cpi	r18, 0x05	; 5
    1c10:	31 05       	cpc	r19, r1
    1c12:	9c f4       	brge	.+38     	; 0x1c3a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	82 30       	cpi	r24, 0x02	; 2
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c1e:	48 c0       	rjmp	.+144    	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c20:	2b 81       	ldd	r18, Y+3	; 0x03
    1c22:	3c 81       	ldd	r19, Y+4	; 0x04
    1c24:	23 30       	cpi	r18, 0x03	; 3
    1c26:	31 05       	cpc	r19, r1
    1c28:	0c f0       	brlt	.+2      	; 0x1c2c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c2a:	45 c0       	rjmp	.+138    	; 0x1cb6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c36:	39 c0       	rjmp	.+114    	; 0x1caa <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c38:	67 c0       	rjmp	.+206    	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3e:	26 30       	cpi	r18, 0x06	; 6
    1c40:	31 05       	cpc	r19, r1
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c44:	41 c0       	rjmp	.+130    	; 0x1cc8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	87 30       	cpi	r24, 0x07	; 7
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	0c f0       	brlt	.+2      	; 0x1c52 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c50:	3e c0       	rjmp	.+124    	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c52:	37 c0       	rjmp	.+110    	; 0x1cc2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c54:	2b 81       	ldd	r18, Y+3	; 0x03
    1c56:	3c 81       	ldd	r19, Y+4	; 0x04
    1c58:	2c 30       	cpi	r18, 0x0C	; 12
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c5e:	46 c0       	rjmp	.+140    	; 0x1cec <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	8d 30       	cpi	r24, 0x0D	; 13
    1c66:	91 05       	cpc	r25, r1
    1c68:	5c f4       	brge	.+22     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6e:	2a 30       	cpi	r18, 0x0A	; 10
    1c70:	31 05       	cpc	r19, r1
    1c72:	b1 f1       	breq	.+108    	; 0x1ce0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	8b 30       	cpi	r24, 0x0B	; 11
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	a4 f5       	brge	.+104    	; 0x1ce6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c7e:	2d c0       	rjmp	.+90     	; 0x1cda <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c80:	2b 81       	ldd	r18, Y+3	; 0x03
    1c82:	3c 81       	ldd	r19, Y+4	; 0x04
    1c84:	2e 30       	cpi	r18, 0x0E	; 14
    1c86:	31 05       	cpc	r19, r1
    1c88:	b9 f1       	breq	.+110    	; 0x1cf8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	8e 30       	cpi	r24, 0x0E	; 14
    1c90:	91 05       	cpc	r25, r1
    1c92:	7c f1       	brlt	.+94     	; 0x1cf2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c94:	2b 81       	ldd	r18, Y+3	; 0x03
    1c96:	3c 81       	ldd	r19, Y+4	; 0x04
    1c98:	2f 30       	cpi	r18, 0x0F	; 15
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	79 f1       	breq	.+94     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	80 31       	cpi	r24, 0x10	; 16
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	69 f1       	breq	.+90     	; 0x1d02 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ca8:	2f c0       	rjmp	.+94     	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1caa:	87 e0       	ldi	r24, 0x07	; 7
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	2e c0       	rjmp	.+92     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1cb0:	88 e0       	ldi	r24, 0x08	; 8
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	2b c0       	rjmp	.+86     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1cb6:	89 e0       	ldi	r24, 0x09	; 9
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	28 c0       	rjmp	.+80     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1cbc:	85 e2       	ldi	r24, 0x25	; 37
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	25 c0       	rjmp	.+74     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	22 c0       	rjmp	.+68     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1cc8:	85 e0       	ldi	r24, 0x05	; 5
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	1f c0       	rjmp	.+62     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1cce:	86 e0       	ldi	r24, 0x06	; 6
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	1c c0       	rjmp	.+56     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1cd4:	8a e2       	ldi	r24, 0x2A	; 42
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	19 c0       	rjmp	.+50     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	16 c0       	rjmp	.+44     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	13 c0       	rjmp	.+38     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	10 c0       	rjmp	.+32     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1cec:	8d e2       	ldi	r24, 0x2D	; 45
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	0d c0       	rjmp	.+26     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1cf2:	8d e0       	ldi	r24, 0x0D	; 13
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	0a c0       	rjmp	.+20     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1cf8:	19 82       	std	Y+1, r1	; 0x01
    1cfa:	08 c0       	rjmp	.+16     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1cfc:	8d e3       	ldi	r24, 0x3D	; 61
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d02:	8b e2       	ldi	r24, 0x2B	; 43
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	2e 97       	sbiw	r28, 0x0e	; 14
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 ea       	ldi	r26, 0xA0	; 160
    1d4a:	b1 e4       	ldi	r27, 0x41	; 65
    1d4c:	8b 87       	std	Y+11, r24	; 0x0b
    1d4e:	9c 87       	std	Y+12, r25	; 0x0c
    1d50:	ad 87       	std	Y+13, r26	; 0x0d
    1d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a ef       	ldi	r20, 0xFA	; 250
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8f 83       	std	Y+7, r24	; 0x07
    1d6e:	98 87       	std	Y+8, r25	; 0x08
    1d70:	a9 87       	std	Y+9, r26	; 0x09
    1d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d74:	6f 81       	ldd	r22, Y+7	; 0x07
    1d76:	78 85       	ldd	r23, Y+8	; 0x08
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <LCD_init+0x7a>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
    1d94:	3f c0       	rjmp	.+126    	; 0x1e14 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d96:	6f 81       	ldd	r22, Y+7	; 0x07
    1d98:	78 85       	ldd	r23, Y+8	; 0x08
    1d9a:	89 85       	ldd	r24, Y+9	; 0x09
    1d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <LCD_init+0xda>
    1dd8:	88 ec       	ldi	r24, 0xC8	; 200
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9c 83       	std	Y+4, r25	; 0x04
    1dde:	8b 83       	std	Y+3, r24	; 0x03
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_init+0xc8>
    1de8:	9c 83       	std	Y+4, r25	; 0x04
    1dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9e 83       	std	Y+6, r25	; 0x06
    1df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <LCD_init+0xbc>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	6f 81       	ldd	r22, Y+7	; 0x07
    1e02:	78 85       	ldd	r23, Y+8	; 0x08
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	9a 83       	std	Y+2, r25	; 0x02
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_init+0x104>
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	63 e0       	ldi	r22, 0x03	; 3
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	64 e0       	ldi	r22, 0x04	; 4
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	65 e0       	ldi	r22, 0x05	; 5
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	66 e0       	ldi	r22, 0x06	; 6
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1e50:	83 e3       	ldi	r24, 0x33	; 51
    1e52:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1e56:	82 e3       	ldi	r24, 0x32	; 50
    1e58:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1e5c:	88 e2       	ldi	r24, 0x28	; 40
    1e5e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e62:	8c e0       	ldi	r24, 0x0C	; 12
    1e64:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_sendCommand>
}
    1e6e:	2e 96       	adiw	r28, 0x0e	; 14
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	c3 56       	subi	r28, 0x63	; 99
    1e8e:	d0 40       	sbci	r29, 0x00	; 0
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ed 59       	subi	r30, 0x9D	; 157
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	61 e0       	ldi	r22, 0x01	; 1
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    1eac:	fe 01       	movw	r30, r28
    1eae:	e1 5a       	subi	r30, 0xA1	; 161
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e8       	ldi	r26, 0x80	; 128
    1eb8:	bf e3       	ldi	r27, 0x3F	; 63
    1eba:	80 83       	st	Z, r24
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	a2 83       	std	Z+2, r26	; 0x02
    1ec0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	8e 01       	movw	r16, r28
    1ec4:	05 5a       	subi	r16, 0xA5	; 165
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e1 5a       	subi	r30, 0xA1	; 161
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	80 83       	st	Z, r24
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	a2 83       	std	Z+2, r26	; 0x02
    1eee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e5 5a       	subi	r30, 0xA5	; 165
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	44 f4       	brge	.+16     	; 0x1f1e <LCD_sendCommand+0x9e>
		__ticks = 1;
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e7 5a       	subi	r30, 0xA7	; 167
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
    1f1c:	64 c0       	rjmp	.+200    	; 0x1fe6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e5 5a       	subi	r30, 0xA5	; 165
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	60 81       	ld	r22, Z
    1f26:	71 81       	ldd	r23, Z+1	; 0x01
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <LCD_sendCommand+0xbe>
    1f3c:	43 c0       	rjmp	.+134    	; 0x1fc4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e1 5a       	subi	r30, 0xA1	; 161
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	8e 01       	movw	r16, r28
    1f5e:	07 5a       	subi	r16, 0xA7	; 167
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	f8 01       	movw	r30, r16
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	80 83       	st	Z, r24
    1f74:	1f c0       	rjmp	.+62     	; 0x1fb4 <LCD_sendCommand+0x134>
    1f76:	fe 01       	movw	r30, r28
    1f78:	e9 5a       	subi	r30, 0xA9	; 169
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	88 ec       	ldi	r24, 0xC8	; 200
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
    1f84:	fe 01       	movw	r30, r28
    1f86:	e9 5a       	subi	r30, 0xA9	; 169
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 81       	ld	r24, Z
    1f8c:	91 81       	ldd	r25, Z+1	; 0x01
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <LCD_sendCommand+0x10e>
    1f92:	fe 01       	movw	r30, r28
    1f94:	e9 5a       	subi	r30, 0xA9	; 169
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9c:	de 01       	movw	r26, r28
    1f9e:	a7 5a       	subi	r26, 0xA7	; 167
    1fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e7 5a       	subi	r30, 0xA7	; 167
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	91 81       	ldd	r25, Z+1	; 0x01
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	11 96       	adiw	r26, 0x01	; 1
    1fb0:	9c 93       	st	X, r25
    1fb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e7 5a       	subi	r30, 0xA7	; 167
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	d1 f6       	brne	.-76     	; 0x1f76 <LCD_sendCommand+0xf6>
    1fc2:	27 c0       	rjmp	.+78     	; 0x2012 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	07 5a       	subi	r16, 0xA7	; 167
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e5 5a       	subi	r30, 0xA5	; 165
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	80 83       	st	Z, r24
    1fe6:	de 01       	movw	r26, r28
    1fe8:	ab 5a       	subi	r26, 0xAB	; 171
    1fea:	bf 4f       	sbci	r27, 0xFF	; 255
    1fec:	fe 01       	movw	r30, r28
    1fee:	e7 5a       	subi	r30, 0xA7	; 167
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	8d 93       	st	X+, r24
    1ff8:	9c 93       	st	X, r25
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	eb 5a       	subi	r30, 0xAB	; 171
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_sendCommand+0x184>
    2008:	fe 01       	movw	r30, r28
    200a:	eb 5a       	subi	r30, 0xAB	; 171
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	62 e0       	ldi	r22, 0x02	; 2
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    201c:	fe 01       	movw	r30, r28
    201e:	ef 5a       	subi	r30, 0xAF	; 175
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e8       	ldi	r26, 0x80	; 128
    2028:	bf e3       	ldi	r27, 0x3F	; 63
    202a:	80 83       	st	Z, r24
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	a2 83       	std	Z+2, r26	; 0x02
    2030:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	8e 01       	movw	r16, r28
    2034:	03 5b       	subi	r16, 0xB3	; 179
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	fe 01       	movw	r30, r28
    203a:	ef 5a       	subi	r30, 0xAF	; 175
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a ef       	ldi	r20, 0xFA	; 250
    204c:	54 e4       	ldi	r21, 0x44	; 68
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	f8 01       	movw	r30, r16
    2058:	80 83       	st	Z, r24
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	a2 83       	std	Z+2, r26	; 0x02
    205e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2060:	fe 01       	movw	r30, r28
    2062:	e3 5b       	subi	r30, 0xB3	; 179
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e8       	ldi	r20, 0x80	; 128
    2074:	5f e3       	ldi	r21, 0x3F	; 63
    2076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207a:	88 23       	and	r24, r24
    207c:	44 f4       	brge	.+16     	; 0x208e <LCD_sendCommand+0x20e>
		__ticks = 1;
    207e:	fe 01       	movw	r30, r28
    2080:	e5 5b       	subi	r30, 0xB5	; 181
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	80 83       	st	Z, r24
    208c:	64 c0       	rjmp	.+200    	; 0x2156 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    208e:	fe 01       	movw	r30, r28
    2090:	e3 5b       	subi	r30, 0xB3	; 179
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	0c f0       	brlt	.+2      	; 0x20ae <LCD_sendCommand+0x22e>
    20ac:	43 c0       	rjmp	.+134    	; 0x2134 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	fe 01       	movw	r30, r28
    20b0:	ef 5a       	subi	r30, 0xAF	; 175
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8e 01       	movw	r16, r28
    20ce:	05 5b       	subi	r16, 0xB5	; 181
    20d0:	1f 4f       	sbci	r17, 0xFF	; 255
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	f8 01       	movw	r30, r16
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
    20e4:	1f c0       	rjmp	.+62     	; 0x2124 <LCD_sendCommand+0x2a4>
    20e6:	fe 01       	movw	r30, r28
    20e8:	e7 5b       	subi	r30, 0xB7	; 183
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	fe 01       	movw	r30, r28
    20f6:	e7 5b       	subi	r30, 0xB7	; 183
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_sendCommand+0x27e>
    2102:	fe 01       	movw	r30, r28
    2104:	e7 5b       	subi	r30, 0xB7	; 183
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	91 83       	std	Z+1, r25	; 0x01
    210a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210c:	de 01       	movw	r26, r28
    210e:	a5 5b       	subi	r26, 0xB5	; 181
    2110:	bf 4f       	sbci	r27, 0xFF	; 255
    2112:	fe 01       	movw	r30, r28
    2114:	e5 5b       	subi	r30, 0xB5	; 181
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	11 96       	adiw	r26, 0x01	; 1
    2120:	9c 93       	st	X, r25
    2122:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	fe 01       	movw	r30, r28
    2126:	e5 5b       	subi	r30, 0xB5	; 181
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	d1 f6       	brne	.-76     	; 0x20e6 <LCD_sendCommand+0x266>
    2132:	27 c0       	rjmp	.+78     	; 0x2182 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	8e 01       	movw	r16, r28
    2136:	05 5b       	subi	r16, 0xB5	; 181
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	fe 01       	movw	r30, r28
    213c:	e3 5b       	subi	r30, 0xB3	; 179
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	93 81       	ldd	r25, Z+3	; 0x03
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	f8 01       	movw	r30, r16
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 83       	st	Z, r24
    2156:	de 01       	movw	r26, r28
    2158:	a9 5b       	subi	r26, 0xB9	; 185
    215a:	bf 4f       	sbci	r27, 0xFF	; 255
    215c:	fe 01       	movw	r30, r28
    215e:	e5 5b       	subi	r30, 0xB5	; 181
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	8d 93       	st	X+, r24
    2168:	9c 93       	st	X, r25
    216a:	fe 01       	movw	r30, r28
    216c:	e9 5b       	subi	r30, 0xB9	; 185
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_sendCommand+0x2f4>
    2178:	fe 01       	movw	r30, r28
    217a:	e9 5b       	subi	r30, 0xB9	; 185
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2182:	fe 01       	movw	r30, r28
    2184:	ed 59       	subi	r30, 0x9D	; 157
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	80 71       	andi	r24, 0x10	; 16
    2190:	90 70       	andi	r25, 0x00	; 0
    2192:	95 95       	asr	r25
    2194:	87 95       	ror	r24
    2196:	95 95       	asr	r25
    2198:	87 95       	ror	r24
    219a:	95 95       	asr	r25
    219c:	87 95       	ror	r24
    219e:	95 95       	asr	r25
    21a0:	87 95       	ror	r24
    21a2:	98 2f       	mov	r25, r24
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	63 e0       	ldi	r22, 0x03	; 3
    21a8:	49 2f       	mov	r20, r25
    21aa:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    21ae:	fe 01       	movw	r30, r28
    21b0:	ed 59       	subi	r30, 0x9D	; 157
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	80 72       	andi	r24, 0x20	; 32
    21bc:	90 70       	andi	r25, 0x00	; 0
    21be:	95 95       	asr	r25
    21c0:	87 95       	ror	r24
    21c2:	95 95       	asr	r25
    21c4:	87 95       	ror	r24
    21c6:	95 95       	asr	r25
    21c8:	87 95       	ror	r24
    21ca:	95 95       	asr	r25
    21cc:	87 95       	ror	r24
    21ce:	95 95       	asr	r25
    21d0:	87 95       	ror	r24
    21d2:	98 2f       	mov	r25, r24
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	64 e0       	ldi	r22, 0x04	; 4
    21d8:	49 2f       	mov	r20, r25
    21da:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    21de:	fe 01       	movw	r30, r28
    21e0:	ed 59       	subi	r30, 0x9D	; 157
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	80 81       	ld	r24, Z
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	80 74       	andi	r24, 0x40	; 64
    21ec:	90 70       	andi	r25, 0x00	; 0
    21ee:	08 2e       	mov	r0, r24
    21f0:	89 2f       	mov	r24, r25
    21f2:	00 0c       	add	r0, r0
    21f4:	88 1f       	adc	r24, r24
    21f6:	99 0b       	sbc	r25, r25
    21f8:	00 0c       	add	r0, r0
    21fa:	88 1f       	adc	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	98 2f       	mov	r25, r24
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	65 e0       	ldi	r22, 0x05	; 5
    2204:	49 2f       	mov	r20, r25
    2206:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    220a:	fe 01       	movw	r30, r28
    220c:	ed 59       	subi	r30, 0x9D	; 157
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	98 2f       	mov	r25, r24
    2214:	99 1f       	adc	r25, r25
    2216:	99 27       	eor	r25, r25
    2218:	99 1f       	adc	r25, r25
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	66 e0       	ldi	r22, 0x06	; 6
    221e:	49 2f       	mov	r20, r25
    2220:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2224:	fe 01       	movw	r30, r28
    2226:	ed 5b       	subi	r30, 0xBD	; 189
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e8       	ldi	r26, 0x80	; 128
    2230:	bf e3       	ldi	r27, 0x3F	; 63
    2232:	80 83       	st	Z, r24
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	a2 83       	std	Z+2, r26	; 0x02
    2238:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223a:	8e 01       	movw	r16, r28
    223c:	01 5c       	subi	r16, 0xC1	; 193
    223e:	1f 4f       	sbci	r17, 0xFF	; 255
    2240:	fe 01       	movw	r30, r28
    2242:	ed 5b       	subi	r30, 0xBD	; 189
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a ef       	ldi	r20, 0xFA	; 250
    2254:	54 e4       	ldi	r21, 0x44	; 68
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	f8 01       	movw	r30, r16
    2260:	80 83       	st	Z, r24
    2262:	91 83       	std	Z+1, r25	; 0x01
    2264:	a2 83       	std	Z+2, r26	; 0x02
    2266:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2268:	fe 01       	movw	r30, r28
    226a:	ff 96       	adiw	r30, 0x3f	; 63
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
    2270:	82 81       	ldd	r24, Z+2	; 0x02
    2272:	93 81       	ldd	r25, Z+3	; 0x03
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	5f e3       	ldi	r21, 0x3F	; 63
    227c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2280:	88 23       	and	r24, r24
    2282:	2c f4       	brge	.+10     	; 0x228e <LCD_sendCommand+0x40e>
		__ticks = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9e af       	std	Y+62, r25	; 0x3e
    228a:	8d af       	std	Y+61, r24	; 0x3d
    228c:	46 c0       	rjmp	.+140    	; 0x231a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    228e:	fe 01       	movw	r30, r28
    2290:	ff 96       	adiw	r30, 0x3f	; 63
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	3f ef       	ldi	r19, 0xFF	; 255
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	57 e4       	ldi	r21, 0x47	; 71
    22a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	64 f5       	brge	.+88     	; 0x2302 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22aa:	fe 01       	movw	r30, r28
    22ac:	ed 5b       	subi	r30, 0xBD	; 189
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e2       	ldi	r20, 0x20	; 32
    22be:	51 e4       	ldi	r21, 0x41	; 65
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9e af       	std	Y+62, r25	; 0x3e
    22d6:	8d af       	std	Y+61, r24	; 0x3d
    22d8:	0f c0       	rjmp	.+30     	; 0x22f8 <LCD_sendCommand+0x478>
    22da:	88 ec       	ldi	r24, 0xC8	; 200
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9c af       	std	Y+60, r25	; 0x3c
    22e0:	8b af       	std	Y+59, r24	; 0x3b
    22e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    22e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <LCD_sendCommand+0x466>
    22ea:	9c af       	std	Y+60, r25	; 0x3c
    22ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    22f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	9e af       	std	Y+62, r25	; 0x3e
    22f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	69 f7       	brne	.-38     	; 0x22da <LCD_sendCommand+0x45a>
    2300:	16 c0       	rjmp	.+44     	; 0x232e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2302:	fe 01       	movw	r30, r28
    2304:	ff 96       	adiw	r30, 0x3f	; 63
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e af       	std	Y+62, r25	; 0x3e
    2318:	8d af       	std	Y+61, r24	; 0x3d
    231a:	8d ad       	ldd	r24, Y+61	; 0x3d
    231c:	9e ad       	ldd	r25, Y+62	; 0x3e
    231e:	9a af       	std	Y+58, r25	; 0x3a
    2320:	89 af       	std	Y+57, r24	; 0x39
    2322:	89 ad       	ldd	r24, Y+57	; 0x39
    2324:	9a ad       	ldd	r25, Y+58	; 0x3a
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_sendCommand+0x4a6>
    232a:	9a af       	std	Y+58, r25	; 0x3a
    232c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	62 e0       	ldi	r22, 0x02	; 2
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e8       	ldi	r26, 0x80	; 128
    233e:	bf e3       	ldi	r27, 0x3F	; 63
    2340:	8d ab       	std	Y+53, r24	; 0x35
    2342:	9e ab       	std	Y+54, r25	; 0x36
    2344:	af ab       	std	Y+55, r26	; 0x37
    2346:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6d a9       	ldd	r22, Y+53	; 0x35
    234a:	7e a9       	ldd	r23, Y+54	; 0x36
    234c:	8f a9       	ldd	r24, Y+55	; 0x37
    234e:	98 ad       	ldd	r25, Y+56	; 0x38
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a ef       	ldi	r20, 0xFA	; 250
    2356:	54 e4       	ldi	r21, 0x44	; 68
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	89 ab       	std	Y+49, r24	; 0x31
    2362:	9a ab       	std	Y+50, r25	; 0x32
    2364:	ab ab       	std	Y+51, r26	; 0x33
    2366:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2368:	69 a9       	ldd	r22, Y+49	; 0x31
    236a:	7a a9       	ldd	r23, Y+50	; 0x32
    236c:	8b a9       	ldd	r24, Y+51	; 0x33
    236e:	9c a9       	ldd	r25, Y+52	; 0x34
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <LCD_sendCommand+0x50a>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	98 ab       	std	Y+48, r25	; 0x30
    2386:	8f a7       	std	Y+47, r24	; 0x2f
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    238a:	69 a9       	ldd	r22, Y+49	; 0x31
    238c:	7a a9       	ldd	r23, Y+50	; 0x32
    238e:	8b a9       	ldd	r24, Y+51	; 0x33
    2390:	9c a9       	ldd	r25, Y+52	; 0x34
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6d a9       	ldd	r22, Y+53	; 0x35
    23a4:	7e a9       	ldd	r23, Y+54	; 0x36
    23a6:	8f a9       	ldd	r24, Y+55	; 0x37
    23a8:	98 ad       	ldd	r25, Y+56	; 0x38
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	98 ab       	std	Y+48, r25	; 0x30
    23c8:	8f a7       	std	Y+47, r24	; 0x2f
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <LCD_sendCommand+0x56a>
    23cc:	88 ec       	ldi	r24, 0xC8	; 200
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9e a7       	std	Y+46, r25	; 0x2e
    23d2:	8d a7       	std	Y+45, r24	; 0x2d
    23d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    23d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_sendCommand+0x558>
    23dc:	9e a7       	std	Y+46, r25	; 0x2e
    23de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e2:	98 a9       	ldd	r25, Y+48	; 0x30
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	98 ab       	std	Y+48, r25	; 0x30
    23e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ec:	98 a9       	ldd	r25, Y+48	; 0x30
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <LCD_sendCommand+0x54c>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	69 a9       	ldd	r22, Y+49	; 0x31
    23f6:	7a a9       	ldd	r23, Y+50	; 0x32
    23f8:	8b a9       	ldd	r24, Y+51	; 0x33
    23fa:	9c a9       	ldd	r25, Y+52	; 0x34
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	98 ab       	std	Y+48, r25	; 0x30
    2406:	8f a7       	std	Y+47, r24	; 0x2f
    2408:	8f a5       	ldd	r24, Y+47	; 0x2f
    240a:	98 a9       	ldd	r25, Y+48	; 0x30
    240c:	9c a7       	std	Y+44, r25	; 0x2c
    240e:	8b a7       	std	Y+43, r24	; 0x2b
    2410:	8b a5       	ldd	r24, Y+43	; 0x2b
    2412:	9c a5       	ldd	r25, Y+44	; 0x2c
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_sendCommand+0x594>
    2418:	9c a7       	std	Y+44, r25	; 0x2c
    241a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	62 e0       	ldi	r22, 0x02	; 2
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	8f a3       	std	Y+39, r24	; 0x27
    2430:	98 a7       	std	Y+40, r25	; 0x28
    2432:	a9 a7       	std	Y+41, r26	; 0x29
    2434:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6f a1       	ldd	r22, Y+39	; 0x27
    2438:	78 a5       	ldd	r23, Y+40	; 0x28
    243a:	89 a5       	ldd	r24, Y+41	; 0x29
    243c:	9a a5       	ldd	r25, Y+42	; 0x2a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a ef       	ldi	r20, 0xFA	; 250
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8b a3       	std	Y+35, r24	; 0x23
    2450:	9c a3       	std	Y+36, r25	; 0x24
    2452:	ad a3       	std	Y+37, r26	; 0x25
    2454:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2456:	6b a1       	ldd	r22, Y+35	; 0x23
    2458:	7c a1       	ldd	r23, Y+36	; 0x24
    245a:	8d a1       	ldd	r24, Y+37	; 0x25
    245c:	9e a1       	ldd	r25, Y+38	; 0x26
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9a a3       	std	Y+34, r25	; 0x22
    2474:	89 a3       	std	Y+33, r24	; 0x21
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2478:	6b a1       	ldd	r22, Y+35	; 0x23
    247a:	7c a1       	ldd	r23, Y+36	; 0x24
    247c:	8d a1       	ldd	r24, Y+37	; 0x25
    247e:	9e a1       	ldd	r25, Y+38	; 0x26
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6f a1       	ldd	r22, Y+39	; 0x27
    2492:	78 a5       	ldd	r23, Y+40	; 0x28
    2494:	89 a5       	ldd	r24, Y+41	; 0x29
    2496:	9a a5       	ldd	r25, Y+42	; 0x2a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9a a3       	std	Y+34, r25	; 0x22
    24b6:	89 a3       	std	Y+33, r24	; 0x21
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <LCD_sendCommand+0x658>
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	98 a3       	std	Y+32, r25	; 0x20
    24c0:	8f 8f       	std	Y+31, r24	; 0x1f
    24c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c4:	98 a1       	ldd	r25, Y+32	; 0x20
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_sendCommand+0x646>
    24ca:	98 a3       	std	Y+32, r25	; 0x20
    24cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	89 a1       	ldd	r24, Y+33	; 0x21
    24d0:	9a a1       	ldd	r25, Y+34	; 0x22
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	9a a3       	std	Y+34, r25	; 0x22
    24d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	89 a1       	ldd	r24, Y+33	; 0x21
    24da:	9a a1       	ldd	r25, Y+34	; 0x22
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <LCD_sendCommand+0x63a>
    24e0:	14 c0       	rjmp	.+40     	; 0x250a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	6b a1       	ldd	r22, Y+35	; 0x23
    24e4:	7c a1       	ldd	r23, Y+36	; 0x24
    24e6:	8d a1       	ldd	r24, Y+37	; 0x25
    24e8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	89 a1       	ldd	r24, Y+33	; 0x21
    24f8:	9a a1       	ldd	r25, Y+34	; 0x22
    24fa:	9e 8f       	std	Y+30, r25	; 0x1e
    24fc:	8d 8f       	std	Y+29, r24	; 0x1d
    24fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2500:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_sendCommand+0x682>
    2506:	9e 8f       	std	Y+30, r25	; 0x1e
    2508:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    250a:	fe 01       	movw	r30, r28
    250c:	ed 59       	subi	r30, 0x9D	; 157
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	98 2f       	mov	r25, r24
    2514:	91 70       	andi	r25, 0x01	; 1
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	63 e0       	ldi	r22, 0x03	; 3
    251a:	49 2f       	mov	r20, r25
    251c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2520:	fe 01       	movw	r30, r28
    2522:	ed 59       	subi	r30, 0x9D	; 157
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	88 2f       	mov	r24, r24
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	82 70       	andi	r24, 0x02	; 2
    252e:	90 70       	andi	r25, 0x00	; 0
    2530:	95 95       	asr	r25
    2532:	87 95       	ror	r24
    2534:	98 2f       	mov	r25, r24
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	64 e0       	ldi	r22, 0x04	; 4
    253a:	49 2f       	mov	r20, r25
    253c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2540:	fe 01       	movw	r30, r28
    2542:	ed 59       	subi	r30, 0x9D	; 157
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	84 70       	andi	r24, 0x04	; 4
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	95 95       	asr	r25
    2552:	87 95       	ror	r24
    2554:	95 95       	asr	r25
    2556:	87 95       	ror	r24
    2558:	98 2f       	mov	r25, r24
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	65 e0       	ldi	r22, 0x05	; 5
    255e:	49 2f       	mov	r20, r25
    2560:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2564:	fe 01       	movw	r30, r28
    2566:	ed 59       	subi	r30, 0x9D	; 157
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	88 70       	andi	r24, 0x08	; 8
    2572:	90 70       	andi	r25, 0x00	; 0
    2574:	95 95       	asr	r25
    2576:	87 95       	ror	r24
    2578:	95 95       	asr	r25
    257a:	87 95       	ror	r24
    257c:	95 95       	asr	r25
    257e:	87 95       	ror	r24
    2580:	98 2f       	mov	r25, r24
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	66 e0       	ldi	r22, 0x06	; 6
    2586:	49 2f       	mov	r20, r25
    2588:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a0 e8       	ldi	r26, 0x80	; 128
    2592:	bf e3       	ldi	r27, 0x3F	; 63
    2594:	89 8f       	std	Y+25, r24	; 0x19
    2596:	9a 8f       	std	Y+26, r25	; 0x1a
    2598:	ab 8f       	std	Y+27, r26	; 0x1b
    259a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	69 8d       	ldd	r22, Y+25	; 0x19
    259e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	8d 8b       	std	Y+21, r24	; 0x15
    25b6:	9e 8b       	std	Y+22, r25	; 0x16
    25b8:	af 8b       	std	Y+23, r26	; 0x17
    25ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25bc:	6d 89       	ldd	r22, Y+21	; 0x15
    25be:	7e 89       	ldd	r23, Y+22	; 0x16
    25c0:	8f 89       	ldd	r24, Y+23	; 0x17
    25c2:	98 8d       	ldd	r25, Y+24	; 0x18
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <LCD_sendCommand+0x75e>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9c 8b       	std	Y+20, r25	; 0x14
    25da:	8b 8b       	std	Y+19, r24	; 0x13
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    25de:	6d 89       	ldd	r22, Y+21	; 0x15
    25e0:	7e 89       	ldd	r23, Y+22	; 0x16
    25e2:	8f 89       	ldd	r24, Y+23	; 0x17
    25e4:	98 8d       	ldd	r25, Y+24	; 0x18
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	69 8d       	ldd	r22, Y+25	; 0x19
    25f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9c 8b       	std	Y+20, r25	; 0x14
    261c:	8b 8b       	std	Y+19, r24	; 0x13
    261e:	0f c0       	rjmp	.+30     	; 0x263e <LCD_sendCommand+0x7be>
    2620:	88 ec       	ldi	r24, 0xC8	; 200
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9a 8b       	std	Y+18, r25	; 0x12
    2626:	89 8b       	std	Y+17, r24	; 0x11
    2628:	89 89       	ldd	r24, Y+17	; 0x11
    262a:	9a 89       	ldd	r25, Y+18	; 0x12
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_sendCommand+0x7ac>
    2630:	9a 8b       	std	Y+18, r25	; 0x12
    2632:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	9c 8b       	std	Y+20, r25	; 0x14
    263c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	8b 89       	ldd	r24, Y+19	; 0x13
    2640:	9c 89       	ldd	r25, Y+20	; 0x14
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <LCD_sendCommand+0x7a0>
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	6d 89       	ldd	r22, Y+21	; 0x15
    264a:	7e 89       	ldd	r23, Y+22	; 0x16
    264c:	8f 89       	ldd	r24, Y+23	; 0x17
    264e:	98 8d       	ldd	r25, Y+24	; 0x18
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9c 8b       	std	Y+20, r25	; 0x14
    265a:	8b 8b       	std	Y+19, r24	; 0x13
    265c:	8b 89       	ldd	r24, Y+19	; 0x13
    265e:	9c 89       	ldd	r25, Y+20	; 0x14
    2660:	98 8b       	std	Y+16, r25	; 0x10
    2662:	8f 87       	std	Y+15, r24	; 0x0f
    2664:	8f 85       	ldd	r24, Y+15	; 0x0f
    2666:	98 89       	ldd	r25, Y+16	; 0x10
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_sendCommand+0x7e8>
    266c:	98 8b       	std	Y+16, r25	; 0x10
    266e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	62 e0       	ldi	r22, 0x02	; 2
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a0 e8       	ldi	r26, 0x80	; 128
    2680:	bf e3       	ldi	r27, 0x3F	; 63
    2682:	8b 87       	std	Y+11, r24	; 0x0b
    2684:	9c 87       	std	Y+12, r25	; 0x0c
    2686:	ad 87       	std	Y+13, r26	; 0x0d
    2688:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	6b 85       	ldd	r22, Y+11	; 0x0b
    268c:	7c 85       	ldd	r23, Y+12	; 0x0c
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	9e 85       	ldd	r25, Y+14	; 0x0e
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	4a ef       	ldi	r20, 0xFA	; 250
    2698:	54 e4       	ldi	r21, 0x44	; 68
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	8f 83       	std	Y+7, r24	; 0x07
    26a4:	98 87       	std	Y+8, r25	; 0x08
    26a6:	a9 87       	std	Y+9, r26	; 0x09
    26a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26aa:	6f 81       	ldd	r22, Y+7	; 0x07
    26ac:	78 85       	ldd	r23, Y+8	; 0x08
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26be:	88 23       	and	r24, r24
    26c0:	2c f4       	brge	.+10     	; 0x26cc <LCD_sendCommand+0x84c>
		__ticks = 1;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	3f c0       	rjmp	.+126    	; 0x274a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    26cc:	6f 81       	ldd	r22, Y+7	; 0x07
    26ce:	78 85       	ldd	r23, Y+8	; 0x08
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	4f e7       	ldi	r20, 0x7F	; 127
    26da:	57 e4       	ldi	r21, 0x47	; 71
    26dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e0:	18 16       	cp	r1, r24
    26e2:	4c f5       	brge	.+82     	; 0x2736 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
    270c:	0f c0       	rjmp	.+30     	; 0x272c <LCD_sendCommand+0x8ac>
    270e:	88 ec       	ldi	r24, 0xC8	; 200
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_sendCommand+0x89a>
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
    272e:	9e 81       	ldd	r25, Y+6	; 0x06
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	69 f7       	brne	.-38     	; 0x270e <LCD_sendCommand+0x88e>
    2734:	14 c0       	rjmp	.+40     	; 0x275e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	8d 83       	std	Y+5, r24	; 0x05
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_sendCommand+0x8d6>
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    275e:	cd 59       	subi	r28, 0x9D	; 157
    2760:	df 4f       	sbci	r29, 0xFF	; 255
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	08 95       	ret

00002776 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	c3 56       	subi	r28, 0x63	; 99
    2784:	d0 40       	sbci	r29, 0x00	; 0
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	fe 01       	movw	r30, r28
    2792:	ed 59       	subi	r30, 0x9D	; 157
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	61 e0       	ldi	r22, 0x01	; 1
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    27a2:	fe 01       	movw	r30, r28
    27a4:	e1 5a       	subi	r30, 0xA1	; 161
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	a0 e8       	ldi	r26, 0x80	; 128
    27ae:	bf e3       	ldi	r27, 0x3F	; 63
    27b0:	80 83       	st	Z, r24
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	a2 83       	std	Z+2, r26	; 0x02
    27b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	8e 01       	movw	r16, r28
    27ba:	05 5a       	subi	r16, 0xA5	; 165
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
    27be:	fe 01       	movw	r30, r28
    27c0:	e1 5a       	subi	r30, 0xA1	; 161
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4a ef       	ldi	r20, 0xFA	; 250
    27d2:	54 e4       	ldi	r21, 0x44	; 68
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	80 83       	st	Z, r24
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	a2 83       	std	Z+2, r26	; 0x02
    27e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e6:	fe 01       	movw	r30, r28
    27e8:	e5 5a       	subi	r30, 0xA5	; 165
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	44 f4       	brge	.+16     	; 0x2814 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2804:	fe 01       	movw	r30, r28
    2806:	e7 5a       	subi	r30, 0xA7	; 167
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
    2812:	64 c0       	rjmp	.+200    	; 0x28dc <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2814:	fe 01       	movw	r30, r28
    2816:	e5 5a       	subi	r30, 0xA5	; 165
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	60 81       	ld	r22, Z
    281c:	71 81       	ldd	r23, Z+1	; 0x01
    281e:	82 81       	ldd	r24, Z+2	; 0x02
    2820:	93 81       	ldd	r25, Z+3	; 0x03
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	0c f0       	brlt	.+2      	; 0x2834 <LCD_displayCharacter+0xbe>
    2832:	43 c0       	rjmp	.+134    	; 0x28ba <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2834:	fe 01       	movw	r30, r28
    2836:	e1 5a       	subi	r30, 0xA1	; 161
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e2       	ldi	r20, 0x20	; 32
    2848:	51 e4       	ldi	r21, 0x41	; 65
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	8e 01       	movw	r16, r28
    2854:	07 5a       	subi	r16, 0xA7	; 167
    2856:	1f 4f       	sbci	r17, 0xFF	; 255
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	f8 01       	movw	r30, r16
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
    286a:	1f c0       	rjmp	.+62     	; 0x28aa <LCD_displayCharacter+0x134>
    286c:	fe 01       	movw	r30, r28
    286e:	e9 5a       	subi	r30, 0xA9	; 169
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	88 ec       	ldi	r24, 0xC8	; 200
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	80 83       	st	Z, r24
    287a:	fe 01       	movw	r30, r28
    287c:	e9 5a       	subi	r30, 0xA9	; 169
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <LCD_displayCharacter+0x10e>
    2888:	fe 01       	movw	r30, r28
    288a:	e9 5a       	subi	r30, 0xA9	; 169
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2892:	de 01       	movw	r26, r28
    2894:	a7 5a       	subi	r26, 0xA7	; 167
    2896:	bf 4f       	sbci	r27, 0xFF	; 255
    2898:	fe 01       	movw	r30, r28
    289a:	e7 5a       	subi	r30, 0xA7	; 167
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	11 96       	adiw	r26, 0x01	; 1
    28a6:	9c 93       	st	X, r25
    28a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	fe 01       	movw	r30, r28
    28ac:	e7 5a       	subi	r30, 0xA7	; 167
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	80 81       	ld	r24, Z
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	d1 f6       	brne	.-76     	; 0x286c <LCD_displayCharacter+0xf6>
    28b8:	27 c0       	rjmp	.+78     	; 0x2908 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ba:	8e 01       	movw	r16, r28
    28bc:	07 5a       	subi	r16, 0xA7	; 167
    28be:	1f 4f       	sbci	r17, 0xFF	; 255
    28c0:	fe 01       	movw	r30, r28
    28c2:	e5 5a       	subi	r30, 0xA5	; 165
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	60 81       	ld	r22, Z
    28c8:	71 81       	ldd	r23, Z+1	; 0x01
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	f8 01       	movw	r30, r16
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	de 01       	movw	r26, r28
    28de:	ab 5a       	subi	r26, 0xAB	; 171
    28e0:	bf 4f       	sbci	r27, 0xFF	; 255
    28e2:	fe 01       	movw	r30, r28
    28e4:	e7 5a       	subi	r30, 0xA7	; 167
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	8d 93       	st	X+, r24
    28ee:	9c 93       	st	X, r25
    28f0:	fe 01       	movw	r30, r28
    28f2:	eb 5a       	subi	r30, 0xAB	; 171
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 81       	ld	r24, Z
    28f8:	91 81       	ldd	r25, Z+1	; 0x01
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <LCD_displayCharacter+0x184>
    28fe:	fe 01       	movw	r30, r28
    2900:	eb 5a       	subi	r30, 0xAB	; 171
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	62 e0       	ldi	r22, 0x02	; 2
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2912:	fe 01       	movw	r30, r28
    2914:	ef 5a       	subi	r30, 0xAF	; 175
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e8       	ldi	r26, 0x80	; 128
    291e:	bf e3       	ldi	r27, 0x3F	; 63
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	8e 01       	movw	r16, r28
    292a:	03 5b       	subi	r16, 0xB3	; 179
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	ef 5a       	subi	r30, 0xAF	; 175
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a ef       	ldi	r20, 0xFA	; 250
    2942:	54 e4       	ldi	r21, 0x44	; 68
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	f8 01       	movw	r30, r16
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2956:	fe 01       	movw	r30, r28
    2958:	e3 5b       	subi	r30, 0xB3	; 179
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	44 f4       	brge	.+16     	; 0x2984 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2974:	fe 01       	movw	r30, r28
    2976:	e5 5b       	subi	r30, 0xB5	; 181
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	64 c0       	rjmp	.+200    	; 0x2a4c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2984:	fe 01       	movw	r30, r28
    2986:	e3 5b       	subi	r30, 0xB3	; 179
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	0c f0       	brlt	.+2      	; 0x29a4 <LCD_displayCharacter+0x22e>
    29a2:	43 c0       	rjmp	.+134    	; 0x2a2a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a4:	fe 01       	movw	r30, r28
    29a6:	ef 5a       	subi	r30, 0xAF	; 175
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	60 81       	ld	r22, Z
    29ac:	71 81       	ldd	r23, Z+1	; 0x01
    29ae:	82 81       	ldd	r24, Z+2	; 0x02
    29b0:	93 81       	ldd	r25, Z+3	; 0x03
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e2       	ldi	r20, 0x20	; 32
    29b8:	51 e4       	ldi	r21, 0x41	; 65
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8e 01       	movw	r16, r28
    29c4:	05 5b       	subi	r16, 0xB5	; 181
    29c6:	1f 4f       	sbci	r17, 0xFF	; 255
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	f8 01       	movw	r30, r16
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	1f c0       	rjmp	.+62     	; 0x2a1a <LCD_displayCharacter+0x2a4>
    29dc:	fe 01       	movw	r30, r28
    29de:	e7 5b       	subi	r30, 0xB7	; 183
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	88 ec       	ldi	r24, 0xC8	; 200
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	fe 01       	movw	r30, r28
    29ec:	e7 5b       	subi	r30, 0xB7	; 183
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <LCD_displayCharacter+0x27e>
    29f8:	fe 01       	movw	r30, r28
    29fa:	e7 5b       	subi	r30, 0xB7	; 183
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	de 01       	movw	r26, r28
    2a04:	a5 5b       	subi	r26, 0xB5	; 181
    2a06:	bf 4f       	sbci	r27, 0xFF	; 255
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e5 5b       	subi	r30, 0xB5	; 181
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	11 96       	adiw	r26, 0x01	; 1
    2a16:	9c 93       	st	X, r25
    2a18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e5 5b       	subi	r30, 0xB5	; 181
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	d1 f6       	brne	.-76     	; 0x29dc <LCD_displayCharacter+0x266>
    2a28:	27 c0       	rjmp	.+78     	; 0x2a78 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	05 5b       	subi	r16, 0xB5	; 181
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	fe 01       	movw	r30, r28
    2a32:	e3 5b       	subi	r30, 0xB3	; 179
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	f8 01       	movw	r30, r16
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	de 01       	movw	r26, r28
    2a4e:	a9 5b       	subi	r26, 0xB9	; 185
    2a50:	bf 4f       	sbci	r27, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	e5 5b       	subi	r30, 0xB5	; 181
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	8d 93       	st	X+, r24
    2a5e:	9c 93       	st	X, r25
    2a60:	fe 01       	movw	r30, r28
    2a62:	e9 5b       	subi	r30, 0xB9	; 185
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <LCD_displayCharacter+0x2f4>
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e9 5b       	subi	r30, 0xB9	; 185
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ed 59       	subi	r30, 0x9D	; 157
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	80 71       	andi	r24, 0x10	; 16
    2a86:	90 70       	andi	r25, 0x00	; 0
    2a88:	95 95       	asr	r25
    2a8a:	87 95       	ror	r24
    2a8c:	95 95       	asr	r25
    2a8e:	87 95       	ror	r24
    2a90:	95 95       	asr	r25
    2a92:	87 95       	ror	r24
    2a94:	95 95       	asr	r25
    2a96:	87 95       	ror	r24
    2a98:	98 2f       	mov	r25, r24
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	63 e0       	ldi	r22, 0x03	; 3
    2a9e:	49 2f       	mov	r20, r25
    2aa0:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	ed 59       	subi	r30, 0x9D	; 157
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	80 72       	andi	r24, 0x20	; 32
    2ab2:	90 70       	andi	r25, 0x00	; 0
    2ab4:	95 95       	asr	r25
    2ab6:	87 95       	ror	r24
    2ab8:	95 95       	asr	r25
    2aba:	87 95       	ror	r24
    2abc:	95 95       	asr	r25
    2abe:	87 95       	ror	r24
    2ac0:	95 95       	asr	r25
    2ac2:	87 95       	ror	r24
    2ac4:	95 95       	asr	r25
    2ac6:	87 95       	ror	r24
    2ac8:	98 2f       	mov	r25, r24
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	64 e0       	ldi	r22, 0x04	; 4
    2ace:	49 2f       	mov	r20, r25
    2ad0:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ed 59       	subi	r30, 0x9D	; 157
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	80 74       	andi	r24, 0x40	; 64
    2ae2:	90 70       	andi	r25, 0x00	; 0
    2ae4:	08 2e       	mov	r0, r24
    2ae6:	89 2f       	mov	r24, r25
    2ae8:	00 0c       	add	r0, r0
    2aea:	88 1f       	adc	r24, r24
    2aec:	99 0b       	sbc	r25, r25
    2aee:	00 0c       	add	r0, r0
    2af0:	88 1f       	adc	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	98 2f       	mov	r25, r24
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	65 e0       	ldi	r22, 0x05	; 5
    2afa:	49 2f       	mov	r20, r25
    2afc:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2b00:	fe 01       	movw	r30, r28
    2b02:	ed 59       	subi	r30, 0x9D	; 157
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	98 2f       	mov	r25, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	99 27       	eor	r25, r25
    2b0e:	99 1f       	adc	r25, r25
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	66 e0       	ldi	r22, 0x06	; 6
    2b14:	49 2f       	mov	r20, r25
    2b16:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ed 5b       	subi	r30, 0xBD	; 189
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a0 e8       	ldi	r26, 0x80	; 128
    2b26:	bf e3       	ldi	r27, 0x3F	; 63
    2b28:	80 83       	st	Z, r24
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	a2 83       	std	Z+2, r26	; 0x02
    2b2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b30:	8e 01       	movw	r16, r28
    2b32:	01 5c       	subi	r16, 0xC1	; 193
    2b34:	1f 4f       	sbci	r17, 0xFF	; 255
    2b36:	fe 01       	movw	r30, r28
    2b38:	ed 5b       	subi	r30, 0xBD	; 189
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	60 81       	ld	r22, Z
    2b3e:	71 81       	ldd	r23, Z+1	; 0x01
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4a ef       	ldi	r20, 0xFA	; 250
    2b4a:	54 e4       	ldi	r21, 0x44	; 68
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	f8 01       	movw	r30, r16
    2b56:	80 83       	st	Z, r24
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	a2 83       	std	Z+2, r26	; 0x02
    2b5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b5e:	fe 01       	movw	r30, r28
    2b60:	ff 96       	adiw	r30, 0x3f	; 63
    2b62:	60 81       	ld	r22, Z
    2b64:	71 81       	ldd	r23, Z+1	; 0x01
    2b66:	82 81       	ldd	r24, Z+2	; 0x02
    2b68:	93 81       	ldd	r25, Z+3	; 0x03
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9e af       	std	Y+62, r25	; 0x3e
    2b80:	8d af       	std	Y+61, r24	; 0x3d
    2b82:	46 c0       	rjmp	.+140    	; 0x2c10 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2b84:	fe 01       	movw	r30, r28
    2b86:	ff 96       	adiw	r30, 0x3f	; 63
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	64 f5       	brge	.+88     	; 0x2bf8 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ed 5b       	subi	r30, 0xBD	; 189
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 81       	ld	r22, Z
    2ba8:	71 81       	ldd	r23, Z+1	; 0x01
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e2       	ldi	r20, 0x20	; 32
    2bb4:	51 e4       	ldi	r21, 0x41	; 65
    2bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9e af       	std	Y+62, r25	; 0x3e
    2bcc:	8d af       	std	Y+61, r24	; 0x3d
    2bce:	0f c0       	rjmp	.+30     	; 0x2bee <LCD_displayCharacter+0x478>
    2bd0:	88 ec       	ldi	r24, 0xC8	; 200
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9c af       	std	Y+60, r25	; 0x3c
    2bd6:	8b af       	std	Y+59, r24	; 0x3b
    2bd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bda:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <LCD_displayCharacter+0x466>
    2be0:	9c af       	std	Y+60, r25	; 0x3c
    2be2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2be6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	9e af       	std	Y+62, r25	; 0x3e
    2bec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bee:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	69 f7       	brne	.-38     	; 0x2bd0 <LCD_displayCharacter+0x45a>
    2bf6:	16 c0       	rjmp	.+44     	; 0x2c24 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ff 96       	adiw	r30, 0x3f	; 63
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	82 81       	ldd	r24, Z+2	; 0x02
    2c02:	93 81       	ldd	r25, Z+3	; 0x03
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9e af       	std	Y+62, r25	; 0x3e
    2c0e:	8d af       	std	Y+61, r24	; 0x3d
    2c10:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c12:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c14:	9a af       	std	Y+58, r25	; 0x3a
    2c16:	89 af       	std	Y+57, r24	; 0x39
    2c18:	89 ad       	ldd	r24, Y+57	; 0x39
    2c1a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <LCD_displayCharacter+0x4a6>
    2c20:	9a af       	std	Y+58, r25	; 0x3a
    2c22:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	62 e0       	ldi	r22, 0x02	; 2
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	a0 e8       	ldi	r26, 0x80	; 128
    2c34:	bf e3       	ldi	r27, 0x3F	; 63
    2c36:	8d ab       	std	Y+53, r24	; 0x35
    2c38:	9e ab       	std	Y+54, r25	; 0x36
    2c3a:	af ab       	std	Y+55, r26	; 0x37
    2c3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c40:	7e a9       	ldd	r23, Y+54	; 0x36
    2c42:	8f a9       	ldd	r24, Y+55	; 0x37
    2c44:	98 ad       	ldd	r25, Y+56	; 0x38
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a ef       	ldi	r20, 0xFA	; 250
    2c4c:	54 e4       	ldi	r21, 0x44	; 68
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	89 ab       	std	Y+49, r24	; 0x31
    2c58:	9a ab       	std	Y+50, r25	; 0x32
    2c5a:	ab ab       	std	Y+51, r26	; 0x33
    2c5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c60:	7a a9       	ldd	r23, Y+50	; 0x32
    2c62:	8b a9       	ldd	r24, Y+51	; 0x33
    2c64:	9c a9       	ldd	r25, Y+52	; 0x34
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	2c f4       	brge	.+10     	; 0x2c80 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	98 ab       	std	Y+48, r25	; 0x30
    2c7c:	8f a7       	std	Y+47, r24	; 0x2f
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2c80:	69 a9       	ldd	r22, Y+49	; 0x31
    2c82:	7a a9       	ldd	r23, Y+50	; 0x32
    2c84:	8b a9       	ldd	r24, Y+51	; 0x33
    2c86:	9c a9       	ldd	r25, Y+52	; 0x34
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	4c f5       	brge	.+82     	; 0x2cea <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	6d a9       	ldd	r22, Y+53	; 0x35
    2c9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	98 ab       	std	Y+48, r25	; 0x30
    2cbe:	8f a7       	std	Y+47, r24	; 0x2f
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <LCD_displayCharacter+0x56a>
    2cc2:	88 ec       	ldi	r24, 0xC8	; 200
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9e a7       	std	Y+46, r25	; 0x2e
    2cc8:	8d a7       	std	Y+45, r24	; 0x2d
    2cca:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ccc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <LCD_displayCharacter+0x558>
    2cd2:	9e a7       	std	Y+46, r25	; 0x2e
    2cd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	98 ab       	std	Y+48, r25	; 0x30
    2cde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <LCD_displayCharacter+0x54c>
    2ce8:	14 c0       	rjmp	.+40     	; 0x2d12 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cea:	69 a9       	ldd	r22, Y+49	; 0x31
    2cec:	7a a9       	ldd	r23, Y+50	; 0x32
    2cee:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	98 ab       	std	Y+48, r25	; 0x30
    2cfc:	8f a7       	std	Y+47, r24	; 0x2f
    2cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d00:	98 a9       	ldd	r25, Y+48	; 0x30
    2d02:	9c a7       	std	Y+44, r25	; 0x2c
    2d04:	8b a7       	std	Y+43, r24	; 0x2b
    2d06:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d08:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <LCD_displayCharacter+0x594>
    2d0e:	9c a7       	std	Y+44, r25	; 0x2c
    2d10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	62 e0       	ldi	r22, 0x02	; 2
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a0 e8       	ldi	r26, 0x80	; 128
    2d22:	bf e3       	ldi	r27, 0x3F	; 63
    2d24:	8f a3       	std	Y+39, r24	; 0x27
    2d26:	98 a7       	std	Y+40, r25	; 0x28
    2d28:	a9 a7       	std	Y+41, r26	; 0x29
    2d2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d30:	89 a5       	ldd	r24, Y+41	; 0x29
    2d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	4a ef       	ldi	r20, 0xFA	; 250
    2d3a:	54 e4       	ldi	r21, 0x44	; 68
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8b a3       	std	Y+35, r24	; 0x23
    2d46:	9c a3       	std	Y+36, r25	; 0x24
    2d48:	ad a3       	std	Y+37, r26	; 0x25
    2d4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d50:	8d a1       	ldd	r24, Y+37	; 0x25
    2d52:	9e a1       	ldd	r25, Y+38	; 0x26
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	2c f4       	brge	.+10     	; 0x2d6e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9a a3       	std	Y+34, r25	; 0x22
    2d6a:	89 a3       	std	Y+33, r24	; 0x21
    2d6c:	3f c0       	rjmp	.+126    	; 0x2dec <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2d6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d70:	7c a1       	ldd	r23, Y+36	; 0x24
    2d72:	8d a1       	ldd	r24, Y+37	; 0x25
    2d74:	9e a1       	ldd	r25, Y+38	; 0x26
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	3f ef       	ldi	r19, 0xFF	; 255
    2d7a:	4f e7       	ldi	r20, 0x7F	; 127
    2d7c:	57 e4       	ldi	r21, 0x47	; 71
    2d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d82:	18 16       	cp	r1, r24
    2d84:	4c f5       	brge	.+82     	; 0x2dd8 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d86:	6f a1       	ldd	r22, Y+39	; 0x27
    2d88:	78 a5       	ldd	r23, Y+40	; 0x28
    2d8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e2       	ldi	r20, 0x20	; 32
    2d94:	51 e4       	ldi	r21, 0x41	; 65
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
    2dae:	0f c0       	rjmp	.+30     	; 0x2dce <LCD_displayCharacter+0x658>
    2db0:	88 ec       	ldi	r24, 0xC8	; 200
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	98 a3       	std	Y+32, r25	; 0x20
    2db6:	8f 8f       	std	Y+31, r24	; 0x1f
    2db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dba:	98 a1       	ldd	r25, Y+32	; 0x20
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <LCD_displayCharacter+0x646>
    2dc0:	98 a3       	std	Y+32, r25	; 0x20
    2dc2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	9a a3       	std	Y+34, r25	; 0x22
    2dcc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dce:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	69 f7       	brne	.-38     	; 0x2db0 <LCD_displayCharacter+0x63a>
    2dd6:	14 c0       	rjmp	.+40     	; 0x2e00 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dda:	7c a1       	ldd	r23, Y+36	; 0x24
    2ddc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dde:	9e a1       	ldd	r25, Y+38	; 0x26
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9a a3       	std	Y+34, r25	; 0x22
    2dea:	89 a3       	std	Y+33, r24	; 0x21
    2dec:	89 a1       	ldd	r24, Y+33	; 0x21
    2dee:	9a a1       	ldd	r25, Y+34	; 0x22
    2df0:	9e 8f       	std	Y+30, r25	; 0x1e
    2df2:	8d 8f       	std	Y+29, r24	; 0x1d
    2df4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2df6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <LCD_displayCharacter+0x682>
    2dfc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dfe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2e00:	fe 01       	movw	r30, r28
    2e02:	ed 59       	subi	r30, 0x9D	; 157
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	80 81       	ld	r24, Z
    2e08:	98 2f       	mov	r25, r24
    2e0a:	91 70       	andi	r25, 0x01	; 1
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	63 e0       	ldi	r22, 0x03	; 3
    2e10:	49 2f       	mov	r20, r25
    2e12:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2e16:	fe 01       	movw	r30, r28
    2e18:	ed 59       	subi	r30, 0x9D	; 157
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	82 70       	andi	r24, 0x02	; 2
    2e24:	90 70       	andi	r25, 0x00	; 0
    2e26:	95 95       	asr	r25
    2e28:	87 95       	ror	r24
    2e2a:	98 2f       	mov	r25, r24
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	64 e0       	ldi	r22, 0x04	; 4
    2e30:	49 2f       	mov	r20, r25
    2e32:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2e36:	fe 01       	movw	r30, r28
    2e38:	ed 59       	subi	r30, 0x9D	; 157
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 81       	ld	r24, Z
    2e3e:	88 2f       	mov	r24, r24
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	84 70       	andi	r24, 0x04	; 4
    2e44:	90 70       	andi	r25, 0x00	; 0
    2e46:	95 95       	asr	r25
    2e48:	87 95       	ror	r24
    2e4a:	95 95       	asr	r25
    2e4c:	87 95       	ror	r24
    2e4e:	98 2f       	mov	r25, r24
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	65 e0       	ldi	r22, 0x05	; 5
    2e54:	49 2f       	mov	r20, r25
    2e56:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ed 59       	subi	r30, 0x9D	; 157
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 81       	ld	r24, Z
    2e62:	88 2f       	mov	r24, r24
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	88 70       	andi	r24, 0x08	; 8
    2e68:	90 70       	andi	r25, 0x00	; 0
    2e6a:	95 95       	asr	r25
    2e6c:	87 95       	ror	r24
    2e6e:	95 95       	asr	r25
    2e70:	87 95       	ror	r24
    2e72:	95 95       	asr	r25
    2e74:	87 95       	ror	r24
    2e76:	98 2f       	mov	r25, r24
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	66 e0       	ldi	r22, 0x06	; 6
    2e7c:	49 2f       	mov	r20, r25
    2e7e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a0 e8       	ldi	r26, 0x80	; 128
    2e88:	bf e3       	ldi	r27, 0x3F	; 63
    2e8a:	89 8f       	std	Y+25, r24	; 0x19
    2e8c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e8e:	ab 8f       	std	Y+27, r26	; 0x1b
    2e90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e92:	69 8d       	ldd	r22, Y+25	; 0x19
    2e94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4a ef       	ldi	r20, 0xFA	; 250
    2ea0:	54 e4       	ldi	r21, 0x44	; 68
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	8d 8b       	std	Y+21, r24	; 0x15
    2eac:	9e 8b       	std	Y+22, r25	; 0x16
    2eae:	af 8b       	std	Y+23, r26	; 0x17
    2eb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec6:	88 23       	and	r24, r24
    2ec8:	2c f4       	brge	.+10     	; 0x2ed4 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9c 8b       	std	Y+20, r25	; 0x14
    2ed0:	8b 8b       	std	Y+19, r24	; 0x13
    2ed2:	3f c0       	rjmp	.+126    	; 0x2f52 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eda:	98 8d       	ldd	r25, Y+24	; 0x18
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	4f e7       	ldi	r20, 0x7F	; 127
    2ee2:	57 e4       	ldi	r21, 0x47	; 71
    2ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	4c f5       	brge	.+82     	; 0x2f3e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eec:	69 8d       	ldd	r22, Y+25	; 0x19
    2eee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ef0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e2       	ldi	r20, 0x20	; 32
    2efa:	51 e4       	ldi	r21, 0x41	; 65
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	bc 01       	movw	r22, r24
    2f06:	cd 01       	movw	r24, r26
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9c 8b       	std	Y+20, r25	; 0x14
    2f12:	8b 8b       	std	Y+19, r24	; 0x13
    2f14:	0f c0       	rjmp	.+30     	; 0x2f34 <LCD_displayCharacter+0x7be>
    2f16:	88 ec       	ldi	r24, 0xC8	; 200
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	9a 8b       	std	Y+18, r25	; 0x12
    2f1c:	89 8b       	std	Y+17, r24	; 0x11
    2f1e:	89 89       	ldd	r24, Y+17	; 0x11
    2f20:	9a 89       	ldd	r25, Y+18	; 0x12
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <LCD_displayCharacter+0x7ac>
    2f26:	9a 8b       	std	Y+18, r25	; 0x12
    2f28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	9c 8b       	std	Y+20, r25	; 0x14
    2f32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	8b 89       	ldd	r24, Y+19	; 0x13
    2f36:	9c 89       	ldd	r25, Y+20	; 0x14
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	69 f7       	brne	.-38     	; 0x2f16 <LCD_displayCharacter+0x7a0>
    2f3c:	14 c0       	rjmp	.+40     	; 0x2f66 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f40:	7e 89       	ldd	r23, Y+22	; 0x16
    2f42:	8f 89       	ldd	r24, Y+23	; 0x17
    2f44:	98 8d       	ldd	r25, Y+24	; 0x18
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9c 8b       	std	Y+20, r25	; 0x14
    2f50:	8b 8b       	std	Y+19, r24	; 0x13
    2f52:	8b 89       	ldd	r24, Y+19	; 0x13
    2f54:	9c 89       	ldd	r25, Y+20	; 0x14
    2f56:	98 8b       	std	Y+16, r25	; 0x10
    2f58:	8f 87       	std	Y+15, r24	; 0x0f
    2f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f5c:	98 89       	ldd	r25, Y+16	; 0x10
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <LCD_displayCharacter+0x7e8>
    2f62:	98 8b       	std	Y+16, r25	; 0x10
    2f64:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	62 e0       	ldi	r22, 0x02	; 2
    2f6a:	40 e0       	ldi	r20, 0x00	; 0
    2f6c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_writePin>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	a0 e8       	ldi	r26, 0x80	; 128
    2f76:	bf e3       	ldi	r27, 0x3F	; 63
    2f78:	8b 87       	std	Y+11, r24	; 0x0b
    2f7a:	9c 87       	std	Y+12, r25	; 0x0c
    2f7c:	ad 87       	std	Y+13, r26	; 0x0d
    2f7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	4a ef       	ldi	r20, 0xFA	; 250
    2f8e:	54 e4       	ldi	r21, 0x44	; 68
    2f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	8f 83       	std	Y+7, r24	; 0x07
    2f9a:	98 87       	std	Y+8, r25	; 0x08
    2f9c:	a9 87       	std	Y+9, r26	; 0x09
    2f9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e8       	ldi	r20, 0x80	; 128
    2fae:	5f e3       	ldi	r21, 0x3F	; 63
    2fb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fb4:	88 23       	and	r24, r24
    2fb6:	2c f4       	brge	.+10     	; 0x2fc2 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	3f c0       	rjmp	.+126    	; 0x3040 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc4:	78 85       	ldd	r23, Y+8	; 0x08
    2fc6:	89 85       	ldd	r24, Y+9	; 0x09
    2fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	3f ef       	ldi	r19, 0xFF	; 255
    2fce:	4f e7       	ldi	r20, 0x7F	; 127
    2fd0:	57 e4       	ldi	r21, 0x47	; 71
    2fd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fd6:	18 16       	cp	r1, r24
    2fd8:	4c f5       	brge	.+82     	; 0x302c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e2       	ldi	r20, 0x20	; 32
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9e 83       	std	Y+6, r25	; 0x06
    3000:	8d 83       	std	Y+5, r24	; 0x05
    3002:	0f c0       	rjmp	.+30     	; 0x3022 <LCD_displayCharacter+0x8ac>
    3004:	88 ec       	ldi	r24, 0xC8	; 200
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	9c 83       	std	Y+4, r25	; 0x04
    300a:	8b 83       	std	Y+3, r24	; 0x03
    300c:	8b 81       	ldd	r24, Y+3	; 0x03
    300e:	9c 81       	ldd	r25, Y+4	; 0x04
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <LCD_displayCharacter+0x89a>
    3014:	9c 83       	std	Y+4, r25	; 0x04
    3016:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	9e 83       	std	Y+6, r25	; 0x06
    3020:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	9e 81       	ldd	r25, Y+6	; 0x06
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	69 f7       	brne	.-38     	; 0x3004 <LCD_displayCharacter+0x88e>
    302a:	14 c0       	rjmp	.+40     	; 0x3054 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	6f 81       	ldd	r22, Y+7	; 0x07
    302e:	78 85       	ldd	r23, Y+8	; 0x08
    3030:	89 85       	ldd	r24, Y+9	; 0x09
    3032:	9a 85       	ldd	r25, Y+10	; 0x0a
    3034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
    3040:	8d 81       	ldd	r24, Y+5	; 0x05
    3042:	9e 81       	ldd	r25, Y+6	; 0x06
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	9a 81       	ldd	r25, Y+2	; 0x02
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <LCD_displayCharacter+0x8d6>
    3050:	9a 83       	std	Y+2, r25	; 0x02
    3052:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3054:	cd 59       	subi	r28, 0x9D	; 157
    3056:	df 4f       	sbci	r29, 0xFF	; 255
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	08 95       	ret

0000306c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	00 d0       	rcall	.+0      	; 0x3072 <LCD_displayString+0x6>
    3072:	0f 92       	push	r0
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	9b 83       	std	Y+3, r25	; 0x03
    307a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    307c:	19 82       	std	Y+1, r1	; 0x01
    307e:	0e c0       	rjmp	.+28     	; 0x309c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	28 2f       	mov	r18, r24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	fc 01       	movw	r30, r24
    308c:	e2 0f       	add	r30, r18
    308e:	f3 1f       	adc	r31, r19
    3090:	80 81       	ld	r24, Z
    3092:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
		i++;
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	8f 5f       	subi	r24, 0xFF	; 255
    309a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	28 2f       	mov	r18, r24
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	9b 81       	ldd	r25, Y+3	; 0x03
    30a6:	fc 01       	movw	r30, r24
    30a8:	e2 0f       	add	r30, r18
    30aa:	f3 1f       	adc	r31, r19
    30ac:	80 81       	ld	r24, Z
    30ae:	88 23       	and	r24, r24
    30b0:	39 f7       	brne	.-50     	; 0x3080 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	cf 91       	pop	r28
    30ba:	df 91       	pop	r29
    30bc:	08 95       	ret

000030be <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    30be:	df 93       	push	r29
    30c0:	cf 93       	push	r28
    30c2:	00 d0       	rcall	.+0      	; 0x30c4 <LCD_moveCursor+0x6>
    30c4:	00 d0       	rcall	.+0      	; 0x30c6 <LCD_moveCursor+0x8>
    30c6:	0f 92       	push	r0
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	8a 83       	std	Y+2, r24	; 0x02
    30ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	3d 83       	std	Y+5, r19	; 0x05
    30d8:	2c 83       	std	Y+4, r18	; 0x04
    30da:	8c 81       	ldd	r24, Y+4	; 0x04
    30dc:	9d 81       	ldd	r25, Y+5	; 0x05
    30de:	81 30       	cpi	r24, 0x01	; 1
    30e0:	91 05       	cpc	r25, r1
    30e2:	c1 f0       	breq	.+48     	; 0x3114 <LCD_moveCursor+0x56>
    30e4:	2c 81       	ldd	r18, Y+4	; 0x04
    30e6:	3d 81       	ldd	r19, Y+5	; 0x05
    30e8:	22 30       	cpi	r18, 0x02	; 2
    30ea:	31 05       	cpc	r19, r1
    30ec:	2c f4       	brge	.+10     	; 0x30f8 <LCD_moveCursor+0x3a>
    30ee:	8c 81       	ldd	r24, Y+4	; 0x04
    30f0:	9d 81       	ldd	r25, Y+5	; 0x05
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	61 f0       	breq	.+24     	; 0x310e <LCD_moveCursor+0x50>
    30f6:	19 c0       	rjmp	.+50     	; 0x312a <LCD_moveCursor+0x6c>
    30f8:	2c 81       	ldd	r18, Y+4	; 0x04
    30fa:	3d 81       	ldd	r19, Y+5	; 0x05
    30fc:	22 30       	cpi	r18, 0x02	; 2
    30fe:	31 05       	cpc	r19, r1
    3100:	69 f0       	breq	.+26     	; 0x311c <LCD_moveCursor+0x5e>
    3102:	8c 81       	ldd	r24, Y+4	; 0x04
    3104:	9d 81       	ldd	r25, Y+5	; 0x05
    3106:	83 30       	cpi	r24, 0x03	; 3
    3108:	91 05       	cpc	r25, r1
    310a:	61 f0       	breq	.+24     	; 0x3124 <LCD_moveCursor+0x66>
    310c:	0e c0       	rjmp	.+28     	; 0x312a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	0b c0       	rjmp	.+22     	; 0x312a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	80 5c       	subi	r24, 0xC0	; 192
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	07 c0       	rjmp	.+14     	; 0x312a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    311c:	8b 81       	ldd	r24, Y+3	; 0x03
    311e:	80 5f       	subi	r24, 0xF0	; 240
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	03 c0       	rjmp	.+6      	; 0x312a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	80 5b       	subi	r24, 0xB0	; 176
    3128:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	80 68       	ori	r24, 0x80	; 128
    312e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_sendCommand>
}
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	08 95       	ret

00003142 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	00 d0       	rcall	.+0      	; 0x3148 <LCD_displayStringRowColumn+0x6>
    3148:	00 d0       	rcall	.+0      	; 0x314a <LCD_displayStringRowColumn+0x8>
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	89 83       	std	Y+1, r24	; 0x01
    3150:	6a 83       	std	Y+2, r22	; 0x02
    3152:	5c 83       	std	Y+4, r21	; 0x04
    3154:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	6a 81       	ldd	r22, Y+2	; 0x02
    315a:	0e 94 5f 18 	call	0x30be	; 0x30be <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_displayString>
}
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
    317c:	62 97       	sbiw	r28, 0x12	; 18
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	9a 8b       	std	Y+18, r25	; 0x12
    318a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    318c:	89 89       	ldd	r24, Y+17	; 0x11
    318e:	9a 89       	ldd	r25, Y+18	; 0x12
    3190:	9e 01       	movw	r18, r28
    3192:	2f 5f       	subi	r18, 0xFF	; 255
    3194:	3f 4f       	sbci	r19, 0xFF	; 255
    3196:	b9 01       	movw	r22, r18
    3198:	4a e0       	ldi	r20, 0x0A	; 10
    319a:	50 e0       	ldi	r21, 0x00	; 0
    319c:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <itoa>
   LCD_displayString(buff); /* Display the string */
    31a0:	ce 01       	movw	r24, r28
    31a2:	01 96       	adiw	r24, 0x01	; 1
    31a4:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_displayString>
}
    31a8:	62 96       	adiw	r28, 0x12	; 18
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	08 95       	ret

000031ba <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    31ba:	df 93       	push	r29
    31bc:	cf 93       	push	r28
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_sendCommand>
}
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	08 95       	ret

000031ce <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
#if(USED_MODE == COMPARE_MODE)
ISR(TIMER1_COMPA_vect)
{
    31ce:	1f 92       	push	r1
    31d0:	0f 92       	push	r0
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	0f 92       	push	r0
    31d6:	11 24       	eor	r1, r1
    31d8:	2f 93       	push	r18
    31da:	3f 93       	push	r19
    31dc:	4f 93       	push	r20
    31de:	5f 93       	push	r21
    31e0:	6f 93       	push	r22
    31e2:	7f 93       	push	r23
    31e4:	8f 93       	push	r24
    31e6:	9f 93       	push	r25
    31e8:	af 93       	push	r26
    31ea:	bf 93       	push	r27
    31ec:	ef 93       	push	r30
    31ee:	ff 93       	push	r31
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    31f8:	80 91 ed 00 	lds	r24, 0x00ED
    31fc:	90 91 ee 00 	lds	r25, 0x00EE
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	29 f0       	breq	.+10     	; 0x320e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3204:	e0 91 ed 00 	lds	r30, 0x00ED
    3208:	f0 91 ee 00 	lds	r31, 0x00EE
    320c:	09 95       	icall
	}
}
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	ff 91       	pop	r31
    3214:	ef 91       	pop	r30
    3216:	bf 91       	pop	r27
    3218:	af 91       	pop	r26
    321a:	9f 91       	pop	r25
    321c:	8f 91       	pop	r24
    321e:	7f 91       	pop	r23
    3220:	6f 91       	pop	r22
    3222:	5f 91       	pop	r21
    3224:	4f 91       	pop	r20
    3226:	3f 91       	pop	r19
    3228:	2f 91       	pop	r18
    322a:	0f 90       	pop	r0
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	0f 90       	pop	r0
    3230:	1f 90       	pop	r1
    3232:	18 95       	reti

00003234 <Timer1_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	00 d0       	rcall	.+0      	; 0x323a <Timer1_init+0x6>
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	9a 83       	std	Y+2, r25	; 0x02
    3240:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initial_value;
    3242:	a2 e5       	ldi	r26, 0x52	; 82
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	e9 81       	ldd	r30, Y+1	; 0x01
    3248:	fa 81       	ldd	r31, Y+2	; 0x02
    324a:	80 81       	ld	r24, Z
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	8c 93       	st	X, r24

	TCCR1A = (1<<FOC1A) | (1<<FOC1B); /*FOC1A , FOC1B are 1 to cancel PWM mode
    3250:	ef e4       	ldi	r30, 0x4F	; 79
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	8c e0       	ldi	r24, 0x0C	; 12
    3256:	80 83       	st	Z, r24
	 *Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 *WGM10, WGM11 are zero to choose only between normal and compare mode
	 */
	TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode)<<WGM12); /*Prescaler by the first three bits(CS10,CS12,CS11)
    3258:	ae e4       	ldi	r26, 0x4E	; 78
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e9 81       	ldd	r30, Y+1	; 0x01
    325e:	fa 81       	ldd	r31, Y+2	; 0x02
    3260:	84 81       	ldd	r24, Z+4	; 0x04
    3262:	28 2f       	mov	r18, r24
    3264:	e9 81       	ldd	r30, Y+1	; 0x01
    3266:	fa 81       	ldd	r31, Y+2	; 0x02
    3268:	85 81       	ldd	r24, Z+5	; 0x05
    326a:	88 2f       	mov	r24, r24
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	88 0f       	add	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	82 2b       	or	r24, r18
    327c:	8c 93       	st	X, r24
	 *WGM13 is zero to choose only between normal and compare mode by making WGM12 1(for compare) or 0(for normal)
	 */
#if(USED_MODE == COMPARE_MODE)
	OCR1A = Config_Ptr->compare_value;
    327e:	aa e4       	ldi	r26, 0x4A	; 74
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e9 81       	ldd	r30, Y+1	; 0x01
    3284:	fa 81       	ldd	r31, Y+2	; 0x02
    3286:	82 81       	ldd	r24, Z+2	; 0x02
    3288:	93 81       	ldd	r25, Z+3	; 0x03
    328a:	11 96       	adiw	r26, 0x01	; 1
    328c:	9c 93       	st	X, r25
    328e:	8e 93       	st	-X, r24
	TIMSK |= (1<<OCIE1A);// Enable Timer1 Compare Interrupt///////////////////////////////////////////////////////////////////////////
    3290:	a9 e5       	ldi	r26, 0x59	; 89
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e9 e5       	ldi	r30, 0x59	; 89
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	80 61       	ori	r24, 0x10	; 16
    329c:	8c 93       	st	X, r24
#elif(USED_MODE == NORMAL_MODE)
	TIMSK |= (1<<TOIE1);// Enable Timer1 Overflow Interrupt///////////////////////////////////////////////////////////////////////////
#endif
}
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <Timer1_deInit>:
/*
 * Description : Function to disable the Timer1.
 *
 */
void Timer1_deInit(void)
{
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    32b0:	ef e4       	ldi	r30, 0x4F	; 79
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	10 82       	st	Z, r1
	TCCR1B = 0;
    32b6:	ee e4       	ldi	r30, 0x4E	; 78
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	10 82       	st	Z, r1
#if(USED_MODE == COMPARE_MODE)
	TIMSK &= ~(1<<OCIE1A); // Disable Timer1 Compare Interrupt///////////////////////////////////////////////////////////////////////////
    32bc:	a9 e5       	ldi	r26, 0x59	; 89
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e9 e5       	ldi	r30, 0x59	; 89
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	8f 7e       	andi	r24, 0xEF	; 239
    32c8:	8c 93       	st	X, r24
#elif(USED_MODE == NORMAL_MODE)
	TIMSK &= ~(1<<TOIE1); // Disable Timer1 Overflow Interrupt
#endif
}
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	08 95       	ret

000032d0 <Timer1_setCallBack>:
/*
 * Description : Function to set the Call Back function address.
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <Timer1_setCallBack+0x6>
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	9a 83       	std	Y+2, r25	; 0x02
    32dc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	9a 81       	ldd	r25, Y+2	; 0x02
    32e2:	90 93 ee 00 	sts	0x00EE, r25
    32e6:	80 93 ed 00 	sts	0x00ED, r24
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <UART_init+0x6>
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <UART_init+0x8>
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	9c 83       	std	Y+4, r25	; 0x04
    3302:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3304:	1a 82       	std	Y+2, r1	; 0x02
    3306:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3308:	eb e2       	ldi	r30, 0x2B	; 43
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | (Config_Ptr->bit_data & 0x04);
    3310:	aa e2       	ldi	r26, 0x2A	; 42
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	eb 81       	ldd	r30, Y+3	; 0x03
    3316:	fc 81       	ldd	r31, Y+4	; 0x04
    3318:	80 81       	ld	r24, Z
    331a:	84 70       	andi	r24, 0x04	; 4
    331c:	88 61       	ori	r24, 0x18	; 24
    331e:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit ;
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data & 0x03)<<UCSZ0) | ((Config_Ptr->parity)<<UPM0) | ((Config_Ptr->stop_bit)<<USBS);
    3320:	a0 e4       	ldi	r26, 0x40	; 64
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	eb 81       	ldd	r30, Y+3	; 0x03
    3326:	fc 81       	ldd	r31, Y+4	; 0x04
    3328:	80 81       	ld	r24, Z
    332a:	88 2f       	mov	r24, r24
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	83 70       	andi	r24, 0x03	; 3
    3330:	90 70       	andi	r25, 0x00	; 0
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	28 2f       	mov	r18, r24
    3338:	20 68       	ori	r18, 0x80	; 128
    333a:	eb 81       	ldd	r30, Y+3	; 0x03
    333c:	fc 81       	ldd	r31, Y+4	; 0x04
    333e:	81 81       	ldd	r24, Z+1	; 0x01
    3340:	88 2f       	mov	r24, r24
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	82 95       	swap	r24
    3346:	92 95       	swap	r25
    3348:	90 7f       	andi	r25, 0xF0	; 240
    334a:	98 27       	eor	r25, r24
    334c:	80 7f       	andi	r24, 0xF0	; 240
    334e:	98 27       	eor	r25, r24
    3350:	28 2b       	or	r18, r24
    3352:	eb 81       	ldd	r30, Y+3	; 0x03
    3354:	fc 81       	ldd	r31, Y+4	; 0x04
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	88 2f       	mov	r24, r24
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	88 0f       	add	r24, r24
    335e:	99 1f       	adc	r25, r25
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	82 2b       	or	r24, r18
    336a:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    336c:	eb 81       	ldd	r30, Y+3	; 0x03
    336e:	fc 81       	ldd	r31, Y+4	; 0x04
    3370:	83 81       	ldd	r24, Z+3	; 0x03
    3372:	94 81       	ldd	r25, Z+4	; 0x04
    3374:	a5 81       	ldd	r26, Z+5	; 0x05
    3376:	b6 81       	ldd	r27, Z+6	; 0x06
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	aa 1f       	adc	r26, r26
    337e:	bb 1f       	adc	r27, r27
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	aa 1f       	adc	r26, r26
    3386:	bb 1f       	adc	r27, r27
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	aa 1f       	adc	r26, r26
    338e:	bb 1f       	adc	r27, r27
    3390:	9c 01       	movw	r18, r24
    3392:	ad 01       	movw	r20, r26
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	92 e1       	ldi	r25, 0x12	; 18
    3398:	aa e7       	ldi	r26, 0x7A	; 122
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	bc 01       	movw	r22, r24
    339e:	cd 01       	movw	r24, r26
    33a0:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__udivmodsi4>
    33a4:	da 01       	movw	r26, r20
    33a6:	c9 01       	movw	r24, r18
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	9a 83       	std	Y+2, r25	; 0x02
    33ac:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    33ae:	e0 e4       	ldi	r30, 0x40	; 64
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
    33b6:	89 2f       	mov	r24, r25
    33b8:	99 27       	eor	r25, r25
    33ba:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    33bc:	e9 e2       	ldi	r30, 0x29	; 41
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	80 83       	st	Z, r24
}
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	0f 92       	push	r0
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    33de:	eb e2       	ldi	r30, 0x2B	; 43
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	88 2f       	mov	r24, r24
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	80 72       	andi	r24, 0x20	; 32
    33ea:	90 70       	andi	r25, 0x00	; 0
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	b9 f3       	breq	.-18     	; 0x33de <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    33f0:	ec e2       	ldi	r30, 0x2C	; 44
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    33f8:	0f 90       	pop	r0
    33fa:	cf 91       	pop	r28
    33fc:	df 91       	pop	r29
    33fe:	08 95       	ret

00003400 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3400:	df 93       	push	r29
    3402:	cf 93       	push	r28
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3408:	eb e2       	ldi	r30, 0x2B	; 43
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	80 81       	ld	r24, Z
    340e:	88 23       	and	r24, r24
    3410:	dc f7       	brge	.-10     	; 0x3408 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3412:	ec e2       	ldi	r30, 0x2C	; 44
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
}
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	00 d0       	rcall	.+0      	; 0x3424 <UART_sendString+0x6>
    3424:	0f 92       	push	r0
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	9b 83       	std	Y+3, r25	; 0x03
    342c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    342e:	19 82       	std	Y+1, r1	; 0x01
    3430:	0e c0       	rjmp	.+28     	; 0x344e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	28 2f       	mov	r18, r24
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	9b 81       	ldd	r25, Y+3	; 0x03
    343c:	fc 01       	movw	r30, r24
    343e:	e2 0f       	add	r30, r18
    3440:	f3 1f       	adc	r31, r19
    3442:	80 81       	ld	r24, Z
    3444:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <UART_sendByte>
		i++;
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	8f 5f       	subi	r24, 0xFF	; 255
    344c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	28 2f       	mov	r18, r24
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	9b 81       	ldd	r25, Y+3	; 0x03
    3458:	fc 01       	movw	r30, r24
    345a:	e2 0f       	add	r30, r18
    345c:	f3 1f       	adc	r31, r19
    345e:	80 81       	ld	r24, Z
    3460:	88 23       	and	r24, r24
    3462:	39 f7       	brne	.-50     	; 0x3432 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3470:	0f 93       	push	r16
    3472:	1f 93       	push	r17
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	00 d0       	rcall	.+0      	; 0x347a <UART_receiveString+0xa>
    347a:	0f 92       	push	r0
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	9b 83       	std	Y+3, r25	; 0x03
    3482:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3484:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
    348e:	9b 81       	ldd	r25, Y+3	; 0x03
    3490:	8c 01       	movw	r16, r24
    3492:	02 0f       	add	r16, r18
    3494:	13 1f       	adc	r17, r19
    3496:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
    349a:	f8 01       	movw	r30, r16
    349c:	80 83       	st	Z, r24
    349e:	0f c0       	rjmp	.+30     	; 0x34be <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	8f 5f       	subi	r24, 0xFF	; 255
    34a4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	9b 81       	ldd	r25, Y+3	; 0x03
    34b0:	8c 01       	movw	r16, r24
    34b2:	02 0f       	add	r16, r18
    34b4:	13 1f       	adc	r17, r19
    34b6:	0e 94 00 1a 	call	0x3400	; 0x3400 <UART_recieveByte>
    34ba:	f8 01       	movw	r30, r16
    34bc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	8a 81       	ldd	r24, Y+2	; 0x02
    34c6:	9b 81       	ldd	r25, Y+3	; 0x03
    34c8:	fc 01       	movw	r30, r24
    34ca:	e2 0f       	add	r30, r18
    34cc:	f3 1f       	adc	r31, r19
    34ce:	80 81       	ld	r24, Z
    34d0:	83 32       	cpi	r24, 0x23	; 35
    34d2:	31 f7       	brne	.-52     	; 0x34a0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	9b 81       	ldd	r25, Y+3	; 0x03
    34de:	fc 01       	movw	r30, r24
    34e0:	e2 0f       	add	r30, r18
    34e2:	f3 1f       	adc	r31, r19
    34e4:	10 82       	st	Z, r1
}
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	08 95       	ret

000034f6 <__udivmodsi4>:
    34f6:	a1 e2       	ldi	r26, 0x21	; 33
    34f8:	1a 2e       	mov	r1, r26
    34fa:	aa 1b       	sub	r26, r26
    34fc:	bb 1b       	sub	r27, r27
    34fe:	fd 01       	movw	r30, r26
    3500:	0d c0       	rjmp	.+26     	; 0x351c <__udivmodsi4_ep>

00003502 <__udivmodsi4_loop>:
    3502:	aa 1f       	adc	r26, r26
    3504:	bb 1f       	adc	r27, r27
    3506:	ee 1f       	adc	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	a2 17       	cp	r26, r18
    350c:	b3 07       	cpc	r27, r19
    350e:	e4 07       	cpc	r30, r20
    3510:	f5 07       	cpc	r31, r21
    3512:	20 f0       	brcs	.+8      	; 0x351c <__udivmodsi4_ep>
    3514:	a2 1b       	sub	r26, r18
    3516:	b3 0b       	sbc	r27, r19
    3518:	e4 0b       	sbc	r30, r20
    351a:	f5 0b       	sbc	r31, r21

0000351c <__udivmodsi4_ep>:
    351c:	66 1f       	adc	r22, r22
    351e:	77 1f       	adc	r23, r23
    3520:	88 1f       	adc	r24, r24
    3522:	99 1f       	adc	r25, r25
    3524:	1a 94       	dec	r1
    3526:	69 f7       	brne	.-38     	; 0x3502 <__udivmodsi4_loop>
    3528:	60 95       	com	r22
    352a:	70 95       	com	r23
    352c:	80 95       	com	r24
    352e:	90 95       	com	r25
    3530:	9b 01       	movw	r18, r22
    3532:	ac 01       	movw	r20, r24
    3534:	bd 01       	movw	r22, r26
    3536:	cf 01       	movw	r24, r30
    3538:	08 95       	ret

0000353a <__prologue_saves__>:
    353a:	2f 92       	push	r2
    353c:	3f 92       	push	r3
    353e:	4f 92       	push	r4
    3540:	5f 92       	push	r5
    3542:	6f 92       	push	r6
    3544:	7f 92       	push	r7
    3546:	8f 92       	push	r8
    3548:	9f 92       	push	r9
    354a:	af 92       	push	r10
    354c:	bf 92       	push	r11
    354e:	cf 92       	push	r12
    3550:	df 92       	push	r13
    3552:	ef 92       	push	r14
    3554:	ff 92       	push	r15
    3556:	0f 93       	push	r16
    3558:	1f 93       	push	r17
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	ca 1b       	sub	r28, r26
    3564:	db 0b       	sbc	r29, r27
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	09 94       	ijmp

00003572 <__epilogue_restores__>:
    3572:	2a 88       	ldd	r2, Y+18	; 0x12
    3574:	39 88       	ldd	r3, Y+17	; 0x11
    3576:	48 88       	ldd	r4, Y+16	; 0x10
    3578:	5f 84       	ldd	r5, Y+15	; 0x0f
    357a:	6e 84       	ldd	r6, Y+14	; 0x0e
    357c:	7d 84       	ldd	r7, Y+13	; 0x0d
    357e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3580:	9b 84       	ldd	r9, Y+11	; 0x0b
    3582:	aa 84       	ldd	r10, Y+10	; 0x0a
    3584:	b9 84       	ldd	r11, Y+9	; 0x09
    3586:	c8 84       	ldd	r12, Y+8	; 0x08
    3588:	df 80       	ldd	r13, Y+7	; 0x07
    358a:	ee 80       	ldd	r14, Y+6	; 0x06
    358c:	fd 80       	ldd	r15, Y+5	; 0x05
    358e:	0c 81       	ldd	r16, Y+4	; 0x04
    3590:	1b 81       	ldd	r17, Y+3	; 0x03
    3592:	aa 81       	ldd	r26, Y+2	; 0x02
    3594:	b9 81       	ldd	r27, Y+1	; 0x01
    3596:	ce 0f       	add	r28, r30
    3598:	d1 1d       	adc	r29, r1
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	ed 01       	movw	r28, r26
    35a6:	08 95       	ret

000035a8 <itoa>:
    35a8:	fb 01       	movw	r30, r22
    35aa:	9f 01       	movw	r18, r30
    35ac:	e8 94       	clt
    35ae:	42 30       	cpi	r20, 0x02	; 2
    35b0:	c4 f0       	brlt	.+48     	; 0x35e2 <itoa+0x3a>
    35b2:	45 32       	cpi	r20, 0x25	; 37
    35b4:	b4 f4       	brge	.+44     	; 0x35e2 <itoa+0x3a>
    35b6:	4a 30       	cpi	r20, 0x0A	; 10
    35b8:	29 f4       	brne	.+10     	; 0x35c4 <itoa+0x1c>
    35ba:	97 fb       	bst	r25, 7
    35bc:	1e f4       	brtc	.+6      	; 0x35c4 <itoa+0x1c>
    35be:	90 95       	com	r25
    35c0:	81 95       	neg	r24
    35c2:	9f 4f       	sbci	r25, 0xFF	; 255
    35c4:	64 2f       	mov	r22, r20
    35c6:	77 27       	eor	r23, r23
    35c8:	0e 94 05 1b 	call	0x360a	; 0x360a <__udivmodhi4>
    35cc:	80 5d       	subi	r24, 0xD0	; 208
    35ce:	8a 33       	cpi	r24, 0x3A	; 58
    35d0:	0c f0       	brlt	.+2      	; 0x35d4 <itoa+0x2c>
    35d2:	89 5d       	subi	r24, 0xD9	; 217
    35d4:	81 93       	st	Z+, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	a1 f7       	brne	.-24     	; 0x35c4 <itoa+0x1c>
    35dc:	16 f4       	brtc	.+4      	; 0x35e2 <itoa+0x3a>
    35de:	5d e2       	ldi	r21, 0x2D	; 45
    35e0:	51 93       	st	Z+, r21
    35e2:	10 82       	st	Z, r1
    35e4:	c9 01       	movw	r24, r18
    35e6:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <strrev>

000035ea <strrev>:
    35ea:	dc 01       	movw	r26, r24
    35ec:	fc 01       	movw	r30, r24
    35ee:	67 2f       	mov	r22, r23
    35f0:	71 91       	ld	r23, Z+
    35f2:	77 23       	and	r23, r23
    35f4:	e1 f7       	brne	.-8      	; 0x35ee <strrev+0x4>
    35f6:	32 97       	sbiw	r30, 0x02	; 2
    35f8:	04 c0       	rjmp	.+8      	; 0x3602 <strrev+0x18>
    35fa:	7c 91       	ld	r23, X
    35fc:	6d 93       	st	X+, r22
    35fe:	70 83       	st	Z, r23
    3600:	62 91       	ld	r22, -Z
    3602:	ae 17       	cp	r26, r30
    3604:	bf 07       	cpc	r27, r31
    3606:	c8 f3       	brcs	.-14     	; 0x35fa <strrev+0x10>
    3608:	08 95       	ret

0000360a <__udivmodhi4>:
    360a:	aa 1b       	sub	r26, r26
    360c:	bb 1b       	sub	r27, r27
    360e:	51 e1       	ldi	r21, 0x11	; 17
    3610:	07 c0       	rjmp	.+14     	; 0x3620 <__udivmodhi4_ep>

00003612 <__udivmodhi4_loop>:
    3612:	aa 1f       	adc	r26, r26
    3614:	bb 1f       	adc	r27, r27
    3616:	a6 17       	cp	r26, r22
    3618:	b7 07       	cpc	r27, r23
    361a:	10 f0       	brcs	.+4      	; 0x3620 <__udivmodhi4_ep>
    361c:	a6 1b       	sub	r26, r22
    361e:	b7 0b       	sbc	r27, r23

00003620 <__udivmodhi4_ep>:
    3620:	88 1f       	adc	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	5a 95       	dec	r21
    3626:	a9 f7       	brne	.-22     	; 0x3612 <__udivmodhi4_loop>
    3628:	80 95       	com	r24
    362a:	90 95       	com	r25
    362c:	bc 01       	movw	r22, r24
    362e:	cd 01       	movw	r24, r26
    3630:	08 95       	ret

00003632 <_exit>:
    3632:	f8 94       	cli

00003634 <__stop_program>:
    3634:	ff cf       	rjmp	.-2      	; 0x3634 <__stop_program>
