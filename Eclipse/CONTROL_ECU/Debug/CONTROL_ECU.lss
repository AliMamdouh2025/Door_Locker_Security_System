
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  000022d4  00002368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080016c  0080016c  00002474  2**0
                  ALLOC
  3 .stab         00002550  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000130a  00000000  00000000  000049c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00005e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000601f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000802f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a194  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000a334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000a5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
      8a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <Buzzer_init>:
 * Description :
 * Setup the direction for the buzzer pin as output pin through the GPIO driver.
 *  Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_Port,Buzzer_Pin,PIN_OUTPUT);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 99 0b 	call	0x1732	; 0x1732 <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_Port,Buzzer_Pin,0);
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <Buzzer_on>:
/*
 * Description :
 * Function to enable the Buzzer through the GPIO
 */
void Buzzer_on(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_Port,Buzzer_Pin,1);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	62 e0       	ldi	r22, 0x02	; 2
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <Buzzer_off>:
/*
 * Description :
 * Function to disable the Buzzer through the GPIO.
 */
void Buzzer_off(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_Port,Buzzer_Pin,0);
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	62 e0       	ldi	r22, 0x02	; 2
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <main>:
uint32 g_tick = 0;
uint8 Flag_Of_locking = 1;


int main(void)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	63 97       	sbiw	r28, 0x13	; 19
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7); //Global Interrupt Enable to request interrupt
     d06:	af e5       	ldi	r26, 0x5F	; 95
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ef e5       	ldi	r30, 0x5F	; 95
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 68       	ori	r24, 0x80	; 128
     d12:	8c 93       	st	X, r24

	UART_ConfigType Uart;
	Uart.baud_rate = 9600;
     d14:	80 e8       	ldi	r24, 0x80	; 128
     d16:	95 e2       	ldi	r25, 0x25	; 37
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	8e 83       	std	Y+6, r24	; 0x06
     d1e:	9f 83       	std	Y+7, r25	; 0x07
     d20:	a8 87       	std	Y+8, r26	; 0x08
     d22:	b9 87       	std	Y+9, r27	; 0x09
	Uart.bit_data = Data_8bit;
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8b 83       	std	Y+3, r24	; 0x03
	Uart.parity = Disable_Parity;
     d28:	1c 82       	std	Y+4, r1	; 0x04
	Uart.stop_bit = Stop_1bit;
     d2a:	1d 82       	std	Y+5, r1	; 0x05
	UART_init(&Uart);
     d2c:	ce 01       	movw	r24, r28
     d2e:	03 96       	adiw	r24, 0x03	; 3
     d30:	0e 94 0e 10 	call	0x201c	; 0x201c <UART_init>

	TWI_ConfigType configTWI = {0b00000010,Bit_Rate_400K};
     d34:	9e 01       	movw	r18, r28
     d36:	26 5f       	subi	r18, 0xF6	; 246
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	38 8b       	std	Y+16, r19	; 0x10
     d3c:	2f 87       	std	Y+15, r18	; 0x0f
     d3e:	89 e6       	ldi	r24, 0x69	; 105
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	9a 8b       	std	Y+18, r25	; 0x12
     d44:	89 8b       	std	Y+17, r24	; 0x11
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	9b 8b       	std	Y+19, r25	; 0x13
     d4a:	e9 89       	ldd	r30, Y+17	; 0x11
     d4c:	fa 89       	ldd	r31, Y+18	; 0x12
     d4e:	00 80       	ld	r0, Z
     d50:	29 89       	ldd	r18, Y+17	; 0x11
     d52:	3a 89       	ldd	r19, Y+18	; 0x12
     d54:	2f 5f       	subi	r18, 0xFF	; 255
     d56:	3f 4f       	sbci	r19, 0xFF	; 255
     d58:	3a 8b       	std	Y+18, r19	; 0x12
     d5a:	29 8b       	std	Y+17, r18	; 0x11
     d5c:	ef 85       	ldd	r30, Y+15	; 0x0f
     d5e:	f8 89       	ldd	r31, Y+16	; 0x10
     d60:	00 82       	st	Z, r0
     d62:	2f 85       	ldd	r18, Y+15	; 0x0f
     d64:	38 89       	ldd	r19, Y+16	; 0x10
     d66:	2f 5f       	subi	r18, 0xFF	; 255
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	38 8b       	std	Y+16, r19	; 0x10
     d6c:	2f 87       	std	Y+15, r18	; 0x0f
     d6e:	3b 89       	ldd	r19, Y+19	; 0x13
     d70:	31 50       	subi	r19, 0x01	; 1
     d72:	3b 8b       	std	Y+19, r19	; 0x13
     d74:	8b 89       	ldd	r24, Y+19	; 0x13
     d76:	88 23       	and	r24, r24
     d78:	41 f7       	brne	.-48     	; 0xd4a <main+0x58>
	TWI_init(&configTWI);
     d7a:	ce 01       	movw	r24, r28
     d7c:	0a 96       	adiw	r24, 0x0a	; 10
     d7e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <TWI_init>

	Buzzer_init();
     d82:	0e 94 50 06 	call	0xca0	; 0xca0 <Buzzer_init>
	DcMotor_Init();
     d86:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <DcMotor_Init>

	uint8 Check_Matching = UNMATCHED_PASS; //initial with unmatched to initially enter Check_Passwords_Matching() function
     d8a:	1a 82       	std	Y+2, r1	; 0x02



	while(1)
	{
		if(Check_Matching == UNMATCHED_PASS) //before saving password, passwords could be unmatched many times, so we enter this function (Check_Passwords_Matching())
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	88 23       	and	r24, r24
     d90:	21 f4       	brne	.+8      	; 0xd9a <main+0xa8>
			// after saving password, passwords could be unmatched three times only, so we enter Check_Password() function in the switch statement
		{
			Check_Matching = Check_Passwords_Matching();
     d92:	0e 94 12 07 	call	0xe24	; 0xe24 <Check_Passwords_Matching>
     d96:	8a 83       	std	Y+2, r24	; 0x02
     d98:	f9 cf       	rjmp	.-14     	; 0xd8c <main+0x9a>
		}
		else if(Check_Matching == MATCHED_PASS) //will enter the if condition after checking that the two passwords matched(after storing password in eeprom)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	b1 f7       	brne	.-20     	; 0xd8c <main+0x9a>
		{
			UART_sendByte(MC2_READY);
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
			choose_function = UART_recieveByte(); //recieve from MC1 which function to enter
     da6:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
     daa:	89 83       	std	Y+1, r24	; 0x01

			switch (choose_function)
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	e8 2f       	mov	r30, r24
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	fe 87       	std	Y+14, r31	; 0x0e
     db4:	ed 87       	std	Y+13, r30	; 0x0d
     db6:	2d 85       	ldd	r18, Y+13	; 0x0d
     db8:	3e 85       	ldd	r19, Y+14	; 0x0e
     dba:	24 30       	cpi	r18, 0x04	; 4
     dbc:	31 05       	cpc	r19, r1
     dbe:	31 f1       	breq	.+76     	; 0xe0c <main+0x11a>
     dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc4:	85 30       	cpi	r24, 0x05	; 5
     dc6:	91 05       	cpc	r25, r1
     dc8:	5c f4       	brge	.+22     	; 0xde0 <main+0xee>
     dca:	ed 85       	ldd	r30, Y+13	; 0x0d
     dcc:	fe 85       	ldd	r31, Y+14	; 0x0e
     dce:	e2 30       	cpi	r30, 0x02	; 2
     dd0:	f1 05       	cpc	r31, r1
     dd2:	b1 f0       	breq	.+44     	; 0xe00 <main+0x10e>
     dd4:	2d 85       	ldd	r18, Y+13	; 0x0d
     dd6:	3e 85       	ldd	r19, Y+14	; 0x0e
     dd8:	23 30       	cpi	r18, 0x03	; 3
     dda:	31 05       	cpc	r19, r1
     ddc:	a1 f0       	breq	.+40     	; 0xe06 <main+0x114>
     dde:	d6 cf       	rjmp	.-84     	; 0xd8c <main+0x9a>
     de0:	8d 85       	ldd	r24, Y+13	; 0x0d
     de2:	9e 85       	ldd	r25, Y+14	; 0x0e
     de4:	86 30       	cpi	r24, 0x06	; 6
     de6:	91 05       	cpc	r25, r1
     de8:	b9 f0       	breq	.+46     	; 0xe18 <main+0x126>
     dea:	ed 85       	ldd	r30, Y+13	; 0x0d
     dec:	fe 85       	ldd	r31, Y+14	; 0x0e
     dee:	e6 30       	cpi	r30, 0x06	; 6
     df0:	f1 05       	cpc	r31, r1
     df2:	7c f0       	brlt	.+30     	; 0xe12 <main+0x120>
     df4:	2d 85       	ldd	r18, Y+13	; 0x0d
     df6:	3e 85       	ldd	r19, Y+14	; 0x0e
     df8:	27 30       	cpi	r18, 0x07	; 7
     dfa:	31 05       	cpc	r19, r1
     dfc:	81 f0       	breq	.+32     	; 0xe1e <main+0x12c>
     dfe:	c6 cf       	rjmp	.-116    	; 0xd8c <main+0x9a>
			{
			case CHECK_PASSWORD:
				Check_Password();
     e00:	0e 94 14 08 	call	0x1028	; 0x1028 <Check_Password>
     e04:	c3 cf       	rjmp	.-122    	; 0xd8c <main+0x9a>
				break;

			case ALERT:
				Alert();
     e06:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <Alert>
     e0a:	c0 cf       	rjmp	.-128    	; 0xd8c <main+0x9a>
				break;

			case MOTOR_UNLOCKING:
				Motor_Unlock();
     e0c:	0e 94 23 0a 	call	0x1446	; 0x1446 <Motor_Unlock>
     e10:	bd cf       	rjmp	.-134    	; 0xd8c <main+0x9a>
				break;

			case MOTOR_LOCKING:
				Motor_lock();
     e12:	0e 94 3c 0a 	call	0x1478	; 0x1478 <Motor_lock>
     e16:	ba cf       	rjmp	.-140    	; 0xd8c <main+0x9a>
				break;

			case MOTOR_STOP:
				Motor_Stop();
     e18:	0e 94 55 0a 	call	0x14aa	; 0x14aa <Motor_Stop>
     e1c:	b7 cf       	rjmp	.-146    	; 0xd8c <main+0x9a>
				break;

			case CHECK_PASSWORDS_MATCHING:
				Check_Passwords_Matching();
     e1e:	0e 94 12 07 	call	0xe24	; 0xe24 <Check_Passwords_Matching>
     e22:	b4 cf       	rjmp	.-152    	; 0xd8c <main+0x9a>

00000e24 <Check_Passwords_Matching>:




uint8 Check_Passwords_Matching(void)
{
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	6a 97       	sbiw	r28, 0x1a	; 26
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
	uint8 i,pass1[5],pass2[5];
	for(i=0 ; i<5 ; i++) //recieve first password
     e3c:	1f 86       	std	Y+15, r1	; 0x0f
     e3e:	12 c0       	rjmp	.+36     	; 0xe64 <Check_Passwords_Matching+0x40>
	{
		UART_sendByte(MC2_READY);
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
		pass1[i]=UART_recieveByte();
     e46:	8f 85       	ldd	r24, Y+15	; 0x0f
     e48:	08 2f       	mov	r16, r24
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
     e50:	28 2f       	mov	r18, r24
     e52:	ce 01       	movw	r24, r28
     e54:	40 96       	adiw	r24, 0x10	; 16
     e56:	fc 01       	movw	r30, r24
     e58:	e0 0f       	add	r30, r16
     e5a:	f1 1f       	adc	r31, r17
     e5c:	20 83       	st	Z, r18


uint8 Check_Passwords_Matching(void)
{
	uint8 i,pass1[5],pass2[5];
	for(i=0 ; i<5 ; i++) //recieve first password
     e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e60:	8f 5f       	subi	r24, 0xFF	; 255
     e62:	8f 87       	std	Y+15, r24	; 0x0f
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	85 30       	cpi	r24, 0x05	; 5
     e68:	58 f3       	brcs	.-42     	; 0xe40 <Check_Passwords_Matching+0x1c>
	{
		UART_sendByte(MC2_READY);
		pass1[i]=UART_recieveByte();
	}

	for(i=0 ; i<5 ; i++) //recieve second password
     e6a:	1f 86       	std	Y+15, r1	; 0x0f
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <Check_Passwords_Matching+0x6e>
	{
		UART_sendByte(MC2_READY);
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
		pass2[i]=UART_recieveByte();
     e74:	8f 85       	ldd	r24, Y+15	; 0x0f
     e76:	08 2f       	mov	r16, r24
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
     e7e:	28 2f       	mov	r18, r24
     e80:	ce 01       	movw	r24, r28
     e82:	45 96       	adiw	r24, 0x15	; 21
     e84:	fc 01       	movw	r30, r24
     e86:	e0 0f       	add	r30, r16
     e88:	f1 1f       	adc	r31, r17
     e8a:	20 83       	st	Z, r18
	{
		UART_sendByte(MC2_READY);
		pass1[i]=UART_recieveByte();
	}

	for(i=0 ; i<5 ; i++) //recieve second password
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	8f 87       	std	Y+15, r24	; 0x0f
     e92:	8f 85       	ldd	r24, Y+15	; 0x0f
     e94:	85 30       	cpi	r24, 0x05	; 5
     e96:	58 f3       	brcs	.-42     	; 0xe6e <Check_Passwords_Matching+0x4a>
	{
		UART_sendByte(MC2_READY);
		pass2[i]=UART_recieveByte();
	}

	for(i=0 ; i<5 ; i++) //check that the two passwords are equal
     e98:	1f 86       	std	Y+15, r1	; 0x0f
     e9a:	20 c0       	rjmp	.+64     	; 0xedc <Check_Passwords_Matching+0xb8>
	{
		if(pass1[i] != pass2[i])
     e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	ce 01       	movw	r24, r28
     ea4:	40 96       	adiw	r24, 0x10	; 16
     ea6:	fc 01       	movw	r30, r24
     ea8:	e2 0f       	add	r30, r18
     eaa:	f3 1f       	adc	r31, r19
     eac:	40 81       	ld	r20, Z
     eae:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	ce 01       	movw	r24, r28
     eb6:	45 96       	adiw	r24, 0x15	; 21
     eb8:	fc 01       	movw	r30, r24
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	80 81       	ld	r24, Z
     ec0:	48 17       	cp	r20, r24
     ec2:	49 f0       	breq	.+18     	; 0xed6 <Check_Passwords_Matching+0xb2>
		{
			while(UART_recieveByte() != MC1_READY){}
     ec4:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
     ec8:	80 3f       	cpi	r24, 0xF0	; 240
     eca:	e1 f7       	brne	.-8      	; 0xec4 <Check_Passwords_Matching+0xa0>
			UART_sendByte(UNMATCHED_PASS);
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
			return UNMATCHED_PASS;
     ed2:	1a 8e       	std	Y+26, r1	; 0x1a
     ed4:	9d c0       	rjmp	.+314    	; 0x1010 <Check_Passwords_Matching+0x1ec>
	{
		UART_sendByte(MC2_READY);
		pass2[i]=UART_recieveByte();
	}

	for(i=0 ; i<5 ; i++) //check that the two passwords are equal
     ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	8f 87       	std	Y+15, r24	; 0x0f
     edc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ede:	85 30       	cpi	r24, 0x05	; 5
     ee0:	e8 f2       	brcs	.-70     	; 0xe9c <Check_Passwords_Matching+0x78>
			UART_sendByte(UNMATCHED_PASS);
			return UNMATCHED_PASS;
		}
	}

	for(i=0; i<5; i++) //store password in eeprom after checking that the two passwords are matched
     ee2:	1f 86       	std	Y+15, r1	; 0x0f
     ee4:	88 c0       	rjmp	.+272    	; 0xff6 <Check_Passwords_Matching+0x1d2>
	{
		EEPROM_writeByte(0x0311+i, pass1[i]);
     ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	8f 5e       	subi	r24, 0xEF	; 239
     eee:	9c 4f       	sbci	r25, 0xFC	; 252
     ef0:	ac 01       	movw	r20, r24
     ef2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	ce 01       	movw	r24, r28
     efa:	40 96       	adiw	r24, 0x10	; 16
     efc:	fc 01       	movw	r30, r24
     efe:	e2 0f       	add	r30, r18
     f00:	f3 1f       	adc	r31, r19
     f02:	20 81       	ld	r18, Z
     f04:	ca 01       	movw	r24, r20
     f06:	62 2f       	mov	r22, r18
     f08:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <EEPROM_writeByte>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	a0 e2       	ldi	r26, 0x20	; 32
     f12:	b1 e4       	ldi	r27, 0x41	; 65
     f14:	8b 87       	std	Y+11, r24	; 0x0b
     f16:	9c 87       	std	Y+12, r25	; 0x0c
     f18:	ad 87       	std	Y+13, r26	; 0x0d
     f1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f20:	8d 85       	ldd	r24, Y+13	; 0x0d
     f22:	9e 85       	ldd	r25, Y+14	; 0x0e
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	4a ef       	ldi	r20, 0xFA	; 250
     f2a:	54 e4       	ldi	r21, 0x44	; 68
     f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	8f 83       	std	Y+7, r24	; 0x07
     f36:	98 87       	std	Y+8, r25	; 0x08
     f38:	a9 87       	std	Y+9, r26	; 0x09
     f3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f3c:	6f 81       	ldd	r22, Y+7	; 0x07
     f3e:	78 85       	ldd	r23, Y+8	; 0x08
     f40:	89 85       	ldd	r24, Y+9	; 0x09
     f42:	9a 85       	ldd	r25, Y+10	; 0x0a
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e8       	ldi	r20, 0x80	; 128
     f4a:	5f e3       	ldi	r21, 0x3F	; 63
     f4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f50:	88 23       	and	r24, r24
     f52:	2c f4       	brge	.+10     	; 0xf5e <Check_Passwords_Matching+0x13a>
		__ticks = 1;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9e 83       	std	Y+6, r25	; 0x06
     f5a:	8d 83       	std	Y+5, r24	; 0x05
     f5c:	3f c0       	rjmp	.+126    	; 0xfdc <Check_Passwords_Matching+0x1b8>
	else if (__tmp > 65535)
     f5e:	6f 81       	ldd	r22, Y+7	; 0x07
     f60:	78 85       	ldd	r23, Y+8	; 0x08
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	3f ef       	ldi	r19, 0xFF	; 255
     f6a:	4f e7       	ldi	r20, 0x7F	; 127
     f6c:	57 e4       	ldi	r21, 0x47	; 71
     f6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f72:	18 16       	cp	r1, r24
     f74:	4c f5       	brge	.+82     	; 0xfc8 <Check_Passwords_Matching+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f76:	6b 85       	ldd	r22, Y+11	; 0x0b
     f78:	7c 85       	ldd	r23, Y+12	; 0x0c
     f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e2       	ldi	r20, 0x20	; 32
     f84:	51 e4       	ldi	r21, 0x41	; 65
     f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	0f c0       	rjmp	.+30     	; 0xfbe <Check_Passwords_Matching+0x19a>
     fa0:	88 ec       	ldi	r24, 0xC8	; 200
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9c 83       	std	Y+4, r25	; 0x04
     fa6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <Check_Passwords_Matching+0x188>
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	9e 83       	std	Y+6, r25	; 0x06
     fbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	69 f7       	brne	.-38     	; 0xfa0 <Check_Passwords_Matching+0x17c>
     fc6:	14 c0       	rjmp	.+40     	; 0xff0 <Check_Passwords_Matching+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc8:	6f 81       	ldd	r22, Y+7	; 0x07
     fca:	78 85       	ldd	r23, Y+8	; 0x08
     fcc:	89 85       	ldd	r24, Y+9	; 0x09
     fce:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	9e 83       	std	Y+6, r25	; 0x06
     fda:	8d 83       	std	Y+5, r24	; 0x05
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <Check_Passwords_Matching+0x1c4>
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
			UART_sendByte(UNMATCHED_PASS);
			return UNMATCHED_PASS;
		}
	}

	for(i=0; i<5; i++) //store password in eeprom after checking that the two passwords are matched
     ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	8f 87       	std	Y+15, r24	; 0x0f
     ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff8:	85 30       	cpi	r24, 0x05	; 5
     ffa:	08 f4       	brcc	.+2      	; 0xffe <Check_Passwords_Matching+0x1da>
     ffc:	74 cf       	rjmp	.-280    	; 0xee6 <Check_Passwords_Matching+0xc2>
	{
		EEPROM_writeByte(0x0311+i, pass1[i]);
		_delay_ms(10);
	}

	while(UART_recieveByte() != MC1_READY){}
     ffe:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
    1002:	80 3f       	cpi	r24, 0xF0	; 240
    1004:	e1 f7       	brne	.-8      	; 0xffe <Check_Passwords_Matching+0x1da>
	UART_sendByte(MATCHED_PASS);
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
	return MATCHED_PASS;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	8a 8f       	std	Y+26, r24	; 0x1a
    1010:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
    1012:	6a 96       	adiw	r28, 0x1a	; 26
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <Check_Password>:




void Check_Password(void)
{
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	69 97       	sbiw	r28, 0x19	; 25
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
	uint8 i,pass[5],pass2[5];

	for(i = 0; i < 5; i++) //taking password from MC1(from user)
    1040:	1f 86       	std	Y+15, r1	; 0x0f
    1042:	12 c0       	rjmp	.+36     	; 0x1068 <Check_Password+0x40>
	{
		UART_sendByte(MC2_READY);
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
		pass2[i] = UART_recieveByte();
    104a:	8f 85       	ldd	r24, Y+15	; 0x0f
    104c:	08 2f       	mov	r16, r24
    104e:	10 e0       	ldi	r17, 0x00	; 0
    1050:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
    1054:	28 2f       	mov	r18, r24
    1056:	ce 01       	movw	r24, r28
    1058:	45 96       	adiw	r24, 0x15	; 21
    105a:	fc 01       	movw	r30, r24
    105c:	e0 0f       	add	r30, r16
    105e:	f1 1f       	adc	r31, r17
    1060:	20 83       	st	Z, r18

void Check_Password(void)
{
	uint8 i,pass[5],pass2[5];

	for(i = 0; i < 5; i++) //taking password from MC1(from user)
    1062:	8f 85       	ldd	r24, Y+15	; 0x0f
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	8f 87       	std	Y+15, r24	; 0x0f
    1068:	8f 85       	ldd	r24, Y+15	; 0x0f
    106a:	85 30       	cpi	r24, 0x05	; 5
    106c:	58 f3       	brcs	.-42     	; 0x1044 <Check_Password+0x1c>
	{
		UART_sendByte(MC2_READY);
		pass2[i] = UART_recieveByte();
	}

	for(i = 0; i < 5; i++) //taking password from eeprom
    106e:	1f 86       	std	Y+15, r1	; 0x0f
    1070:	87 c0       	rjmp	.+270    	; 0x1180 <Check_Password+0x158>
	{
		EEPROM_readByte(0x0311+i, pass+i);
    1072:	8f 85       	ldd	r24, Y+15	; 0x0f
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	8f 5e       	subi	r24, 0xEF	; 239
    107a:	9c 4f       	sbci	r25, 0xFC	; 252
    107c:	ac 01       	movw	r20, r24
    107e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9e 01       	movw	r18, r28
    1086:	20 5f       	subi	r18, 0xF0	; 240
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
    108a:	28 0f       	add	r18, r24
    108c:	39 1f       	adc	r19, r25
    108e:	ca 01       	movw	r24, r20
    1090:	b9 01       	movw	r22, r18
    1092:	0e 94 39 0b 	call	0x1672	; 0x1672 <EEPROM_readByte>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e2       	ldi	r26, 0x20	; 32
    109c:	b1 e4       	ldi	r27, 0x41	; 65
    109e:	8b 87       	std	Y+11, r24	; 0x0b
    10a0:	9c 87       	std	Y+12, r25	; 0x0c
    10a2:	ad 87       	std	Y+13, r26	; 0x0d
    10a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4a ef       	ldi	r20, 0xFA	; 250
    10b4:	54 e4       	ldi	r21, 0x44	; 68
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	8f 83       	std	Y+7, r24	; 0x07
    10c0:	98 87       	std	Y+8, r25	; 0x08
    10c2:	a9 87       	std	Y+9, r26	; 0x09
    10c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e8       	ldi	r20, 0x80	; 128
    10d4:	5f e3       	ldi	r21, 0x3F	; 63
    10d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10da:	88 23       	and	r24, r24
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <Check_Password+0xc0>
		__ticks = 1;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9e 83       	std	Y+6, r25	; 0x06
    10e4:	8d 83       	std	Y+5, r24	; 0x05
    10e6:	3f c0       	rjmp	.+126    	; 0x1166 <Check_Password+0x13e>
	else if (__tmp > 65535)
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	3f ef       	ldi	r19, 0xFF	; 255
    10f4:	4f e7       	ldi	r20, 0x7F	; 127
    10f6:	57 e4       	ldi	r21, 0x47	; 71
    10f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fc:	18 16       	cp	r1, r24
    10fe:	4c f5       	brge	.+82     	; 0x1152 <Check_Password+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1100:	6b 85       	ldd	r22, Y+11	; 0x0b
    1102:	7c 85       	ldd	r23, Y+12	; 0x0c
    1104:	8d 85       	ldd	r24, Y+13	; 0x0d
    1106:	9e 85       	ldd	r25, Y+14	; 0x0e
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e2       	ldi	r20, 0x20	; 32
    110e:	51 e4       	ldi	r21, 0x41	; 65
    1110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <Check_Password+0x120>
    112a:	88 ec       	ldi	r24, 0xC8	; 200
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <Check_Password+0x10e>
    113a:	9c 83       	std	Y+4, r25	; 0x04
    113c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	9e 83       	std	Y+6, r25	; 0x06
    1146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	69 f7       	brne	.-38     	; 0x112a <Check_Password+0x102>
    1150:	14 c0       	rjmp	.+40     	; 0x117a <Check_Password+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1152:	6f 81       	ldd	r22, Y+7	; 0x07
    1154:	78 85       	ldd	r23, Y+8	; 0x08
    1156:	89 85       	ldd	r24, Y+9	; 0x09
    1158:	9a 85       	ldd	r25, Y+10	; 0x0a
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <Check_Password+0x14a>
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte(MC2_READY);
		pass2[i] = UART_recieveByte();
	}

	for(i = 0; i < 5; i++) //taking password from eeprom
    117a:	8f 85       	ldd	r24, Y+15	; 0x0f
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	8f 87       	std	Y+15, r24	; 0x0f
    1180:	8f 85       	ldd	r24, Y+15	; 0x0f
    1182:	85 30       	cpi	r24, 0x05	; 5
    1184:	08 f4       	brcc	.+2      	; 0x1188 <Check_Password+0x160>
    1186:	75 cf       	rjmp	.-278    	; 0x1072 <Check_Password+0x4a>
	{
		EEPROM_readByte(0x0311+i, pass+i);
		_delay_ms(10);
	}

	for(i = 0; i < 5; i++) //comparing the two passwords
    1188:	1f 86       	std	Y+15, r1	; 0x0f
    118a:	1f c0       	rjmp	.+62     	; 0x11ca <Check_Password+0x1a2>
	{
		if(pass[i] != pass2[i])
    118c:	8f 85       	ldd	r24, Y+15	; 0x0f
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	ce 01       	movw	r24, r28
    1194:	40 96       	adiw	r24, 0x10	; 16
    1196:	fc 01       	movw	r30, r24
    1198:	e2 0f       	add	r30, r18
    119a:	f3 1f       	adc	r31, r19
    119c:	40 81       	ld	r20, Z
    119e:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	ce 01       	movw	r24, r28
    11a6:	45 96       	adiw	r24, 0x15	; 21
    11a8:	fc 01       	movw	r30, r24
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	80 81       	ld	r24, Z
    11b0:	48 17       	cp	r20, r24
    11b2:	41 f0       	breq	.+16     	; 0x11c4 <Check_Password+0x19c>
		{
			while(UART_recieveByte() != MC1_READY){}
    11b4:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
    11b8:	80 3f       	cpi	r24, 0xF0	; 240
    11ba:	e1 f7       	brne	.-8      	; 0x11b4 <Check_Password+0x18c>
			UART_sendByte(UNMATCHED_PASS);
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <Check_Password+0x1b6>
	{
		EEPROM_readByte(0x0311+i, pass+i);
		_delay_ms(10);
	}

	for(i = 0; i < 5; i++) //comparing the two passwords
    11c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	8f 87       	std	Y+15, r24	; 0x0f
    11ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    11cc:	85 30       	cpi	r24, 0x05	; 5
    11ce:	f0 f2       	brcs	.-68     	; 0x118c <Check_Password+0x164>
			UART_sendByte(UNMATCHED_PASS);
			return;
		}
	}

	while(UART_recieveByte() != MC1_READY){}
    11d0:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
    11d4:	80 3f       	cpi	r24, 0xF0	; 240
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <Check_Password+0x1a8>
	UART_sendByte(MATCHED_PASS);
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
}
    11de:	69 96       	adiw	r28, 0x19	; 25
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <Alert>:




void Alert(void)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	2f 97       	sbiw	r28, 0x0f	; 15
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	Buzzer_on();
    1208:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Buzzer_on>
	for(i = 0; i < 12; i++)//delay for one minute = 12*5sec.
    120c:	1f 86       	std	Y+15, r1	; 0x0f
    120e:	75 c0       	rjmp	.+234    	; 0x12fa <Alert+0x106>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e4       	ldi	r25, 0x40	; 64
    1214:	ac e9       	ldi	r26, 0x9C	; 156
    1216:	b5 e4       	ldi	r27, 0x45	; 69
    1218:	8b 87       	std	Y+11, r24	; 0x0b
    121a:	9c 87       	std	Y+12, r25	; 0x0c
    121c:	ad 87       	std	Y+13, r26	; 0x0d
    121e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1220:	6b 85       	ldd	r22, Y+11	; 0x0b
    1222:	7c 85       	ldd	r23, Y+12	; 0x0c
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	4a ef       	ldi	r20, 0xFA	; 250
    122e:	54 e4       	ldi	r21, 0x44	; 68
    1230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	8f 83       	std	Y+7, r24	; 0x07
    123a:	98 87       	std	Y+8, r25	; 0x08
    123c:	a9 87       	std	Y+9, r26	; 0x09
    123e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1240:	6f 81       	ldd	r22, Y+7	; 0x07
    1242:	78 85       	ldd	r23, Y+8	; 0x08
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1254:	88 23       	and	r24, r24
    1256:	2c f4       	brge	.+10     	; 0x1262 <Alert+0x6e>
		__ticks = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <Alert+0xec>
	else if (__tmp > 65535)
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1276:	18 16       	cp	r1, r24
    1278:	4c f5       	brge	.+82     	; 0x12cc <Alert+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127a:	6b 85       	ldd	r22, Y+11	; 0x0b
    127c:	7c 85       	ldd	r23, Y+12	; 0x0c
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	51 e4       	ldi	r21, 0x41	; 65
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9e 83       	std	Y+6, r25	; 0x06
    12a0:	8d 83       	std	Y+5, r24	; 0x05
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <Alert+0xce>
    12a4:	88 ec       	ldi	r24, 0xC8	; 200
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <Alert+0xbc>
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <Alert+0xb0>
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <Alert+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <Alert+0xf8>
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
    12f8:	8f 87       	std	Y+15, r24	; 0x0f
    12fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    12fc:	8c 30       	cpi	r24, 0x0C	; 12
    12fe:	08 f4       	brcc	.+2      	; 0x1302 <Alert+0x10e>
    1300:	87 cf       	rjmp	.-242    	; 0x1210 <Alert+0x1c>
	{
		_delay_ms(5000); //we want all devices of system to stop during alert, so we use delay not timer1
	}
	Buzzer_off();
    1302:	0e 94 6d 06 	call	0xcda	; 0xcda <Buzzer_off>
}
    1306:	2f 96       	adiw	r28, 0x0f	; 15
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <Timer_On>:




void Timer_On(void(*a_ptr)(void)) //send to timer needed call_back function
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	28 97       	sbiw	r28, 0x08	; 8
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	98 87       	std	Y+8, r25	; 0x08
    132e:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_ConfigType Config_Timer;
	Config_Timer.prescaler = F_CPU_8;
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	8d 83       	std	Y+5, r24	; 0x05
	Config_Timer.mode = compare;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	8e 83       	std	Y+6, r24	; 0x06
	Config_Timer.initial_value = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	Config_Timer.compare_value = 10000; //which means interupt every 10ms
    1340:	80 e1       	ldi	r24, 0x10	; 16
    1342:	97 e2       	ldi	r25, 0x27	; 39
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
	Timer1_init(&Config_Timer);
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <Timer1_init>
	Timer1_setCallBack(a_ptr);
    1350:	8f 81       	ldd	r24, Y+7	; 0x07
    1352:	98 85       	ldd	r25, Y+8	; 0x08
    1354:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <Timer1_setCallBack>
}
    1358:	28 96       	adiw	r28, 0x08	; 8
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <Timer_Door_locking_unlocking>:




void Timer_Door_locking_unlocking(void)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1372:	80 91 6c 01 	lds	r24, 0x016C
    1376:	90 91 6d 01 	lds	r25, 0x016D
    137a:	a0 91 6e 01 	lds	r26, 0x016E
    137e:	b0 91 6f 01 	lds	r27, 0x016F
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	a1 1d       	adc	r26, r1
    1386:	b1 1d       	adc	r27, r1
    1388:	80 93 6c 01 	sts	0x016C, r24
    138c:	90 93 6d 01 	sts	0x016D, r25
    1390:	a0 93 6e 01 	sts	0x016E, r26
    1394:	b0 93 6f 01 	sts	0x016F, r27
	if(g_tick == 1500)  //Enter if condition every 1500*10ms(interrupt time = 10ms) = 15seconds
    1398:	80 91 6c 01 	lds	r24, 0x016C
    139c:	90 91 6d 01 	lds	r25, 0x016D
    13a0:	a0 91 6e 01 	lds	r26, 0x016E
    13a4:	b0 91 6f 01 	lds	r27, 0x016F
    13a8:	8c 3d       	cpi	r24, 0xDC	; 220
    13aa:	25 e0       	ldi	r18, 0x05	; 5
    13ac:	92 07       	cpc	r25, r18
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	a2 07       	cpc	r26, r18
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	b2 07       	cpc	r27, r18
    13b6:	69 f4       	brne	.+26     	; 0x13d2 <Timer_Door_locking_unlocking+0x68>
	{
		g_tick = 0;
    13b8:	10 92 6c 01 	sts	0x016C, r1
    13bc:	10 92 6d 01 	sts	0x016D, r1
    13c0:	10 92 6e 01 	sts	0x016E, r1
    13c4:	10 92 6f 01 	sts	0x016F, r1
		Timer1_deInit(); //Turn off timer after displaying on screen for 15seconds
    13c8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <Timer1_deInit>
		Flag_Of_locking = 1; //To exit while loop of Door_unlocking() function
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 68 01 	sts	0x0168, r24
	}
}
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <Timer_Door_Open>:




void Timer_Door_Open(void)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    13e0:	80 91 6c 01 	lds	r24, 0x016C
    13e4:	90 91 6d 01 	lds	r25, 0x016D
    13e8:	a0 91 6e 01 	lds	r26, 0x016E
    13ec:	b0 91 6f 01 	lds	r27, 0x016F
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	a1 1d       	adc	r26, r1
    13f4:	b1 1d       	adc	r27, r1
    13f6:	80 93 6c 01 	sts	0x016C, r24
    13fa:	90 93 6d 01 	sts	0x016D, r25
    13fe:	a0 93 6e 01 	sts	0x016E, r26
    1402:	b0 93 6f 01 	sts	0x016F, r27
	if(g_tick == 300)  //Enter if condition every 300*10ms(interrupt time = 10ms) = 3seconds
    1406:	80 91 6c 01 	lds	r24, 0x016C
    140a:	90 91 6d 01 	lds	r25, 0x016D
    140e:	a0 91 6e 01 	lds	r26, 0x016E
    1412:	b0 91 6f 01 	lds	r27, 0x016F
    1416:	8c 32       	cpi	r24, 0x2C	; 44
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	92 07       	cpc	r25, r18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	a2 07       	cpc	r26, r18
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	b2 07       	cpc	r27, r18
    1424:	69 f4       	brne	.+26     	; 0x1440 <Timer_Door_Open+0x68>
	{
		g_tick = 0;
    1426:	10 92 6c 01 	sts	0x016C, r1
    142a:	10 92 6d 01 	sts	0x016D, r1
    142e:	10 92 6e 01 	sts	0x016E, r1
    1432:	10 92 6f 01 	sts	0x016F, r1
		Timer1_deInit(); //Turn off timer after displaying on screen for 15seconds
    1436:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <Timer1_deInit>
		Flag_Of_locking = 1; //To exit while loop of Door_unlocking() function
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	80 93 68 01 	sts	0x0168, r24
	}
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <Motor_Unlock>:




void Motor_Unlock(void)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	Timer_On(Timer_Door_locking_unlocking);
    144e:	85 eb       	ldi	r24, 0xB5	; 181
    1450:	99 e0       	ldi	r25, 0x09	; 9
    1452:	0e 94 8c 09 	call	0x1318	; 0x1318 <Timer_On>
	DcMotor_Rotate(CW,100);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	64 e6       	ldi	r22, 0x64	; 100
    145a:	0e 94 85 0a 	call	0x150a	; 0x150a <DcMotor_Rotate>
	Flag_Of_locking = 0;
    145e:	10 92 68 01 	sts	0x0168, r1
	while(Flag_Of_locking == 0){}
    1462:	80 91 68 01 	lds	r24, 0x0168
    1466:	88 23       	and	r24, r24
    1468:	e1 f3       	breq	.-8      	; 0x1462 <Motor_Unlock+0x1c>
	DcMotor_Rotate(STOP,0);
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	0e 94 85 0a 	call	0x150a	; 0x150a <DcMotor_Rotate>
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <Motor_lock>:



void Motor_lock(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
	Timer_On(Timer_Door_locking_unlocking);
    1480:	85 eb       	ldi	r24, 0xB5	; 181
    1482:	99 e0       	ldi	r25, 0x09	; 9
    1484:	0e 94 8c 09 	call	0x1318	; 0x1318 <Timer_On>
	DcMotor_Rotate(A_CW,100);
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	64 e6       	ldi	r22, 0x64	; 100
    148c:	0e 94 85 0a 	call	0x150a	; 0x150a <DcMotor_Rotate>
	Flag_Of_locking = 0;
    1490:	10 92 68 01 	sts	0x0168, r1
	while(Flag_Of_locking == 0){}
    1494:	80 91 68 01 	lds	r24, 0x0168
    1498:	88 23       	and	r24, r24
    149a:	e1 f3       	breq	.-8      	; 0x1494 <Motor_lock+0x1c>
	DcMotor_Rotate(STOP,0);
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	0e 94 85 0a 	call	0x150a	; 0x150a <DcMotor_Rotate>
}
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <Motor_Stop>:




void Motor_Stop(void)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	Timer_On(Timer_Door_Open);
    14b2:	8c ee       	ldi	r24, 0xEC	; 236
    14b4:	99 e0       	ldi	r25, 0x09	; 9
    14b6:	0e 94 8c 09 	call	0x1318	; 0x1318 <Timer_On>
	DcMotor_Rotate(STOP,0);
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	0e 94 85 0a 	call	0x150a	; 0x150a <DcMotor_Rotate>
	Flag_Of_locking = 0;
    14c2:	10 92 68 01 	sts	0x0168, r1
	while(Flag_Of_locking == 0){}
    14c6:	80 91 68 01 	lds	r24, 0x0168
    14ca:	88 23       	and	r24, r24
    14cc:	e1 f3       	breq	.-8      	; 0x14c6 <Motor_Stop+0x1c>
}
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <DcMotor_Init>:
/*
 * Description : Function to initialize the Motor driver
 * 1- Set the two pins of motor which are responsible for ClockWise,AntiClockWise,Stop the motor
 */
void DcMotor_Init(void)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORT_MOTOR,PIN0_MOTOR,PIN_OUTPUT);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 99 0b 	call	0x1732	; 0x1732 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_MOTOR,PIN1_MOTOR,PIN_OUTPUT);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 99 0b 	call	0x1732	; 0x1732 <GPIO_setupPinDirection>
	GPIO_writePin(PORT_MOTOR,PIN0_MOTOR,0); //to initially stop the motor
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
	GPIO_writePin(PORT_MOTOR,PIN1_MOTOR,0); //to initially stop the motor
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <DcMotor_Rotate>:
 * Description : Function to control the speed and rotation direction of the motor
 * 1-speed is controlled by PWM driver which sends signals to enable pin of motor
 * 2-rotation is controlled by the two pins of H-Bridge of the motor
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <DcMotor_Rotate+0x6>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02
	if(state == CW)
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	88 23       	and	r24, r24
    151c:	51 f5       	brne	.+84     	; 0x1572 <DcMotor_Rotate+0x68>
	{
		GPIO_writePin(PORT_MOTOR,PIN1_MOTOR,0);
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR,PIN0_MOTOR,1);
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	41 e0       	ldi	r20, 0x01	; 1
    152e:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
		PWM_Timer0_Start(speed*2.55); //equation to control motor from 0% to 100% speed i.e:100(max speed)*2.55 = 255(max duty)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	aa 27       	eor	r26, r26
    153a:	97 fd       	sbrc	r25, 7
    153c:	a0 95       	com	r26
    153e:	ba 2f       	mov	r27, r26
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	23 e3       	ldi	r18, 0x33	; 51
    1552:	33 e3       	ldi	r19, 0x33	; 51
    1554:	43 e2       	ldi	r20, 0x23	; 35
    1556:	50 e4       	ldi	r21, 0x40	; 64
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <PWM_Timer0_Start>
    1570:	3a c0       	rjmp	.+116    	; 0x15e6 <DcMotor_Rotate+0xdc>
	}
	else if(state == A_CW)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	51 f5       	brne	.+84     	; 0x15cc <DcMotor_Rotate+0xc2>
	{
		GPIO_writePin(PORT_MOTOR,PIN1_MOTOR,1);
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR,PIN0_MOTOR,0);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
		PWM_Timer0_Start(speed*2.55); //equation to control motor from 0% to 100% speed i.e:100(max speed)*2.55 = 255(max duty)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	aa 27       	eor	r26, r26
    1594:	97 fd       	sbrc	r25, 7
    1596:	a0 95       	com	r26
    1598:	ba 2f       	mov	r27, r26
    159a:	bc 01       	movw	r22, r24
    159c:	cd 01       	movw	r24, r26
    159e:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	23 e3       	ldi	r18, 0x33	; 51
    15ac:	33 e3       	ldi	r19, 0x33	; 51
    15ae:	43 e2       	ldi	r20, 0x23	; 35
    15b0:	50 e4       	ldi	r21, 0x40	; 64
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <PWM_Timer0_Start>
    15ca:	0d c0       	rjmp	.+26     	; 0x15e6 <DcMotor_Rotate+0xdc>
	}
	else if(state == STOP)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	51 f4       	brne	.+20     	; 0x15e6 <DcMotor_Rotate+0xdc>
	{
		GPIO_writePin(PORT_MOTOR,PIN1_MOTOR,0);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR,PIN0_MOTOR,0);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	0e 94 84 0c 	call	0x1908	; 0x1908 <GPIO_writePin>
	}


}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <EEPROM_writeByte+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <EEPROM_writeByte+0x8>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1602:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1606:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    160a:	88 30       	cpi	r24, 0x08	; 8
    160c:	11 f0       	breq	.+4      	; 0x1612 <EEPROM_writeByte+0x22>
        return ERROR;
    160e:	1c 82       	std	Y+4, r1	; 0x04
    1610:	28 c0       	rjmp	.+80     	; 0x1662 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	80 70       	andi	r24, 0x00	; 0
    1618:	97 70       	andi	r25, 0x07	; 7
    161a:	88 0f       	add	r24, r24
    161c:	89 2f       	mov	r24, r25
    161e:	88 1f       	adc	r24, r24
    1620:	99 0b       	sbc	r25, r25
    1622:	91 95       	neg	r25
    1624:	80 6a       	ori	r24, 0xA0	; 160
    1626:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    162a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    162e:	88 31       	cpi	r24, 0x18	; 24
    1630:	11 f0       	breq	.+4      	; 0x1636 <EEPROM_writeByte+0x46>
        return ERROR;
    1632:	1c 82       	std	Y+4, r1	; 0x04
    1634:	16 c0       	rjmp	.+44     	; 0x1662 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    163c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    1640:	88 32       	cpi	r24, 0x28	; 40
    1642:	11 f0       	breq	.+4      	; 0x1648 <EEPROM_writeByte+0x58>
        return ERROR;
    1644:	1c 82       	std	Y+4, r1	; 0x04
    1646:	0d c0       	rjmp	.+26     	; 0x1662 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    164e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    1652:	88 32       	cpi	r24, 0x28	; 40
    1654:	11 f0       	breq	.+4      	; 0x165a <EEPROM_writeByte+0x6a>
        return ERROR;
    1656:	1c 82       	std	Y+4, r1	; 0x04
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    165a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TWI_stop>

    return SUCCESS;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	8c 83       	std	Y+4, r24	; 0x04
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	00 d0       	rcall	.+0      	; 0x1678 <EEPROM_readByte+0x6>
    1678:	00 d0       	rcall	.+0      	; 0x167a <EEPROM_readByte+0x8>
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	7c 83       	std	Y+4, r23	; 0x04
    1686:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1688:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    168c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    1690:	88 30       	cpi	r24, 0x08	; 8
    1692:	11 f0       	breq	.+4      	; 0x1698 <EEPROM_readByte+0x26>
        return ERROR;
    1694:	1d 82       	std	Y+5, r1	; 0x05
    1696:	44 c0       	rjmp	.+136    	; 0x1720 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	80 70       	andi	r24, 0x00	; 0
    169e:	97 70       	andi	r25, 0x07	; 7
    16a0:	88 0f       	add	r24, r24
    16a2:	89 2f       	mov	r24, r25
    16a4:	88 1f       	adc	r24, r24
    16a6:	99 0b       	sbc	r25, r25
    16a8:	91 95       	neg	r25
    16aa:	80 6a       	ori	r24, 0xA0	; 160
    16ac:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16b0:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    16b4:	88 31       	cpi	r24, 0x18	; 24
    16b6:	11 f0       	breq	.+4      	; 0x16bc <EEPROM_readByte+0x4a>
        return ERROR;
    16b8:	1d 82       	std	Y+5, r1	; 0x05
    16ba:	32 c0       	rjmp	.+100    	; 0x1720 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16c2:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    16c6:	88 32       	cpi	r24, 0x28	; 40
    16c8:	11 f0       	breq	.+4      	; 0x16ce <EEPROM_readByte+0x5c>
        return ERROR;
    16ca:	1d 82       	std	Y+5, r1	; 0x05
    16cc:	29 c0       	rjmp	.+82     	; 0x1720 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    16ce:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    16d2:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    16d6:	80 31       	cpi	r24, 0x10	; 16
    16d8:	11 f0       	breq	.+4      	; 0x16de <EEPROM_readByte+0x6c>
        return ERROR;
    16da:	1d 82       	std	Y+5, r1	; 0x05
    16dc:	21 c0       	rjmp	.+66     	; 0x1720 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	80 70       	andi	r24, 0x00	; 0
    16e4:	97 70       	andi	r25, 0x07	; 7
    16e6:	88 0f       	add	r24, r24
    16e8:	89 2f       	mov	r24, r25
    16ea:	88 1f       	adc	r24, r24
    16ec:	99 0b       	sbc	r25, r25
    16ee:	91 95       	neg	r25
    16f0:	81 6a       	ori	r24, 0xA1	; 161
    16f2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    16f6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    16fa:	80 34       	cpi	r24, 0x40	; 64
    16fc:	11 f0       	breq	.+4      	; 0x1702 <EEPROM_readByte+0x90>
        return ERROR;
    16fe:	1d 82       	std	Y+5, r1	; 0x05
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1702:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <TWI_readByteWithNACK>
    1706:	eb 81       	ldd	r30, Y+3	; 0x03
    1708:	fc 81       	ldd	r31, Y+4	; 0x04
    170a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    170c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <TWI_getStatus>
    1710:	88 35       	cpi	r24, 0x58	; 88
    1712:	11 f0       	breq	.+4      	; 0x1718 <EEPROM_readByte+0xa6>
        return ERROR;
    1714:	1d 82       	std	Y+5, r1	; 0x05
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1718:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TWI_stop>

    return SUCCESS;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <GPIO_setupPinDirection+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <GPIO_setupPinDirection+0x8>
    173a:	0f 92       	push	r0
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	6a 83       	std	Y+2, r22	; 0x02
    1744:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	88 30       	cpi	r24, 0x08	; 8
    174a:	08 f0       	brcs	.+2      	; 0x174e <GPIO_setupPinDirection+0x1c>
    174c:	d5 c0       	rjmp	.+426    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	08 f0       	brcs	.+2      	; 0x1756 <GPIO_setupPinDirection+0x24>
    1754:	d1 c0       	rjmp	.+418    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3d 83       	std	Y+5, r19	; 0x05
    175e:	2c 83       	std	Y+4, r18	; 0x04
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <GPIO_setupPinDirection+0x3a>
    176a:	43 c0       	rjmp	.+134    	; 0x17f2 <GPIO_setupPinDirection+0xc0>
    176c:	2c 81       	ldd	r18, Y+4	; 0x04
    176e:	3d 81       	ldd	r19, Y+5	; 0x05
    1770:	22 30       	cpi	r18, 0x02	; 2
    1772:	31 05       	cpc	r19, r1
    1774:	2c f4       	brge	.+10     	; 0x1780 <GPIO_setupPinDirection+0x4e>
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	9d 81       	ldd	r25, Y+5	; 0x05
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	71 f0       	breq	.+28     	; 0x179a <GPIO_setupPinDirection+0x68>
    177e:	bc c0       	rjmp	.+376    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
    1780:	2c 81       	ldd	r18, Y+4	; 0x04
    1782:	3d 81       	ldd	r19, Y+5	; 0x05
    1784:	22 30       	cpi	r18, 0x02	; 2
    1786:	31 05       	cpc	r19, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <GPIO_setupPinDirection+0x5a>
    178a:	5f c0       	rjmp	.+190    	; 0x184a <GPIO_setupPinDirection+0x118>
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	91 05       	cpc	r25, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <GPIO_setupPinDirection+0x66>
    1796:	85 c0       	rjmp	.+266    	; 0x18a2 <GPIO_setupPinDirection+0x170>
    1798:	af c0       	rjmp	.+350    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	a1 f4       	brne	.+40     	; 0x17c8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17a0:	aa e3       	ldi	r26, 0x3A	; 58
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ea e3       	ldi	r30, 0x3A	; 58
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <GPIO_setupPinDirection+0x8c>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <GPIO_setupPinDirection+0x88>
    17c2:	84 2b       	or	r24, r20
    17c4:	8c 93       	st	X, r24
    17c6:	98 c0       	rjmp	.+304    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17c8:	aa e3       	ldi	r26, 0x3A	; 58
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ea e3       	ldi	r30, 0x3A	; 58
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <GPIO_setupPinDirection+0xb4>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <GPIO_setupPinDirection+0xb0>
    17ea:	80 95       	com	r24
    17ec:	84 23       	and	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	83 c0       	rjmp	.+262    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	a1 f4       	brne	.+40     	; 0x1820 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17f8:	a7 e3       	ldi	r26, 0x37	; 55
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e7 e3       	ldi	r30, 0x37	; 55
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <GPIO_setupPinDirection+0xe4>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <GPIO_setupPinDirection+0xe0>
    181a:	84 2b       	or	r24, r20
    181c:	8c 93       	st	X, r24
    181e:	6c c0       	rjmp	.+216    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1820:	a7 e3       	ldi	r26, 0x37	; 55
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e7 e3       	ldi	r30, 0x37	; 55
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <GPIO_setupPinDirection+0x10c>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <GPIO_setupPinDirection+0x108>
    1842:	80 95       	com	r24
    1844:	84 23       	and	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	57 c0       	rjmp	.+174    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	a1 f4       	brne	.+40     	; 0x1878 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1850:	a4 e3       	ldi	r26, 0x34	; 52
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e4 e3       	ldi	r30, 0x34	; 52
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_setupPinDirection+0x13c>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_setupPinDirection+0x138>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	40 c0       	rjmp	.+128    	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1878:	a4 e3       	ldi	r26, 0x34	; 52
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e4 e3       	ldi	r30, 0x34	; 52
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <GPIO_setupPinDirection+0x164>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <GPIO_setupPinDirection+0x160>
    189a:	80 95       	com	r24
    189c:	84 23       	and	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	2b c0       	rjmp	.+86     	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	a1 f4       	brne	.+40     	; 0x18d0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18a8:	a1 e3       	ldi	r26, 0x31	; 49
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e1 e3       	ldi	r30, 0x31	; 49
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_setupPinDirection+0x194>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_setupPinDirection+0x190>
    18ca:	84 2b       	or	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    18d0:	a1 e3       	ldi	r26, 0x31	; 49
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e1 e3       	ldi	r30, 0x31	; 49
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <GPIO_setupPinDirection+0x1bc>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <GPIO_setupPinDirection+0x1b8>
    18f2:	80 95       	com	r24
    18f4:	84 23       	and	r24, r20
    18f6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <GPIO_writePin+0x6>
    190e:	00 d0       	rcall	.+0      	; 0x1910 <GPIO_writePin+0x8>
    1910:	0f 92       	push	r0
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	6a 83       	std	Y+2, r22	; 0x02
    191a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	88 30       	cpi	r24, 0x08	; 8
    1920:	08 f0       	brcs	.+2      	; 0x1924 <GPIO_writePin+0x1c>
    1922:	d5 c0       	rjmp	.+426    	; 0x1ace <GPIO_writePin+0x1c6>
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	08 f0       	brcs	.+2      	; 0x192c <GPIO_writePin+0x24>
    192a:	d1 c0       	rjmp	.+418    	; 0x1ace <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	3d 83       	std	Y+5, r19	; 0x05
    1934:	2c 83       	std	Y+4, r18	; 0x04
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	9d 81       	ldd	r25, Y+5	; 0x05
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	91 05       	cpc	r25, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <GPIO_writePin+0x3a>
    1940:	43 c0       	rjmp	.+134    	; 0x19c8 <GPIO_writePin+0xc0>
    1942:	2c 81       	ldd	r18, Y+4	; 0x04
    1944:	3d 81       	ldd	r19, Y+5	; 0x05
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	2c f4       	brge	.+10     	; 0x1956 <GPIO_writePin+0x4e>
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9d 81       	ldd	r25, Y+5	; 0x05
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	71 f0       	breq	.+28     	; 0x1970 <GPIO_writePin+0x68>
    1954:	bc c0       	rjmp	.+376    	; 0x1ace <GPIO_writePin+0x1c6>
    1956:	2c 81       	ldd	r18, Y+4	; 0x04
    1958:	3d 81       	ldd	r19, Y+5	; 0x05
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	09 f4       	brne	.+2      	; 0x1962 <GPIO_writePin+0x5a>
    1960:	5f c0       	rjmp	.+190    	; 0x1a20 <GPIO_writePin+0x118>
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	91 05       	cpc	r25, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <GPIO_writePin+0x66>
    196c:	85 c0       	rjmp	.+266    	; 0x1a78 <GPIO_writePin+0x170>
    196e:	af c0       	rjmp	.+350    	; 0x1ace <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	a1 f4       	brne	.+40     	; 0x199e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1976:	ab e3       	ldi	r26, 0x3B	; 59
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	eb e3       	ldi	r30, 0x3B	; 59
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <GPIO_writePin+0x8c>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <GPIO_writePin+0x88>
    1998:	84 2b       	or	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	98 c0       	rjmp	.+304    	; 0x1ace <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    199e:	ab e3       	ldi	r26, 0x3B	; 59
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	eb e3       	ldi	r30, 0x3B	; 59
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <GPIO_writePin+0xb4>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <GPIO_writePin+0xb0>
    19c0:	80 95       	com	r24
    19c2:	84 23       	and	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	83 c0       	rjmp	.+262    	; 0x1ace <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	a1 f4       	brne	.+40     	; 0x19f6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    19ce:	a8 e3       	ldi	r26, 0x38	; 56
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e8 e3       	ldi	r30, 0x38	; 56
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <GPIO_writePin+0xe4>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <GPIO_writePin+0xe0>
    19f0:	84 2b       	or	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	6c c0       	rjmp	.+216    	; 0x1ace <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    19f6:	a8 e3       	ldi	r26, 0x38	; 56
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <GPIO_writePin+0x10c>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <GPIO_writePin+0x108>
    1a18:	80 95       	com	r24
    1a1a:	84 23       	and	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	57 c0       	rjmp	.+174    	; 0x1ace <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	a1 f4       	brne	.+40     	; 0x1a4e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a26:	a5 e3       	ldi	r26, 0x35	; 53
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e5 e3       	ldi	r30, 0x35	; 53
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <GPIO_writePin+0x13c>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <GPIO_writePin+0x138>
    1a48:	84 2b       	or	r24, r20
    1a4a:	8c 93       	st	X, r24
    1a4c:	40 c0       	rjmp	.+128    	; 0x1ace <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a4e:	a5 e3       	ldi	r26, 0x35	; 53
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <GPIO_writePin+0x164>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <GPIO_writePin+0x160>
    1a70:	80 95       	com	r24
    1a72:	84 23       	and	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	2b c0       	rjmp	.+86     	; 0x1ace <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	a1 f4       	brne	.+40     	; 0x1aa6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a7e:	a2 e3       	ldi	r26, 0x32	; 50
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e2 e3       	ldi	r30, 0x32	; 50
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <GPIO_writePin+0x194>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <GPIO_writePin+0x190>
    1aa0:	84 2b       	or	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1aa6:	a2 e3       	ldi	r26, 0x32	; 50
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e2 e3       	ldi	r30, 0x32	; 50
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <GPIO_writePin+0x1bc>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <GPIO_writePin+0x1b8>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <GPIO_readPin+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <GPIO_readPin+0x8>
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	8a 83       	std	Y+2, r24	; 0x02
    1aee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1af0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	88 30       	cpi	r24, 0x08	; 8
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <GPIO_readPin+0x1c>
    1af8:	84 c0       	rjmp	.+264    	; 0x1c02 <GPIO_readPin+0x124>
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	08 f0       	brcs	.+2      	; 0x1b02 <GPIO_readPin+0x24>
    1b00:	80 c0       	rjmp	.+256    	; 0x1c02 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3d 83       	std	Y+5, r19	; 0x05
    1b0a:	2c 83       	std	Y+4, r18	; 0x04
    1b0c:	4c 81       	ldd	r20, Y+4	; 0x04
    1b0e:	5d 81       	ldd	r21, Y+5	; 0x05
    1b10:	41 30       	cpi	r20, 0x01	; 1
    1b12:	51 05       	cpc	r21, r1
    1b14:	79 f1       	breq	.+94     	; 0x1b74 <GPIO_readPin+0x96>
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	34 f4       	brge	.+12     	; 0x1b2c <GPIO_readPin+0x4e>
    1b20:	2c 81       	ldd	r18, Y+4	; 0x04
    1b22:	3d 81       	ldd	r19, Y+5	; 0x05
    1b24:	21 15       	cp	r18, r1
    1b26:	31 05       	cpc	r19, r1
    1b28:	69 f0       	breq	.+26     	; 0x1b44 <GPIO_readPin+0x66>
    1b2a:	6b c0       	rjmp	.+214    	; 0x1c02 <GPIO_readPin+0x124>
    1b2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1b2e:	5d 81       	ldd	r21, Y+5	; 0x05
    1b30:	42 30       	cpi	r20, 0x02	; 2
    1b32:	51 05       	cpc	r21, r1
    1b34:	b9 f1       	breq	.+110    	; 0x1ba4 <GPIO_readPin+0xc6>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <GPIO_readPin+0x64>
    1b40:	49 c0       	rjmp	.+146    	; 0x1bd4 <GPIO_readPin+0xf6>
    1b42:	5f c0       	rjmp	.+190    	; 0x1c02 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b44:	e9 e3       	ldi	r30, 0x39	; 57
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a9 01       	movw	r20, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <GPIO_readPin+0x7e>
    1b58:	55 95       	asr	r21
    1b5a:	47 95       	ror	r20
    1b5c:	8a 95       	dec	r24
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <GPIO_readPin+0x7a>
    1b60:	ca 01       	movw	r24, r20
    1b62:	81 70       	andi	r24, 0x01	; 1
    1b64:	90 70       	andi	r25, 0x00	; 0
    1b66:	88 23       	and	r24, r24
    1b68:	19 f0       	breq	.+6      	; 0x1b70 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	49 c0       	rjmp	.+146    	; 0x1c02 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b70:	19 82       	std	Y+1, r1	; 0x01
    1b72:	47 c0       	rjmp	.+142    	; 0x1c02 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b74:	e6 e3       	ldi	r30, 0x36	; 54
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a9 01       	movw	r20, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <GPIO_readPin+0xae>
    1b88:	55 95       	asr	r21
    1b8a:	47 95       	ror	r20
    1b8c:	8a 95       	dec	r24
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <GPIO_readPin+0xaa>
    1b90:	ca 01       	movw	r24, r20
    1b92:	81 70       	andi	r24, 0x01	; 1
    1b94:	90 70       	andi	r25, 0x00	; 0
    1b96:	88 23       	and	r24, r24
    1b98:	19 f0       	breq	.+6      	; 0x1ba0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	31 c0       	rjmp	.+98     	; 0x1c02 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
    1ba2:	2f c0       	rjmp	.+94     	; 0x1c02 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ba4:	e3 e3       	ldi	r30, 0x33	; 51
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a9 01       	movw	r20, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <GPIO_readPin+0xde>
    1bb8:	55 95       	asr	r21
    1bba:	47 95       	ror	r20
    1bbc:	8a 95       	dec	r24
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <GPIO_readPin+0xda>
    1bc0:	ca 01       	movw	r24, r20
    1bc2:	81 70       	andi	r24, 0x01	; 1
    1bc4:	90 70       	andi	r25, 0x00	; 0
    1bc6:	88 23       	and	r24, r24
    1bc8:	19 f0       	breq	.+6      	; 0x1bd0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	19 c0       	rjmp	.+50     	; 0x1c02 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bd0:	19 82       	std	Y+1, r1	; 0x01
    1bd2:	17 c0       	rjmp	.+46     	; 0x1c02 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1bd4:	e0 e3       	ldi	r30, 0x30	; 48
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a9 01       	movw	r20, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <GPIO_readPin+0x10e>
    1be8:	55 95       	asr	r21
    1bea:	47 95       	ror	r20
    1bec:	8a 95       	dec	r24
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <GPIO_readPin+0x10a>
    1bf0:	ca 01       	movw	r24, r20
    1bf2:	81 70       	andi	r24, 0x01	; 1
    1bf4:	90 70       	andi	r25, 0x00	; 0
    1bf6:	88 23       	and	r24, r24
    1bf8:	19 f0       	breq	.+6      	; 0x1c00 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c00:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <GPIO_setupPortDirection+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <GPIO_setupPortDirection+0x8>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	90 f5       	brcc	.+100    	; 0x1c8e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	3c 83       	std	Y+4, r19	; 0x04
    1c32:	2b 83       	std	Y+3, r18	; 0x03
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	d1 f0       	breq	.+52     	; 0x1c72 <GPIO_setupPortDirection+0x5e>
    1c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c40:	3c 81       	ldd	r19, Y+4	; 0x04
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	2c f4       	brge	.+10     	; 0x1c52 <GPIO_setupPortDirection+0x3e>
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	61 f0       	breq	.+24     	; 0x1c68 <GPIO_setupPortDirection+0x54>
    1c50:	1e c0       	rjmp	.+60     	; 0x1c8e <GPIO_setupPortDirection+0x7a>
    1c52:	2b 81       	ldd	r18, Y+3	; 0x03
    1c54:	3c 81       	ldd	r19, Y+4	; 0x04
    1c56:	22 30       	cpi	r18, 0x02	; 2
    1c58:	31 05       	cpc	r19, r1
    1c5a:	81 f0       	breq	.+32     	; 0x1c7c <GPIO_setupPortDirection+0x68>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	83 30       	cpi	r24, 0x03	; 3
    1c62:	91 05       	cpc	r25, r1
    1c64:	81 f0       	breq	.+32     	; 0x1c86 <GPIO_setupPortDirection+0x72>
    1c66:	13 c0       	rjmp	.+38     	; 0x1c8e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c68:	ea e3       	ldi	r30, 0x3A	; 58
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	80 83       	st	Z, r24
    1c70:	0e c0       	rjmp	.+28     	; 0x1c8e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c72:	e7 e3       	ldi	r30, 0x37	; 55
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	80 83       	st	Z, r24
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c7c:	e4 e3       	ldi	r30, 0x34	; 52
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	80 83       	st	Z, r24
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c86:	e1 e3       	ldi	r30, 0x31	; 49
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <GPIO_writePort+0x6>
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <GPIO_writePort+0x8>
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	84 30       	cpi	r24, 0x04	; 4
    1cb0:	90 f5       	brcc	.+100    	; 0x1d16 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3c 83       	std	Y+4, r19	; 0x04
    1cba:	2b 83       	std	Y+3, r18	; 0x03
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	d1 f0       	breq	.+52     	; 0x1cfa <GPIO_writePort+0x5e>
    1cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cca:	22 30       	cpi	r18, 0x02	; 2
    1ccc:	31 05       	cpc	r19, r1
    1cce:	2c f4       	brge	.+10     	; 0x1cda <GPIO_writePort+0x3e>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	61 f0       	breq	.+24     	; 0x1cf0 <GPIO_writePort+0x54>
    1cd8:	1e c0       	rjmp	.+60     	; 0x1d16 <GPIO_writePort+0x7a>
    1cda:	2b 81       	ldd	r18, Y+3	; 0x03
    1cdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cde:	22 30       	cpi	r18, 0x02	; 2
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	81 f0       	breq	.+32     	; 0x1d04 <GPIO_writePort+0x68>
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	83 30       	cpi	r24, 0x03	; 3
    1cea:	91 05       	cpc	r25, r1
    1cec:	81 f0       	breq	.+32     	; 0x1d0e <GPIO_writePort+0x72>
    1cee:	13 c0       	rjmp	.+38     	; 0x1d16 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1cf0:	eb e3       	ldi	r30, 0x3B	; 59
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	80 83       	st	Z, r24
    1cf8:	0e c0       	rjmp	.+28     	; 0x1d16 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1cfa:	e8 e3       	ldi	r30, 0x38	; 56
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	80 83       	st	Z, r24
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	80 83       	st	Z, r24
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d0e:	e2 e3       	ldi	r30, 0x32	; 50
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <GPIO_readPort+0x6>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <GPIO_readPort+0x8>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d32:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	90 f5       	brcc	.+100    	; 0x1d9e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	3c 83       	std	Y+4, r19	; 0x04
    1d42:	2b 83       	std	Y+3, r18	; 0x03
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	d1 f0       	breq	.+52     	; 0x1d82 <GPIO_readPort+0x5e>
    1d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d50:	3c 81       	ldd	r19, Y+4	; 0x04
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	31 05       	cpc	r19, r1
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <GPIO_readPort+0x3e>
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <GPIO_readPort+0x54>
    1d60:	1e c0       	rjmp	.+60     	; 0x1d9e <GPIO_readPort+0x7a>
    1d62:	2b 81       	ldd	r18, Y+3	; 0x03
    1d64:	3c 81       	ldd	r19, Y+4	; 0x04
    1d66:	22 30       	cpi	r18, 0x02	; 2
    1d68:	31 05       	cpc	r19, r1
    1d6a:	81 f0       	breq	.+32     	; 0x1d8c <GPIO_readPort+0x68>
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	91 05       	cpc	r25, r1
    1d74:	81 f0       	breq	.+32     	; 0x1d96 <GPIO_readPort+0x72>
    1d76:	13 c0       	rjmp	.+38     	; 0x1d9e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d78:	e9 e3       	ldi	r30, 0x39	; 57
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d82:	e6 e3       	ldi	r30, 0x36	; 54
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	09 c0       	rjmp	.+18     	; 0x1d9e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d8c:	e3 e3       	ldi	r30, 0x33	; 51
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	04 c0       	rjmp	.+8      	; 0x1d9e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d96:	e0 e3       	ldi	r30, 0x30	; 48
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <PWM_Timer0_Start>:
 * F_PWM=(F_CPU)/(256*N) = (8*10^6)/(256*256) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	0f 92       	push	r0
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
    1dba:	e2 e5       	ldi	r30, 0x52	; 82
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	10 82       	st	Z, r1

	OCR0  = duty_cycle; //Set Compare value
    1dc0:	ec e5       	ldi	r30, 0x5C	; 92
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1dc8:	a7 e3       	ldi	r26, 0x37	; 55
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e7 e3       	ldi	r30, 0x37	; 55
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	88 60       	ori	r24, 0x08	; 8
    1dd4:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1dd6:	e3 e5       	ldi	r30, 0x53	; 83
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	8a e6       	ldi	r24, 0x6A	; 106
    1ddc:	80 83       	st	Z, r24
}
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
#if(USED_MODE == COMPARE_MODE)
ISR(TIMER1_COMPA_vect)
{
    1de6:	1f 92       	push	r1
    1de8:	0f 92       	push	r0
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	0f 92       	push	r0
    1dee:	11 24       	eor	r1, r1
    1df0:	2f 93       	push	r18
    1df2:	3f 93       	push	r19
    1df4:	4f 93       	push	r20
    1df6:	5f 93       	push	r21
    1df8:	6f 93       	push	r22
    1dfa:	7f 93       	push	r23
    1dfc:	8f 93       	push	r24
    1dfe:	9f 93       	push	r25
    1e00:	af 93       	push	r26
    1e02:	bf 93       	push	r27
    1e04:	ef 93       	push	r30
    1e06:	ff 93       	push	r31
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1e10:	80 91 70 01 	lds	r24, 0x0170
    1e14:	90 91 71 01 	lds	r25, 0x0171
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	29 f0       	breq	.+10     	; 0x1e26 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e1c:	e0 91 70 01 	lds	r30, 0x0170
    1e20:	f0 91 71 01 	lds	r31, 0x0171
    1e24:	09 95       	icall
	}
}
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	ff 91       	pop	r31
    1e2c:	ef 91       	pop	r30
    1e2e:	bf 91       	pop	r27
    1e30:	af 91       	pop	r26
    1e32:	9f 91       	pop	r25
    1e34:	8f 91       	pop	r24
    1e36:	7f 91       	pop	r23
    1e38:	6f 91       	pop	r22
    1e3a:	5f 91       	pop	r21
    1e3c:	4f 91       	pop	r20
    1e3e:	3f 91       	pop	r19
    1e40:	2f 91       	pop	r18
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	0f 90       	pop	r0
    1e48:	1f 90       	pop	r1
    1e4a:	18 95       	reti

00001e4c <Timer1_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <Timer1_init+0x6>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initial_value;
    1e5a:	a2 e5       	ldi	r26, 0x52	; 82
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e60:	fa 81       	ldd	r31, Y+2	; 0x02
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	8c 93       	st	X, r24

	TCCR1A = (1<<FOC1A) | (1<<FOC1B); /*FOC1A , FOC1B are 1 to cancel PWM mode
    1e68:	ef e4       	ldi	r30, 0x4F	; 79
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	8c e0       	ldi	r24, 0x0C	; 12
    1e6e:	80 83       	st	Z, r24
	 *Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 *WGM10, WGM11 are zero to choose only between normal and compare mode
	 */
	TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode)<<WGM12); /*Prescaler by the first three bits(CS10,CS12,CS11)
    1e70:	ae e4       	ldi	r26, 0x4E	; 78
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e9 81       	ldd	r30, Y+1	; 0x01
    1e76:	fa 81       	ldd	r31, Y+2	; 0x02
    1e78:	84 81       	ldd	r24, Z+4	; 0x04
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	85 81       	ldd	r24, Z+5	; 0x05
    1e82:	88 2f       	mov	r24, r24
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	82 2b       	or	r24, r18
    1e94:	8c 93       	st	X, r24
	 *WGM13 is zero to choose only between normal and compare mode by making WGM12 1(for compare) or 0(for normal)
	 */
#if(USED_MODE == COMPARE_MODE)
	OCR1A = Config_Ptr->compare_value;
    1e96:	aa e4       	ldi	r26, 0x4A	; 74
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	11 96       	adiw	r26, 0x01	; 1
    1ea4:	9c 93       	st	X, r25
    1ea6:	8e 93       	st	-X, r24
	TIMSK |= (1<<OCIE1A);// Enable Timer1 Compare Interrupt///////////////////////////////////////////////////////////////////////////
    1ea8:	a9 e5       	ldi	r26, 0x59	; 89
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e9 e5       	ldi	r30, 0x59	; 89
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 61       	ori	r24, 0x10	; 16
    1eb4:	8c 93       	st	X, r24
#elif(USED_MODE == NORMAL_MODE)
	TIMSK |= (1<<TOIE1);// Enable Timer1 Overflow Interrupt///////////////////////////////////////////////////////////////////////////
#endif
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <Timer1_deInit>:
/*
 * Description : Function to disable the Timer1.
 *
 */
void Timer1_deInit(void)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1ec8:	ef e4       	ldi	r30, 0x4F	; 79
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	10 82       	st	Z, r1
	TCCR1B = 0;
    1ece:	ee e4       	ldi	r30, 0x4E	; 78
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	10 82       	st	Z, r1
#if(USED_MODE == COMPARE_MODE)
	TIMSK &= ~(1<<OCIE1A); // Disable Timer1 Compare Interrupt///////////////////////////////////////////////////////////////////////////
    1ed4:	a9 e5       	ldi	r26, 0x59	; 89
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e9 e5       	ldi	r30, 0x59	; 89
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8f 7e       	andi	r24, 0xEF	; 239
    1ee0:	8c 93       	st	X, r24
#elif(USED_MODE == NORMAL_MODE)
	TIMSK &= ~(1<<TOIE1); // Disable Timer1 Overflow Interrupt
#endif
}
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <Timer1_setCallBack>:
/*
 * Description : Function to set the Call Back function address.
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <Timer1_setCallBack+0x6>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	90 93 71 01 	sts	0x0171, r25
    1efe:	80 93 70 01 	sts	0x0170, r24
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <TWI_init+0x6>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
	/*Selecting Bit Rate by fixing REG TWBR=2 and changig TWPS1,TWPS0 bits in REG TWSR pre-scaler
	 *The CPU Freq. must be 8Mhz to satisfy these values of bit Rates ide: SCL_Freq = (CPU_Frq.)/(16+2TWBR*4^TWPS), CPU_Frq. must be > 16*SCL_Frq.
	 */
	TWBR = 0x02;
    1f1a:	e0 e2       	ldi	r30, 0x20	; 32
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	80 83       	st	Z, r24
	TWSR = Config_Ptr->bit_rate;
    1f22:	a1 e2       	ldi	r26, 0x21	; 33
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e9 81       	ldd	r30, Y+1	; 0x01
    1f28:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	8c 93       	st	X, r24
	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = Config_Ptr->address; // my address = 0x01 :)
    1f2e:	a2 e2       	ldi	r26, 0x22	; 34
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e9 81       	ldd	r30, Y+1	; 0x01
    1f34:	fa 81       	ldd	r31, Y+2	; 0x02
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    1f3c:	e6 e5       	ldi	r30, 0x56	; 86
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	84 e0       	ldi	r24, 0x04	; 4
    1f42:	80 83       	st	Z, r24
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <TWI_start>:

void TWI_start(void)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f56:	e6 e5       	ldi	r30, 0x56	; 86
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	84 ea       	ldi	r24, 0xA4	; 164
    1f5c:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1f5e:	e6 e5       	ldi	r30, 0x56	; 86
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	88 23       	and	r24, r24
    1f66:	dc f7       	brge	.-10     	; 0x1f5e <TWI_start+0x10>
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <TWI_stop>:

void TWI_stop(void)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f76:	e6 e5       	ldi	r30, 0x56	; 86
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	84 e9       	ldi	r24, 0x94	; 148
    1f7c:	80 83       	st	Z, r24
}
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	0f 92       	push	r0
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    1f90:	e3 e2       	ldi	r30, 0x23	; 35
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1f98:	e6 e5       	ldi	r30, 0x56	; 86
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	84 e8       	ldi	r24, 0x84	; 132
    1f9e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1fa0:	e6 e5       	ldi	r30, 0x56	; 86
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 23       	and	r24, r24
    1fa8:	dc f7       	brge	.-10     	; 0x1fa0 <TWI_writeByte+0x1c>
}
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1fba:	e6 e5       	ldi	r30, 0x56	; 86
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	84 ec       	ldi	r24, 0xC4	; 196
    1fc0:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1fc2:	e6 e5       	ldi	r30, 0x56	; 86
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	88 23       	and	r24, r24
    1fca:	dc f7       	brge	.-10     	; 0x1fc2 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    1fcc:	e3 e2       	ldi	r30, 0x23	; 35
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
}
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1fe0:	e6 e5       	ldi	r30, 0x56	; 86
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	84 e8       	ldi	r24, 0x84	; 132
    1fe6:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1fe8:	e6 e5       	ldi	r30, 0x56	; 86
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	88 23       	and	r24, r24
    1ff0:	dc f7       	brge	.-10     	; 0x1fe8 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    1ff2:	e3 e2       	ldi	r30, 0x23	; 35
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
}
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	0f 92       	push	r0
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    2008:	e1 e2       	ldi	r30, 0x21	; 33
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	88 7f       	andi	r24, 0xF8	; 248
    2010:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
}
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <UART_init+0x6>
    2022:	00 d0       	rcall	.+0      	; 0x2024 <UART_init+0x8>
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    202c:	1a 82       	std	Y+2, r1	; 0x02
    202e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2030:	eb e2       	ldi	r30, 0x2B	; 43
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | (Config_Ptr->bit_data & 0x04);
    2038:	aa e2       	ldi	r26, 0x2A	; 42
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	eb 81       	ldd	r30, Y+3	; 0x03
    203e:	fc 81       	ldd	r31, Y+4	; 0x04
    2040:	80 81       	ld	r24, Z
    2042:	84 70       	andi	r24, 0x04	; 4
    2044:	88 61       	ori	r24, 0x18	; 24
    2046:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit ;
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data & 0x03)<<UCSZ0) | ((Config_Ptr->parity)<<UPM0) | ((Config_Ptr->stop_bit)<<USBS);
    2048:	a0 e4       	ldi	r26, 0x40	; 64
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	eb 81       	ldd	r30, Y+3	; 0x03
    204e:	fc 81       	ldd	r31, Y+4	; 0x04
    2050:	80 81       	ld	r24, Z
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	83 70       	andi	r24, 0x03	; 3
    2058:	90 70       	andi	r25, 0x00	; 0
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	28 2f       	mov	r18, r24
    2060:	20 68       	ori	r18, 0x80	; 128
    2062:	eb 81       	ldd	r30, Y+3	; 0x03
    2064:	fc 81       	ldd	r31, Y+4	; 0x04
    2066:	81 81       	ldd	r24, Z+1	; 0x01
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	82 95       	swap	r24
    206e:	92 95       	swap	r25
    2070:	90 7f       	andi	r25, 0xF0	; 240
    2072:	98 27       	eor	r25, r24
    2074:	80 7f       	andi	r24, 0xF0	; 240
    2076:	98 27       	eor	r25, r24
    2078:	28 2b       	or	r18, r24
    207a:	eb 81       	ldd	r30, Y+3	; 0x03
    207c:	fc 81       	ldd	r31, Y+4	; 0x04
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	82 2b       	or	r24, r18
    2092:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2094:	eb 81       	ldd	r30, Y+3	; 0x03
    2096:	fc 81       	ldd	r31, Y+4	; 0x04
    2098:	83 81       	ldd	r24, Z+3	; 0x03
    209a:	94 81       	ldd	r25, Z+4	; 0x04
    209c:	a5 81       	ldd	r26, Z+5	; 0x05
    209e:	b6 81       	ldd	r27, Z+6	; 0x06
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	aa 1f       	adc	r26, r26
    20a6:	bb 1f       	adc	r27, r27
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	aa 1f       	adc	r26, r26
    20ae:	bb 1f       	adc	r27, r27
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	aa 1f       	adc	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	9c 01       	movw	r18, r24
    20ba:	ad 01       	movw	r20, r26
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	92 e1       	ldi	r25, 0x12	; 18
    20c0:	aa e7       	ldi	r26, 0x7A	; 122
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 0f 11 	call	0x221e	; 0x221e <__udivmodsi4>
    20cc:	da 01       	movw	r26, r20
    20ce:	c9 01       	movw	r24, r18
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    20d6:	e0 e4       	ldi	r30, 0x40	; 64
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
    20de:	89 2f       	mov	r24, r25
    20e0:	99 27       	eor	r25, r25
    20e2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    20e4:	e9 e2       	ldi	r30, 0x29	; 41
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	80 83       	st	Z, r24
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	0f 92       	push	r0
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2106:	eb e2       	ldi	r30, 0x2B	; 43
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	80 72       	andi	r24, 0x20	; 32
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	b9 f3       	breq	.-18     	; 0x2106 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2118:	ec e2       	ldi	r30, 0x2C	; 44
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2130:	eb e2       	ldi	r30, 0x2B	; 43
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	88 23       	and	r24, r24
    2138:	dc f7       	brge	.-10     	; 0x2130 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    213a:	ec e2       	ldi	r30, 0x2C	; 44
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	00 d0       	rcall	.+0      	; 0x214c <UART_sendString+0x6>
    214c:	0f 92       	push	r0
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	9b 83       	std	Y+3, r25	; 0x03
    2154:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	80 81       	ld	r24, Z
    216c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UART_sendByte>
		i++;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	fc 01       	movw	r30, r24
    2182:	e2 0f       	add	r30, r18
    2184:	f3 1f       	adc	r31, r19
    2186:	80 81       	ld	r24, Z
    2188:	88 23       	and	r24, r24
    218a:	39 f7       	brne	.-50     	; 0x215a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <UART_receiveString+0xa>
    21a2:	0f 92       	push	r0
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	9b 83       	std	Y+3, r25	; 0x03
    21aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21ac:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	8c 01       	movw	r16, r24
    21ba:	02 0f       	add	r16, r18
    21bc:	13 1f       	adc	r17, r19
    21be:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
    21c2:	f8 01       	movw	r30, r16
    21c4:	80 83       	st	Z, r24
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	8f 5f       	subi	r24, 0xFF	; 255
    21cc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
    21d8:	8c 01       	movw	r16, r24
    21da:	02 0f       	add	r16, r18
    21dc:	13 1f       	adc	r17, r19
    21de:	0e 94 94 10 	call	0x2128	; 0x2128 <UART_recieveByte>
    21e2:	f8 01       	movw	r30, r16
    21e4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	fc 01       	movw	r30, r24
    21f2:	e2 0f       	add	r30, r18
    21f4:	f3 1f       	adc	r31, r19
    21f6:	80 81       	ld	r24, Z
    21f8:	83 32       	cpi	r24, 0x23	; 35
    21fa:	31 f7       	brne	.-52     	; 0x21c8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	9b 81       	ldd	r25, Y+3	; 0x03
    2206:	fc 01       	movw	r30, r24
    2208:	e2 0f       	add	r30, r18
    220a:	f3 1f       	adc	r31, r19
    220c:	10 82       	st	Z, r1
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	08 95       	ret

0000221e <__udivmodsi4>:
    221e:	a1 e2       	ldi	r26, 0x21	; 33
    2220:	1a 2e       	mov	r1, r26
    2222:	aa 1b       	sub	r26, r26
    2224:	bb 1b       	sub	r27, r27
    2226:	fd 01       	movw	r30, r26
    2228:	0d c0       	rjmp	.+26     	; 0x2244 <__udivmodsi4_ep>

0000222a <__udivmodsi4_loop>:
    222a:	aa 1f       	adc	r26, r26
    222c:	bb 1f       	adc	r27, r27
    222e:	ee 1f       	adc	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	a2 17       	cp	r26, r18
    2234:	b3 07       	cpc	r27, r19
    2236:	e4 07       	cpc	r30, r20
    2238:	f5 07       	cpc	r31, r21
    223a:	20 f0       	brcs	.+8      	; 0x2244 <__udivmodsi4_ep>
    223c:	a2 1b       	sub	r26, r18
    223e:	b3 0b       	sbc	r27, r19
    2240:	e4 0b       	sbc	r30, r20
    2242:	f5 0b       	sbc	r31, r21

00002244 <__udivmodsi4_ep>:
    2244:	66 1f       	adc	r22, r22
    2246:	77 1f       	adc	r23, r23
    2248:	88 1f       	adc	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	1a 94       	dec	r1
    224e:	69 f7       	brne	.-38     	; 0x222a <__udivmodsi4_loop>
    2250:	60 95       	com	r22
    2252:	70 95       	com	r23
    2254:	80 95       	com	r24
    2256:	90 95       	com	r25
    2258:	9b 01       	movw	r18, r22
    225a:	ac 01       	movw	r20, r24
    225c:	bd 01       	movw	r22, r26
    225e:	cf 01       	movw	r24, r30
    2260:	08 95       	ret

00002262 <__prologue_saves__>:
    2262:	2f 92       	push	r2
    2264:	3f 92       	push	r3
    2266:	4f 92       	push	r4
    2268:	5f 92       	push	r5
    226a:	6f 92       	push	r6
    226c:	7f 92       	push	r7
    226e:	8f 92       	push	r8
    2270:	9f 92       	push	r9
    2272:	af 92       	push	r10
    2274:	bf 92       	push	r11
    2276:	cf 92       	push	r12
    2278:	df 92       	push	r13
    227a:	ef 92       	push	r14
    227c:	ff 92       	push	r15
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	ca 1b       	sub	r28, r26
    228c:	db 0b       	sbc	r29, r27
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	09 94       	ijmp

0000229a <__epilogue_restores__>:
    229a:	2a 88       	ldd	r2, Y+18	; 0x12
    229c:	39 88       	ldd	r3, Y+17	; 0x11
    229e:	48 88       	ldd	r4, Y+16	; 0x10
    22a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    22a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    22a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    22a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    22a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    22aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ac:	b9 84       	ldd	r11, Y+9	; 0x09
    22ae:	c8 84       	ldd	r12, Y+8	; 0x08
    22b0:	df 80       	ldd	r13, Y+7	; 0x07
    22b2:	ee 80       	ldd	r14, Y+6	; 0x06
    22b4:	fd 80       	ldd	r15, Y+5	; 0x05
    22b6:	0c 81       	ldd	r16, Y+4	; 0x04
    22b8:	1b 81       	ldd	r17, Y+3	; 0x03
    22ba:	aa 81       	ldd	r26, Y+2	; 0x02
    22bc:	b9 81       	ldd	r27, Y+1	; 0x01
    22be:	ce 0f       	add	r28, r30
    22c0:	d1 1d       	adc	r29, r1
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	ed 01       	movw	r28, r26
    22ce:	08 95       	ret

000022d0 <_exit>:
    22d0:	f8 94       	cli

000022d2 <__stop_program>:
    22d2:	ff cf       	rjmp	.-2      	; 0x22d2 <__stop_program>
